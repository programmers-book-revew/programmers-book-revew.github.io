[["SEは死滅する", "http://www.amazon.co.jp/dp/4822279804", "木村 岳史/日経BP社", "se_become_extinct", "Thu Aug 6 07:24:00 +0900 2015", "3", "絶対に落ちないことが求められている基幹業務システムも、現在の技術を用いれば、落ちてもすぐに復旧するようなシステムであれば少人数で作れるのではないか、と漠然と考えている自分には、SIという仕事が今後どうなるのかを考えるきっかけとなる良い本だった。\n\n勝手に次のような要旨だと受け取った。\n\n* 今まではユーザ企業のIT部門がITベンダーにSIを依頼してきた。\n* これらのシステムは業務支援がほとんどであり直接価値を生むことはないため、コストをかけられない。アウトソーシングの対象でありクラウドサービスも多くある。\n* 今後はユーザ企業の事業部門が直接価値を生むシステムをIT部門に頼らず自らが企画してシステム構築を行うことがメインになる。\n* この時声がかかるのは、従来のSIerではなく、無駄なく最短で価値を提供してくれるWeb企業。\n\nこの当たりは、自身がお客さんと接している環境と一致しており共感できる所が多い。\n自分が興味ある点は、ではその世界が来たときに、どのようにして自分の会社を含めたSIerは事業を継続するのか、という点。人月が売上に比例する従来の事業形態は、無駄なく最短で価値を創り出すリーンスタートアップの考え方と相容れない。また、自分の会社は今まで直接価値を生み出すシステムを多く手がけていないという点も悩ましい。価値のあるものを開発、運用し続けるというDevOpsも開発と運用形態が分けられていることを前提とした組織体系には合っていない。監視、デプロイなどのツールの高機能化に伴い、エンジニアとしてまさに知識労働者が求められる時代となっており、その期待値以上に成果を提供し続ける点が重要である。結局出来る人だけが求められて、そうでない人は用がないのであれば、出来る人を増やし続けるしかないのか、という面白みのない考えしか思い浮かばない。\n\n本の中では、顧客とサービス検討の段階からコンサルするようなパートナーとなり、その成果をシェアすることが生きる道とあった。その時重要になるのは、システムは出来て当たり前で、どうやってサービスを成功に導いて行くのか、その過程を指南しつづけることにある。それが出来るのかという点、本当にそこまで求められるのかという点で疑問が残るけど、目指すべき方向としては悪くない気もする。\n\n現実的な所で思いつくのは、価値を生まないようなユーザ企業のシステムを、低コストで実現するところか。そもそも(直接的な)価値がないのだから、安く作ること自体が正義であるし、SI会社単体では利益を生まないけれども、当社のようにグループ会社であれば、その全体として最適化されているので問題ないはず。\n\n読んでいて一番気づきが得られた所は、システムはその目的で直接価値を生み出すものと、そうではなく間接的なものがあり、それぞれにかけるコストの考え方が異なるというもの。当然、間接的なものはコスト削減が大きな課題だし、直接価値を生み出すものは費用対効果があれば投資対象となり得る。\n\n残念なのは論理が欠けているところ。根拠も無ければ飛躍しすぎていて、最初立ち読みしたときは本当に意味が分からなかった。また、連載をまとめたものらしく、同じ主張が何度も繰り返されており、うんざり。", ["misc"]],
["シェア", "http://www.amazon.co.jp/dp/4140814543/", "レイチェル・ボッツマン\, ルー・ロジャース/日本放送出版協会", "share", "Thu Jan 22 09:37:41 +0900 2015", "3", "この本ではシェアを中心に論じているが、その本質は、本にも書かれているとおり、ものへの執着度が下がり、経験に対する興味が上がっていることだと思う。単なるものを買って他人に見てもらうことが自分にも他人にも大したことがないことに気づき、自分にとって何を体験させてくれたかのワクワク感を共有したいという欲求なのだと思う。その中で、非効率であったり無意味なものは、シェアという形で淘汰されているのではないかと思った。\n\n(むかし、衣食住など生活に必要なもの以外、何がものとして生き残るのか、ということを少し真面目に考えたことがあったりもする。チクセントミハイのモノの意味が(最初は退屈だけど)おすすめ。)\n\n細かいところでは、クールなサービスが先にあり、結果としてエコなことが付随してくるという点も何度も強調されていて、それこそがまずはサービスとして生き残るための条件だとも思う。アイデアよりもworkするものを作ることが重要な気もする。\n\nあと、メモしたスワップ・ドットコムの日本版、あったら試してみたい。\n\n以下、自分用メモ\n<!--more-->\n\n> 本書では、世界中で起きつつある何千というコラボ消費の事例を、三種類のモデルに分類した──それが、プロダクト＝サービス・システム、再分配市場、そしてコラボ的ライフスタイルだ。これら三つのモデルがひとつになって、「何を消費するか」だけでなく「どう消費するか」を変えつつある。\n\n> 過剰消費の二〇世紀には、信用履歴や広告、所有物によってその人が定義されたのに対し、コラボ消費の二一世紀には、評判や、属するコミュニティ、何にアクセスできるか、どうシェアするか、また何を手放すかが、人を定義するだろう。\n\n> コラボ消費は、オンラインのソーシャルネットワークが実現するテクノロジーや、その中での人々の行動に深く根づいている。人々は、こうしたデジタルのやりとりをとおして、協調することはかならずしも個人を犠牲にすることではないことを身をもって体験し、楽しく自然にシェアできる人間らしい行動が促されるようになった。人々はそのうち過去を振り返り、インターネットがコラボ消費を生んだ──コメントをアップし、ファイルやコード、写真や動画、そして知識を共有することによって──と思い起こすに違いない。現在、私たちは大きな転換点に立ち、このオンラインのコラボレーションの原則とシェア行為を日常生活の他の分野に応用しはじめている。朝の通勤、オフィススペース、お金の貸し借り、ファッションデザインなど、日常のさまざまな分野でコラボレーションをとおした創造と消費が実現している。 　本書は、所有かシェアかの二者択一を迫るものではない。エアビーアンドビーのような優良なビジネスモデルが、これまでのサービス業とコラボレーションのハイブリッドとなるように、私たちのほとんどは、将来両方を利用することになるだろう。コラボ消費は、古い消費主義のモデルと両立し、そのうち互角に競合するようになる。『ハフィントン・ポスト』といったブログが、一〇〇年余りの歴史を持つニューヨーク・タイムズのような新聞と競合しているのがよい例だ。\n\n> では、人々は倉庫に何を詰め込んでいるのだろう？　キャンプの道具、芝刈り機、ローラースケート、ペット用の檻、パン焼き器、その他もろもろの電子機器類、ナショナル・ジオグラフィック誌のバックナンバー、昔もらったお土産、子どもたちの自転車、そのうちまた使うかもしれないＰＣモニター、小学一年生の時に吹いたっきりのクラリネット、何年分もの銀行の明細書、昔使っていたソファなど──挙げればきりがない。だが、そのほとんどは、散らかるのがいやだから家には置きたくないけれど、「とりあえず」お金を払ってしまっておきたい「ただのモノ」だ。\n\n> スワップ取引、タイムバンク、地域通貨システム（ＬＥＴＳ）、物々交換、ソーシャルレンディング、Ｐ２Ｐ通貨、ツール交換、ランドシェア、衣服スワップ、おもちゃシェア、オフィスシェア、コ・ハウジング、コ・ワーキング、カウチサーフィン、カーシェア、クラウドファンディング、バイクシェア、ライドシェア、協同組合、ウォーキング・スクールバス（集団登校）、小型託児所シェア、Ｐ２Ｐレンタル──数え挙げればきりがないが、これらは、すべてコラボ消費の例だ。\n\n> これらのサービス例は規模も成熟度も目的もばらばらだが、大きく三つのタイプに分けられる──プロダクト＝サービス・システム、再分配市場、コラボ的ライフスタイルだ。\n\n> ある製品を一〇〇パーセント所有しなくても、その製品から受けたサービス──つまり利用した分──にだけお金を払うという、「所有より利用」の考え方に、バックグラウンドの違うさまざまな年代の人々が、ますます傾いている。このコンセプトがプロダクト＝サービス・システム（ＰＳＳ）の基本であり、このモデルが個人の私的所有を前提に成り立ってきたこれまでの産業を破壊しつつある。このモデルには、企業が所有するさまざまな製品をシェアするサービス（カーシェア、太陽光発電、コインランドリー）や、個人が所有するものをシェアしたり、Ｐ２Ｐで貸し出すサービス（ジロック、レントイド［Rentoid］、リレーライズ）がある。また、製品寿命を延ばすサービス（デニム・セラピー［Denim Therapy］、スティールケース［Steelcase］、インターフェイス［Interface］などの修理サービス）もある。プロダクト＝サービス・システムの環境への明らかなメリットは、あまり使われていない私有物を、シェアによって最大限に活用できることだ。ユーザーにとっては二倍のメリットがある。まず、品物の代金を全額払わなくていい。維持費、修理費、保険料などが節約できるうえに、持てる資産を最大限に活用することもできる。また、モノとの関係が所有から利用へシフトすることで、旅行やレジャー、仕事、食べ物、そして子どもに関することまで、さまざまなニーズを満たすためのチョイスが変わり、多様になる。\n\n> ソーシャルネットワークをとおして、中古品や私有物を、必要とされていない場所から必要とされるところ、また必要とする人に配り直す。これがコラボ消費の第二のタイプ、再分配市場モデルだ。完全に無料のサービス（フリーサイクル［Freecycle］、キャッシュレス［Kashless］、アラウンド・アゲイン［Around Again］）もあれば、ポイントと交換するサービス（バータークエスト［BarterQuest］、ＵＩスワップ［UISwap］）や現金で購入するサービス（イーベイ、フリッピッド［Flippid］）、またその組み合わせ（Ｓクードル［SCoodle］、クレイグズリスト）もある。化粧品、アクセサリー、服、本、おもちゃ、ゲーム、赤ちゃんの衣類、ＤＶＤなどを同じ種類の品物と交換したり（スレッドアップ［thredUp］、メークアップアレー［MakeupAlley］、スワップスタイル［Swapstyle］、トイスワップ［Toyswap］、ディグアンドスワップ［Dig'N'Swap］）、同じくらいの値段の品物と交換することもできる（スワップ・ドットコム［Swap.com］、スワップシンプル［SwapSimple］）。赤の他人と交換できるサービスもあれば、知り合いとつないでくれるサイトもある（シェア・サム・シュガー［Share Some Sugar］、ネイバーグッズ［NeighborGoods］）。取引の対象が何であれ、再分配市場モデルは、中古品を廃棄せずにリユースと再販をすすめ、また新品を生産することで生まれる廃棄物やそこに投入される資源を大幅に減らすことができる。\n\n> シェアやスワップ、物々交換の対象になるのは、自動車や自転車や中古品といった目に見えるものだけではない。同じような目的をもつ人たちが集まり、時間や空間、技術やお金といった、目に見えにくい資産を共有する──これがコラボ的ライフスタイルモデルだ。こうしたやりとりが、地域レベルで拡がりつつある。たとえば、オフィスシェアのシステム（シチズン・スペース［Citizen Space］、ハブ・カルチャー［Hub Culture］）、モノ（ネイボロー［neighborrow］）、仕事、時間、おつかい（デイヴジリオン［DaveZillion］、イサカ・アワーズ［Ithaca Hours］）、庭（アーバン・ガーデンシェア［Urban Gardenshare］、ランドシェア［Landshare］）、スキル（ブルックリン・スキルシェア［Brooklyn Skillshare］）、食べ物（ネイバーフッド・フルーツ［Neighborhood Fruit］）、駐車場（パーク＠マイハウス［ParkatMyHouse］）などのサービスがこれに含まれる。インターネットのおかげで、メンバー同士を調整し、規模を拡大し、物理的な隔たりを飛び越えることができるようになったために、このモデルは世界的な拡がりを見せている。たとえば、ソーシャルレンディング（ゾーパ［Zopa］、プロスパー［Prosper］、レンディング・クラブ［Lending Club］）や、旅行（カウチサーフィン［CouchSurfing］、エアビーアンドビー［Airbnb］、ルーモラマ［Roomorama］）がその例だ。このモデルでは、交換する対象が、しばしばモノではなく人と人の関わり合いなので、お互いを強く信頼することが求められる。その結果、こうしたサービスから無数の人と人とのつながりや社会的関係が生みだされる。\n\n> 物理的なモノと私的所有と自己のアイデンティティの関係性は、根本から進化しつつある。私たちは、ＣＤが欲しいのではなく音楽を聴きたいのだ。ディスクよりもその中身が欲しい。留守電ではなくてそこに吹き込んであるメッセージが必要だ。ＤＶＤはいらなくて、映画が見られればいい。言い換えれば、私たちはモノ（それ自体）よりも、それによって満たされるニーズや経験を求めている。所有するものが非物質化した形のないモノになっているため、所有そのもののコンセプトも変化し、「自分のモノ」と「他人のモノ」と「みんなのモノ」の間が点線でつながるようになりつつある。こうした変化によって生まれる世界では、「利用」が「所有」に勝る。それは、ワイアード誌の創刊者で熱心な自然保護論者のケヴィン・ケリーが言う、「所有よりもアクセスが大切な」社会だ。\n\n> 生まれた時からデジタル」な最初の世代では、この自己と所有との強いつながりが壊れつつある。そして所有ではない新しいチャネル──パソコンやiPhoneさえ持っていれば他に何も必要としないチャネル──をとおして、していること（ツイッター）や読んでいる本（シェルファリ［Shelfari］）、趣味（ディグ［Digg］）や所属するグループ（リンクトイン［LinkedIn］）、そしてもちろん友人（フェイスブック）もシェアしている。オンライン上の自分の「ブランド」が、「自分がだれか」や「何が好きか」を定義するようになると、実際に所有するよりも、利用していることやつながりがあることを見せる方が大切になる［２］。今では、モノを買わなくても、自分のステータスや、グループとのつながり、そして何に属しているかを周囲に見せることができる。もちろん、モノによる自己表現が時代遅れだというわけではない。私たちは、思い出の詰まったもの、たとえば結婚指輪や、旅行中につくった詩、家族が受け継いできた宝物をこれからも大切に持ちつづけるだろう。しかし、私たちは昔のどの世代よりも、はるかにモノにこだわらずに、自分たちのニーズを満たし、自分を表現するようになってきた。\n\n> 学者やデザインの専門家の間では、さまざまなスタイルのプロダクト＝サービス・システム（ＰＳＳ）をどのように分類し、定義し、どう呼ぶかについて、さかんに議論されている。本書ではこれを単純に二つの種類に分けた。ひとつは「活用型」のＰＳＳ、つまり企業や個人が所有するものを多数のユーザーがシェアするモデルだ。このタイプのＰＳＳが可能な市場はたくさんあり、多くのシナリオが考えられる。たとえば、余剰キャパシティが大きいもの（自動車や家庭用工具など）や、流行に左右されるもの（ハンドバッグ）がある。一時的に必要なもの（赤ちゃん用品や妊婦服）、また一度使うと価値や魅力がなくなるもの（映画）や、初期コストや値段が高いという参入障壁があるもの（ソーラーパネル）も、活用型に含まれる。 　もうひとつのモデルは「寿命延長型」のＰＳＳだ。このモデルは、メンテナンスや修理、アップグレードなどのアフターサービスがそもそも製品寿命サイクルに組み込まれているので、結果として買い替えや廃棄の必要がなくなる［９］。高価なものや修理に特殊技術が必要なもの（電子機器）、見た目が大切なため取り替えたり頻繁にメンテナンスが必要なもの（家具）などが、寿命延長型のＰＳＳに向いている。\n\n> もしあなたが生け垣を刈り揃えなければならないとしたら、ホームデポで約一四〇ドルの刈りばさみを買うだろうか、それとも同じものを八ドルで借りるだろうか？　レンタルを利用する消費者はますます増えていて、一度自分がレンタルを利用してみると、必要なものや欲しいものを手に入れるために、わざわざ買って手元に置いておく必要はないことを実感する。アクセスは特権になり、所有はお荷物になる。\n\n> ユーザーは、製品そのものと同じくらい、それをどう手に入れたかを自慢したがる。自分のバッグは「借り物」か「レンタル」だということを隠さないルイーズと同じで、ユーザーはＰＳＳを利用していることを誇らしげに語る。「どうモノにアクセスするか」がある種の社会的なステータスになり、ライブワーク［LiveWork］のデザイナーたちの言う「サービス・エンヴィー」（それを利用することがステータスになるようなサービス）が生まれる［18］。ライブワークの戦略デザイナー、デヴィッド・タウンソンは、サービス・エンヴィーとは「モノよりサービスを欲しがらせること」だと言う。そして、「そのためには持っているものではなくて利用しているサービスをとおして自分がどんな人間かを相手に表現できるようなサービスをつくる」ことが必要だ［19］。\n\n> インターフェイスは、前菜からデザートまで「フルコース」のサービスをまとめて提供する。オフィスのカーペットのレイアウト、取りつけ、メンテナンス、そしてクリーニングも一括して引き受ける。カーペットが擦り切れれば、新しいものに取り換え、古いカーペットを引き取って新しいカーペットの材料として使う。だから、このプロセスをいつまでも繰り返すことができる。アンダーソンは環境デザイナーの言う「閉じた円環」のシステムをつくろうとしていた。インターフェイスは廃棄物を出さず、最初から最後まで自社の製品に責任をもつ。この正の循環は、生産者がよりよい製品をつくりだすだけでなく、新しいサービスを提供するインセンティヴにもなる。ハイパー消費のモデルでは、モノの所有権とそれに対する責任は、販売された時点で消費者に転嫁され、これが「使い捨て」文化と大量の廃棄物を生みだしている。寿命延長型ＰＳＳでは、モノがつくられた時点や、販売された時点で企業の責任は終わらない──製品のライフサイクルすべてに企業が責任を負うことになる。\n\n> サービス経済（機能的な経済とも言う）へと移行する基盤はすでにできている［32］。さまざまな業種のグローバル企業がビジネスモデルを変え、製品販売からサービスプロバイダーへと企業の定義を変えている。ゼロックス（コピー機からドキュメントサービスへ）、スティールケース（オフィス家具からオフィスシステムへ）、ＡＴ＆Ｔ（電話からコミュニケーション・パッケージへ）、ピットニー・ボウズ［Pitney Bowes］（郵便関連製品から郵便マネジメントシステムへ）、ＩＢＭ（ハードとソフトのＩＴ製品からビジネスソリューションへ）などはみな、製品に備わった機能を売ることを、事業の中核に据えた［33］。製品がコモディティ化するリスクは、この変革を促したひとつの理由にすぎない。もうひとつの理由は、製品とサービスの抱き合わせが、単なる製品の販売よりも利益率が高いことだ［34］。\n\n> ボーゼルとヘクサマーが二〇〇七年に立ち上げたサイト、スワップツリー〔二〇一〇年八月にスワップ・ドットコムに改称〕は、この問題を〇・〇六秒で解決する。ユーザーがバーコード番号（スーパーマリオギャラクシー２の番号は０４５４９６９００４３４だ）か、箱の裏についているＩＳＢＮ（このコードは、版、発売年月日、バージョンを特定できるので、品物の価値がわかる）を小さな緑の空欄に打ち込む。それからアイテムの状態について、「ボロボロ」から「未使用」のどれかに印をつける。私たちがこのシステムを試した時には、「スーパーマリオギャラクシー２」と交換できる、一三万二二〇九個のアイテムが画面に現れ、そのなかには、一〇万三五〇冊の本と、二万三四九枚のＣＤと、八八〇九枚のＤＶＤと、二七〇一個のテレビゲームがあった。その実験では、「スーパーマリオ」とすぐに交換できる「シムズ２」は二つ見つかり、ひとつはフロリダに住む「Gwerd67」さんからのもの、もうひとつはカンザスに住む「Ukfan64」さんからのものだった。取引が決まれば、スワップツリーは郵送用のラベルもつくってくれる（一アイテムの平均送料は、二ドル二〇セントだ）。これで、郵便局に行って品物の重さを計ったりしなくても済む。「スーパーマリオギャラクシー２」と「シムズ２」のスワップ取引は、始めから終りまで全部で二分とかからなかった。 　二〇〇九年の一一月時点で、スワップツリーの「持っているものリスト」には五五〇万アイテムが登録され、「欲しいものリスト」には三五〇万アイテムが登録されていた。これらの品物を結びつける多ジャンル間の取引システムは、いわゆる「六次のへだたり」のコンセプトからヒントを得たものだ。ボーゼルはこう説明する。「僕らは、基本的にはそれぞれのユーザー向けにカスタマイズしたソーシャルネットワークをつくってるんだ。もしキミが『ディパーテッド』のＤＶＤを持っていれば、僕たちは、キミとそのＤＶＤが欲しい人全員をつなげて、その人たちが持っているアイテムを欲しい人すべてとキミをつなぐんだ［36］」ボーゼルとヘクサマーは、この難題を解くことで、スワップが新品のショッピングに負けない体験になるような、二つの大切な要素を提供した。それは、チョイスが豊富なことと、すぐにその場で満足を得られることだ。\n\n> 人々はもっと自分でコントロールしたいし、自由でいたいし、もっと自分らしさを表現したいということだ。デュヴァルが語ったように、「以前は買ったものや、身につけているブランドや、自動車や、テレビの下に詰め込んだ家電製品が、僕たちのアイデンティティだった。今は、ブランドじゃなくて、自分たちがどんな行動をとるかや何を選択するか、自分の価値観や信条、そして自己表現が、僕らがどういう人間であるかを決めるんだ」\n\n> ジョン・サッカラが『バブルのただ中で──複雑な世界をデザインする』に書いたように、「イノベーションと学習の環境をデザインすることは、すなわち複雑な相互作用を育むことであって、空間をガジェットで埋めることではない［11］。\n\n> 私たちが、Ｔシャツやスニーカーについたナイキマークによって定義される時代を超えて、その先に進みつつあるということだ。今、私たちは、何に参加しているかによって、この場合は世界最大のランニングクラブに参加することで、自分を表現している。製品だけでなく経験を提供しなければならないことに、ブランドも気づいてきている。今大切なのは、スポーツ用品企業のナイキがどうするかではなく、あなたというアスリートがブランドの力も借りながら自分の欲求を満たすことなのだ。パワーは消費者の手に移りつつある。このパワーシフトがコラボ消費のカギになる。というのも、どの製品やサービスが大切かを決めるのは、私たちだからだ。\n\n> クイーンサイズのベッドを処分する必要に迫られたデロン・ビールも、『ダ・ヴィンチ・コード』をスワップしたかったグレッグ・ボーゼルも、ダンボール箱を探していたマーティー・メトロも、旅先の住人の家に泊まりたかったケイシー・フェントンもそうだが、コラボ消費の多くのモデルは現実のニーズから生まれたものだ。その情熱は本物だし、それが製品やサービスに埋め込まれているので、こうした企業が提供するものにはわざわざ戦略的な広告をとおして流行りや欲求を喚起したり操作する必要がない。", ["イノベーション"]],
["伝わるデザインの基本", "http://www.amazon.co.jp/dp/4774166138/", "高橋佑麿・片山なつ/技術評論社", "basic_design_rule", "Wed Aug 27 15:36:33 +0900 2014", "4", "良い本でした。いままでかっこ悪いと漠然と思っていたスタイルについて、なぜ悪いかを文と多くの例題で理解できる。表紙の「非デザイナー必見!」「センスがなくてもOK!」という言葉どおり。デザインの本だけあってきれいなので読みやすい。\nhttp://tsutawarudesign.web.fc2.com/index.html でも一部の内容は読めるけど本の方が、豊富で質も良いと思います。\n\n自分の反省点は、カッコを半角で書いていたこと(cf. 2-10)。等幅フォントのエディタだと全角カッコは隙間が空きすぎてそうしていました。ただ、人に見せる資料を書くときはプロポーショナルフォントが多いので、反省しました。\n\n特に為になったのは、数字の強調で単位を小さくすること(cf. 1-11)、小見出しは太文字などで強調し・は使わない(cf. 2-7)、矢印オブジェクトを使わず▽を使う(cf. 3-4)、やたら囲みすぎない(cf. 4-9)でした。\n\n会社の人たちに直して欲しいのは、文字のゆがみやかざり(cf. 1-12)、下線による強調(cf. 2-2)、Windowsのフォントがメイリオではなく、MS Pゴシック全盛なところ(cf 1-8)。\n\n以下、自分用メモ<!--more-->\n\n1-5 より美しいフォントを選ぶ\n\n* アンチエイリアス処理のされているフォント(ClearTypeフォント)を選ぶ\n\* o: Windows: メイリオ、游(ゆう)ゴシック\, 游明朝\, Mac: ヒラギノ\, 游ゴシック、欧米: Calibri\, Times New Roman\n*  x: MSゴシック\, MS明朝\, Arial\, Century\n\n1-7 太字と斜体の使い方\n* 元の文字をずらした擬似ボールド(上のxがついたフォント)は使わない(上のoのついたフォントは対応している)\n\n1-8 おすすめのフォント\n\n|フォントタイプ|美しさ/読みやすさ優先|互換性優先|\n|-|-|-|\n|ゴシック体|メイリオ、ヒラギノ角ゴPro、ヒラギノ角ゴW8、游ゴシック|メイリオ、MSゴシック、游ゴシック、HGS創英角ゴシックUB|\n|明朝体|ヒラギノ明朝、游明朝体|游明朝体、MS明朝|\n|サンセリフ体|Segoe UI\, Calibri\, Helvetica Neue\, Avenir Next|Calibri\, Arial\, Corbel\, Myriad Pro|\n|セリフ体|Palatino\, Adobe Garmond Pro|Times New Roman\, Adobe Caslon Pro|\n\n1-9 欧米フォンとの使い方\n* 欧文には和文フォントは使わない。(等幅フォントなので。プロポーショナルフォントを使うこと)\n\n1-10 和文と欧文が混ざる文章\n\n* 英数字が読みにくい和文フォント: MSゴシック、MS明朝\n* 英数字が読みやすい和文フォント: メイリオボールド、游ゴシック、游明朝体\n* 英数字に欧文フォントを使用: MSゴシックxHelvetica Neue\, MS明朝xAdobe Garamond Pro\n\n1-11 数字の強調\n\n* 図で使う数字を強調するために、単位(%や回)のフォントを比較的小さくする\n\n1-12 文字は歪めない、飾りすぎない\n\n* ゆがみ: 縦、横に伸ばす、つめる、斜めにする\n* かざり: 文字の輪郭や影、立体感や影、反射、遠近感\n* tips 袋文字で絵や写真の上の文字をきれいに: 2つ同じテキストを作成し、一つを枠をつける[書式設定]→[文字の輪郭]で色や太さを設定し、揃え機能で重ねる\n\n2-2 文字の大きさと太さ\n\n* x: 下線で強調 (強弱が小さく、目立たない)\n* o: ゴシック体で強調 (美しく、簡単)\n\n2-5 行頭を左揃えにする\n\n* 見出しも基本は左揃えにする(自然に読むと視線が左上から右下へ行くが、タイトルが中央にあるとそれを邪魔してしまうため)\n\n2-7 小見出しのデザイン\n\n* xな例\n\n  ・東京駅からのアクセス(・を使う)\n\n  東京から、.....(文章)\n\n  東京駅からのアクセス\n  　東京から、.....(文章) (インデントを使う)\n\n* oの例\n  東京駅からのアクセス(太字か文字を大きくか色を変える)\n  東京から、.....(文章)\n\n2-10 column カッコと記号の使い方\n* 和文で使う()は全角のカッコにする。高さがずれるため。\n\n* カッコやコロンは見栄えが悪いので、「｜」や「/」や文字を四角の枠で囲んだりするとよい\n\n2-8 改行位置\n\n* まとまりのある言葉を分離しない(文章ではなくスライドのときのみ)\n\n3-4 矢印の使い方\n\n* x: 歪み(太さなど)\, オブジェクト(派手)\n* o: ↓(線)や▽(三角形のオブジェクト)などを使う (目立たせないよう)\n\n3-6 フローチャートと図解\n\n* x: 文字を矢印で結ぶ\n* o: ボックスで囲み、形を揃えて、矢印で結ぶ\n* x: 文字のみ\n* o: 図解で情報を直感的な表現に\n\n4-0 レイアウトの目的と5つの法則\n\n* 情報の整理とは、情報の構造や情報同士の関係を明確にすること\n  名刺の例(x: 適当に配置、o: ロゴ、所属、名前、連絡先をグループ化して強弱をつける)\n* 5つの法則: 「余白をとる」「揃える」「グループ化する」「強調をつける」「繰り返す」\n\n4-9 囲みすぎない、丸めすぎない\n\n* x: 枠を使いすぎ → 要素が増えすぎて雑然とする\n* x: 丸めすぎ → 角のところで文字と枠が接近し、角の外側の間隔が広くなってしまう\n\n5 実践\nためになる例が多い。Webでもいくつか例が見れるが、 http://tsutawarudesign.web.fc2.com/sakurei.html 本の例の方が多く、質も良い", ["デザイン"]],
["内向型人間の時代", "http://www.amazon.co.jp/dp/4062178591", "スーザン・ケイン/講談社", "quiet", "Mon Aug 18 10:05:18 +0900 2014", "4", "著者のTEDでの講演( http://www.ted.com/talks/susan_cain_the_power_of_introverts )を見てから和訳されるのを待っていた本。本の内容は外向型に仕立てたプレゼンテーションのように華やかなはなく、理論整然と内向型の人が書いたような本になっている。\n\n自分は内向型だと思っている(cf. p.19のメモ)。特に「5 内容のない世間話は好きではないが、関心のある話題について深く話し合うのは好きだ。」と「邪魔されずに「没頭できる」仕事が好きだ。」が大きいと思った。フローに入っている瞬間こそが人生の幸せであるというチクセントミハイの考えを信じているから。\n\nといいながらも本にもあるとおり、完全な内向型というわけではなく、時に外向型の一面も見せる。p.263の「内向型の人は、自分が重要視する仕事や、愛情を感じている人々、高く評価している事物のためならば、外向型のように振る舞える」ということに強く共感した。すなわち、生まれつき外向型を持っていたものというよりも、何かを強く成し遂げたいという思いから来るものではないかと思う。\n\nうちの会社は外交型リーダーが求められている環境にあり残念(cf. p.81のメモ)。この気質は、会社のレベル(成熟度合い)と言えるかも。すなわち、部下がイニシアチブを取りたがらない受身的な人が多い会社は、未熟な会社で、それが今のうちの会社の状況。\n\n子供の教育で参考になることが多くメモもたくさんした。会社でもそのアナロジーが効くかもしれない。上述したように社内は受身の人が多いので、どのようにその人たちと接するかのヒントになると思う。また、大きな目で見れば、異なるタイプの人たちを認め、どのように協力していくかという点なのだろう。\n\n以下、自分用メモ<!--more-->\n\n> 運動(外向型)、不倫(外向型)、少ない睡眠時間(内向型)、失敗から学ぶ(内向型)、大きく賭ける(外向型)、短期的な満足を求めない(内向型)、優秀なリーダー(一部のケースでは内向型、それ以外は外向型であり、求められるリーダーシップのタイプによる)、起きるかもしれないことをあれこれ想像する(内向型) p.5の脚注\n\n> 内向型だからといって内気ともかぎらない。内気とは他人から避難されたり屈辱を感じたりすることを恐れる性質であり、内向性とは刺激が強すぎない環境を好む性質である。内気は本質的に苦痛を伴うが、内向性はそうではない。二つの概念が混同される理由のひとつは、重なり合う部分が存在するからだ。 p.17\n\n> 私たちは社会の先頭に立つことを重要視するあまりに、善良さや知性や思慮深さに目を向けなくなっていることがわかる。内気な人や内向型の人は、それぞれに違う理由から、発明や調査研究や重病人の手を握るといった表舞台からは見えにくい仕事を選んだり、あるいは、静かなる有能さを発揮するリーダーになったりしている。いずれも社会の先頭に立つ役割ではないが、それでもやはり彼らが手本となる存在であることに変わりはないのだ。 p.18\n\n> もし、自分が内向型・外向型のどちらかに属しているのかよくわからないのなら、次の質問に答えてみよう。質問に当てはまると思えば○、当てはならまないと思えば×と答え、迷ったら比較的近いと感じるほうを選ぼう。\n\n> 1. グループよりも1対1の会話を好む。\n2. 文章のほうが自分を表現しやすいことが多い。\n3. ひとりでいる時間を楽しめる。\n4. 周りの人にくらべて、他人の財産や名声や地位にそれほど興味がないようだ。\n5. 内容のない世間話は好きではないが、関心のある話題について深く話し合うのは好きだ。\n6. 聞き上手だといわれる\n7. 大きなリスクは冒さない\n8. 邪魔されずに「没頭できる」仕事が好きだ。\n9. 誕生日はごく親しい友人ひとりか二人で、あるいは家族だけで祝いたい。\n10. 「物静かだ」「落ち着いている」と言われる。\n11. 仕事や作品が完成するまで、他人に見せたり意見を求めたりしない。\n12. 他人と衝突するのは嫌いだ。\n13. 独力での作業で最大限に実力を発揮する。\n14. 考えてから話す傾向がある。\n15. 外出して活動したあとは、たとえそれが楽しい体験であっても、消耗したと感じる。\n16. かかってきた電話をボイスメールに回すことがある。\n17. もしどちらか選べというなら、忙しすぎる週末よりなにもすることがない週末を選ぶ。\n18. 一度に複数のことをするのは楽しめない。\n19. 集中するのは簡単だ。\n20. 授業を受けるとき、セミナーよりも講義形式が好きだ。\n○の数が多いほど、あなたが内向型である確率は高い。 p.19\n\n> 命令するのもされるのも嫌いな人がいるのはなぜか? p.22\n\n> グラントはどのような状況で内向型のリーダーが求められるかを理論づけた。彼の仮設によれば、外向型のリーダーは部下が受動的なタイプであるときに集団のパフォーマンスを向上させ、内向型リーダーは部下がイニシアチブを取る能動的なタイプであるときにより効果的だ。 p.78\n\n> だがグラントの研究は、少なくとも重要な点を一つ示唆している -- 従業員にイニシアチブを取らせることだ。内向型リーダーはそれを自然に実行している。その一方で、外向型リーダーは「もっと控えめで静かなスタイルを採用したいと思っているかもしれない」とグラントは書いている。彼らは自分が席に座ってほかの人が立っていてくれる方法を学びたいのかもしれない。 p.81 \n\n> 結果は非常に明快だった。24組のうち23組の人々がグループよりも個人で考えたほうがたくさんのアイデアを生み出した。また、質の点では、個人作業で生まれたアイデアは、集団作業で生まれたアイデアと同等あるいはそれ以上だった。そして、広告分野の管理職のほうが科学系研究職よりも集団作業を得意としているという結果はでなかった。 (p.113) ブレインストーミングの否定的な結果\n\n> 私たちが進むべき道は、対面での共同作業をやめるのではなく、そのやり方を改良することだろう。ひとつには、個々人の強さや気質に応じてリーダーシップや他の職務が分けられるような、内向型と外向型との共生関係を積極的に追求すべきである。もっとも達成度の高いチームは内向型と外向型が適切に混在していると数々の研究が示しているし、リーダーシップの構造についても同じことが言える。 p.119\n\n> 高反応な子供と低反応な子供 ところで、いったいなぜケーガンは、刺激に対して激しく反応した赤ん坊がトムのように慎重で内省的に育ち、激しい反応を示さなかった赤ん坊がラルフのように外向的に育つ可能性が高いと分かったのだろうか? ... ケーガンはこんな仮説を立てた -- 生まれつき扁桃体が興奮しやすい乳児は外界からの刺激に対して大きく反応し、成長すると、初対面の人間に対して用心深く接するようになる。 p.130\n\n> 高反応の子供がアーティストやライターや科学者や思想家になることが比較的多いのは、新しいことを嫌って、自分の頭の中の慣れ親しんだ -- そして想像力に富んだ -- 環境で過ごそうとするからかもしれない。「大学には内向的な人間がたくさんいる」とミシガン大学(子供と家族のためのセンター)の所長であるジェリー・ミラーは言う。「大学教授はまさにその典型だ。彼らは本を読むのが好きだ。なぜなら、彼らにとって思考や知識ほどわくわくさせられるものはないからだ。このことは彼らが成長期にどんなふうに時間を使ってきたかと関連している。もし戸外でなにかをおいかけていれば、読書したり勉強したりする時間はない。人生の時間はかぎられている」 p.140 \n\n> 「高反応の子供を持つ親は非常に幸運だ。なぜなら、子育てに手間ひまをかければ、かけただけ報われるからだ。我が子は逆境に弱いのではなく、よくも悪くも影響されやすいと考えるべきだ」とベルスキーは言う。彼は高反応の子供に対して、親はどんな態度で接すれば理想的かを雄弁に語った。子供の気持ちを慮り、個性を尊重すること。ことさら厳しくしたり敵対したりはしないが、温かくしっかりと要望を伝えること。好奇心を育て、学業を推奨し、自分の満足を後回しにしたり自分をコントロールしたりする気持ちを育むこと。厳しすぎたり放任しすぎたりせず、一貫していること。 p.145\n\n> 著名な心理学者のハンス・アイゼンクは、人間は強すぎもせず弱すぎもしない「最適な」レベルの刺激を求めているという仮説を主張した。刺激とは、私たちが外界から受ける力のことで、さまざまな形をとり、たとえば騒音も社交もまぶしい光も刺激となる。アイゼンクは、外向型の人は内向型の人よりも強い刺激を好み、このことが両者の違いの多くを説明すると信じた。内向型の人がオフィスのドアを閉めて仕事に没頭するのを好むのは、そうした静かで知的な活動こそが彼らにとって最適の刺激だからであり、それに対して、外向型の人は、チームビルディングのためのワークショップのまとめ約とか会議の司会など、より積極的で明るい活動に従事しているときがもっとも快適に感じる。 p.156\n\n> とても敏感な人は、物質的・享楽主義的であるよりも哲学的・精神主義的な傾向がある。彼らは無駄話が好きではない。自分をクリエイティブあるいは直感的と表現する。\n自由特性理論によれば、私たちは特定の性格特性を持って生まれるが、 --たとえば内向性だ--自分に取って非常に重要な事柄、すなわち「コア・パーソナル・プロジェクト」に従事するとき、その特性の枠を越えてふるまえるのであり、実際にふるまっているのだ。\nつまり、内向型の人は、自分が重要視する仕事や、愛情を感じている人々、高く評価している事物のためならば、外向型のように振る舞える。 p.263\n\n> だが、自由特性協定を結ぶべき、もっとも大切な相手は、じつは自分自身だ。\nあなたが独身だとしよう。バーへ出かけるのは好きではない。だが、長い夜を一緒に楽しく過ごすパートナーや少人数の友人は欲しい。その目的を達成するために、あなたは自分自身と協定を結んで、社交イベントへ出かけることにする。なぜなら、それがパートナーに出会う唯一の方法だし、長い目で見れば集まりへ出かける回数を減らすことができるからだ。けれど、イベントのために外出する回数は、負担を感じない範囲内に抑えなければならない。前もって、一週間に一度とか、一ヶ月に一度とか、三カ月に一度とか決めておくのだ。そして、その回数をこなしたら、残りの時間を心置きなく家にいられる。 p.279\n\n> 逆に、外向型は人づきあいに必ずしも親密さを求めない。「将軍が指揮権をふるうために兵士を必要とするように、外向型は自分の影響力を発揮するために人が集まる場を求める。外向型がパーティに現れると、居合わせた誰もが彼らの存在を知る」と、心理学者のウィリアム・グラツィアーノは語った。 \n言い換えれば、外向性の度合いはあなたの友人の数を左右するが、友情の質は左右しない。 p.286\n\n> グレッグと意見の相違があるとき、エミリーの声は静かで平坦になり、態度はやや距離を置いた感じになる。エミリーは攻撃性を最小限にしようとしているのだが、--怒るのは気分がよくないから--まるでその話はしたくないという態度に見える。その一方で、グレッグはまったく逆で、問題を解決しようと熱心になるにつれ、声は高くなり、好戦的に響く。 p.291 自分は外向型に当てはまるが、むしろ理屈で問題を解決したいからだと思う。内向型と理屈派(左脳型)を区別する必要もありそう。\n\n> 内向型は友好的な状況で出会った人を好み、外向型は競争的な状況で出会った人を好むのだ。 p.292\n\n> 喧嘩の最中にエミリーが声を小さくして及び腰になるのは、否定的な感情を見せまいとすることによって敬意を示しているのだ。だが、グレッグは彼女が話し合いから逃げようとしている、あるいはどうでもいいと思っているのだと考えてしまう。同じように、グレッグが怒りの感情をほとばしらせるとき、彼はエミリーも自分と同じように、それが深く結ばれた者どうしの健全で正直な感情表現だと思っていると考えている。だが、エミリーにとってそれは、グレッグが急に食ってかかってきたと思えるのだ。 p.294\n\n> 親が子供の身になって助言してやることは、本質的に有効なのだ。もし、あなたの息子が登校初日神経質になっていたら、自分も同じように感じた経験があるし、今でも仕事場で似たような感じを味わうことがあるけど、時間がたてば大丈夫になると話してやるのが効果的だ。たとえ、息子がそれを信じてなくても、あなたが自分を受け入れていると信号を出しているのは分かる。子供が怖がって躊躇しているとき、がんばってやってみなさいと勧めるかどうか、子供の身になって判断しよう。たとえば、教室の前に出てみんなの前で歌うのはエイヴァにはあまりにも大きな一歩だと、サラは思うかもしれない。だが、たとえエイヴァが最初はいやがったとしても、同じような気質の数人の友達の前や、親友ひとりだけの前で歌うのならば、第一歩にするのにふさわしいかもしれない。言い換えれば、どんなタイミングで、どのくらいの力で娘の背中を押すべきかを考えるのだ。 p.314\n\n> 内向型の子供のためにあなたができる最良のことのひとつは、新しい体験に対応するのを助けてやることだ。すでに述べたように、内向型は初対面の人に会ったり、知らない場所へ行ったり、はじめることだ。すでに述べたように、内向型は初対面の人に会ったり、知らない場所へ行ったり、はじめてのことをしたりする際に大きく動揺する。だから、なれない状況の中で他人とうまくつきあえないのではないかという警戒心を子供が抱いているのを見逃さないようにしよう。<strong>彼(彼女)は、人間との接触を恐れているのではなく、目新しさや過度の刺激のよって不安を感じているのだ。</strong>10章でお話したように、内向性・外向性のレベルは調和性や親密さを楽しむ気持ちとは相関関係にない。程度の違いこそあれ、内向型もまた仲間を求めているのだ。\n大切なのは、新しい人や環境に子供をゆっくり慣らしていくことだ。子供にとっての限界が納得できなくても、それを尊重すること。そうすれば、過保護になることなく背中を惜しすぎることなくもっと子供に自信を持たせることができる。自分の感情は正常で自然なのだと子供に知らせるだけでなく、なにも恐れる必要はないのだとわからせよう。「はじめて会った子と遊ぶのはちょっと気後れするのはわかるけれど、あの男の子はきっと喜んでトラックの玩具で一緒に遊んでくれるよ」と言ってみるのだ。そして、急かさず、子供のペースに任せよう。子供が幼い場合、必要ならば、最初は、一緒に遊んでくれるかなと相手に声をかけてやるのもいい。その後は、邪魔にならないように見守っていよう。子供がとても幼ければ、背後からやさしく背中に手をあててやっていてもいい。子供が思い切って一歩踏み出したら、すごいねと褒めてやろう。「知らない子供たちに、自分から近づいて行ったね。えらかったわね」といった具合に。\n新しい状況に慣れさせるのも、基本的には同じだ。たとえば、人並みはずれてひどく海を怖がる子供がいるとしよう。思慮深い親は、恐怖を感じるのは自然であり、賢さのしるしであるとさえ考える。実際に、海は危険だからだ。だが、怖がっている娘を海に投げ入れたり、無理に泳がせようとはしないものの、夏のあいだずっと浜辺で砂遊びをさせたりはしない。怖がる気持ちは理解できると伝えたうえで、少しずつ前進させるのだ。数日間は、波が届かない安全な場所で砂遊び。そして、波打ち際へ。肩車をしてやって、歩くのもいいだろう。それから、凪のときを選んで、まずは足先を海水に浸し、しだいに進んで、膝まで浸かる。急ぐ必要はない。子供にとっては一歩一歩が大きな前進なのだ。最終的に魚みたいに泳げるようになったとき、彼女は水との関係だけでなく恐怖との関係でも決定的な転換点に達したと言える。\n苦しくても壁を乗り越えれば、その壁を乗り越えれば、その向こうには楽しみが待っているのだと、子供はしだいに理解する。そして、独力で壁を乗り越えるすべを知る。メリーランド州立大学<児童・人間関係・文化センター>所長のケネス・ルービン医師は、「幼い子供が感情や行動を学ぶ際に、穏やかに励ますやり方で一貫して手助けすれば、そのうちに、まるで魔法のようなことが起こりはじめる。例えば、『あの子たちは楽しそうだから、あっちへ行ってみよう』と、自分の心の中で決めているのが分かるのだ。子供たちは恐怖や不安を自分で制御できるようになる」と書いている。\nそういうスキルを我が子に身につけさせたければ、本人を「内気」と評価してはいけない。自分で自分に内気だというレッテルを貼りつけて、それが制御可能な感情ではなく固定した性質だと信じ込んでしまう。それに、世の中では「内気」が否定的な言葉だと、子供はよく知っている。なによりも、自分の内気さを恥ずかしいと思わせてはならない。\nできれば、外向性を重要視する社会のなかで劣等感を味わうことが少ない、ごく幼いうちに、自分を制御するスキルを教えておくのが一番いい。親がロールモデルになって、初対面の人と穏やかに親しげに挨拶する姿や、友人たちとうちとけてくつろいでいる姿を見せよう。また、子供のクラスメイトを自宅へ招こう。他人に何かを伝えたければ、聞こえないような小さな声で言ったり、もじもじしてズボンをひっぱったりするのではなく、ちゃんと口に出す必要があるのだと教えよう。自己主張が強すぎない友達や、わが子がうちとけられるような遊び仲間を見極めよう。年下の子供と遊んで自信を持たせたり、年上の子供と遊んで刺激を受けたりするのもいい。 p.315\n\n> ここで問題なのは、マヤが口を開いて、学校で何があったかを親に打ちあけるかどうかにすべてがかかっているということだ。たとえ、ふだんはなんでも話す子供でも、恥ずかしい思いをした体験には口をつぐんでしまうことが多い。低年齢の方が素直に話すことが多いので、集団生活がはじまったらできるだけ早い時期から、そういう会話を習慣づけておくといい。子供に質問するときには、やさしい中立的な態度で、具体的にはっきりと訊こう。「今日はどうだった?」よりも「今日の算数はどうだった?」と尋ねるのだ。「担任の先生のことは好き?」よりも「担任の先生のどんなところが好きなの?」とか「どうしてそんなに嫌いなの?」といった具合に。そして、じっくり時間をかけて答えを待とう。親たちがよくやるように、やけに明るい声で「学校は楽しかった?」と訊くのは避けよう。子供はイエスと答えなければいけないと感じとってしまう。 p.329\n\n> 人はみなまるで小説家のように、「起承転結」の形式で自分の人生を語る。そして、過去の挫折体験をどのように語るかは、現状にどれほど満足しているかに大きく影響される。現在が幸福でない人は過去の挫折を否定的に語る傾向が強く(たとえば「妻が去ってから、僕はすっかり変わってしまった」)、前向きに生きている人は過去の挫折を「一見すると不幸に見えて、じつはありがたもの」として肯定的に語る傾向がある(たとえば「離婚はなによりつらい体験だったけれど、再婚した妻との暮らしはもっと大きな幸福をもたらしてくれた」)。そして、自分の人生に完璧な充足感を得て、それを家族や社会、ひいては自分自身に還元しようという人は、過去において自分の身に降りかかった苦難に意義を見出す傾向がある。 p.336", ["自己啓発"]],
["敗者のゲーム", "http://www.amazon.co.jp/dp/4532354390/", "チャールズ・エリス/日本経済新聞出版社", "losers_game", "Tue Jan 07 15:16:23 +0900 2014", "3", "正月に401kの勉強として。\n\nウォール街のランダム・ウォーカーと同じくらいの名著らしい。こちらの方が薄くて読みやすい。技術屋にはウォール街の方がためになると思う。結論はおおよそ同じだけど、そこにたどり着くまでの論理が緻密な気がする(ずっと前に読んだから忘れてるけど)。\n\n敗者のゲームとは、アマチュアのテニスのように相手に勝つのではなく自分でミスをしないことが重要であるということ。投資も同じで、優れたプロの総意である市場に勝つことは並大抵では出来ない。そのためには、高い報酬をとり優秀なものを探すのが困難なアクティブではなく、インデックスで市場平均を着実にとることが優れた戦略であるということを永遠と述べている。\n\n驚いたのが、債権は不要というポジションをとっていること。多くの本には歳につれてリスク回避のために債権の割合を増やす(e.g. 40代なら40%など自分の年代を%に)ことが書かれている。不要の理由として、債券では最大の敵であるインフレに勝てないから。インフレと税金と経費を考慮すると過去36年(1964年～2000年)で債権は投資額の58.9%しかなくなってしまう(株式は180%に増加)。 p.169。また拠り所として、株に10年以上投資するとほとんど損せず、さらに投資期間が長くなれば長くなるほど安定する(特と損のぶれ幅が少なくなる)。p.100\n\nおそらく、これはUSで比較的多額の資産を持つ人(資産が自分のためだけでなく、子供に資産を残せる人)にはベストな戦略だと思う。株のリターンが高いのであるから、リスクを受け入れ、保持できればそれにこしたことはない。\n\nこれを自分が日本でする場合は、為替リスクを考慮する必要があると思う。歳をとって必要なときに海外の財産が円高で目減りするのは痛い。数年で2割も動く。また、自分にとっても残る資産は必要な額もギリギリだと思うので、株価の変動ももちろん考慮すべきで債券に徐々に移行させると思う。\n\nリタイヤ時の資産の崩し方は資産の3年の移動平均の4%以下に抑えるとしていた。単に資産の5%ずつ取り崩していくと足りなくなるらしい。", ["経済"]],
["ゼロ", "http://www.amazon.co.jp/dp/4478025800", "堀江 貴文/ダイヤモンド社", "zero", "Fri Dec 27 11:30:14 +0900 2013", "3", "後輩に借りた本。thanks!その半生を赤裸々に語られて驚いた。\n\nまず思ったのは、親からの愛、親への愛、子供への愛を文章で自分の子供に伝えたいということ。言葉では簡単には伝えられないからこそ、後に残る文章という形で残したい。\n\n生き方についてはかなりシンプルという印象。最近、学生向けに伝えたメッセージ「気になるもは失敗を恐れず飛びついて、ガンガン、チャレンジしよう」という内容が重複していて驚いた。その意味で共感できる点も多かった。目の前の一つ一つの選択が自分を形成しているものであり、遠い理想を目指すのではなく、近くの一歩から自分を形成していくという考え方は自分の通った道に近い。\n\nそれが何につながるか何て深く考えずに飛びついたことが、後々何らかの役に立つことの方が多い。もちろん、役に立たなかったことも多い。でも、どうせ考えたとしても、役立つ割合なんて変わらないので、どうせだったら自分が楽しいと思う方をやった方が良いと思うのです。\n\nその辺をあまり考えずに、与えられた仕事に対して文句を言う人を見ると残念だなあと思います。自分で楽しむように持っていくか、自分のやりたいことをバンバン提案するかすれば良いのに。特に後者については、サポートしてくれる環境が整っている良い会社だと思います。Enjoy Hacking!", ["自己啓発"]],
["Team Geek", "http://www.amazon.co.jp/dp/4873116309", "Brian W. Fitzpatrick\, Ben Collins-Sussman / オライリージャパン", "team_geek", "Wed Nov 13 15:37:25 +0900 2013", "3", "謙虚、尊敬、信頼を心掛けることによって、よいチームを作っていこうという本。ボトムアップでのチームの作り方が少ないページでよくまとまっている。考え方自体は、色々な本(7つの習慣、人を動かす、ピープルウェア、モチベーション3.0、Susan CainのTED Talk、1分間マネジャー、being geekなどなど)を読んでいたこともあって、素直に共感できる。 \n共感できるのにそれが出来ていない自分には、もう少し突っ込んで書いてくれるとありがたかったが、考え方は教えたので後は自分で考えろと言われると返す言葉もないけど。そういう意味で、読みながら反省することが多々あった。 \n\n例えば、パフォーマンスが低い人に対応することを時間のムダと考えてしまっているのだけど、そうではない(cf. p.71のメモ)。正しいことができないのは、制約のせいもあるけど、自分のやる気のなさな気がする。正しいことをするのは何もしないことに比べてとても大変なことだしそれに見合う成果が出るかも分からない。やはり最も大切な点は、本にも書いてあるダメな人を入れないということだと思うのだけど、それが出来ないし、ダメな人も追い出せないというのは萎える。幸い今のチームではこの手のことを心配しなくていいけど、いつかはまた考えるべき問題。だけど、本を読んだからすぐに解決できるような問題でもなく悩ましい。 \n\n他に大いに共感するのは、p.145のメモ。会社に頼っているのではなく自分で会社に残っているという気持ちがとても重要。その代わり常に緩い社内ではなく外に目を向けていることが重要なのだけど。自分の意思で会社に残っていると考えると、会社の問題点なんて無視できるか、自分で解決しようと思うはず。(改善したいという気持ちもなく)文句だけ言いっぱなしっていうのは精神衛生上良くない。 \n\n以下、自分用メモ<!--more--> \n\n> * 謙虚(Humility)世界の中心は君ではない。君は全知全能ではないし、絶対に正しいわけでもない。常に自分を改善していこう。 \n* 尊敬(Respect) \n一緒に働く人のことを心から思いやろう。相手を1人の人間として扱い、その能力や功績を高く評価しよう。 \n* 信頼(Trust) \n自分以外の人は有能であり、正しいことをすると信じよう。そうすれば、仕事を任せることができる。 \nこの3つを合わせて「HRT」と呼びたい。読み方は「ハート」だ。(p.15) \n\n> \n過去に失敗したことがなかったら、それは革新的ではないか、リスクをとっていない証拠である。 (p.23) \n\n> コメントはコードのなぜを説明するものであり、コードが何をしているのかを説明するものではない。 (p.54) \n\n> 多くのチームリーダーは、歯を食いしばって目を背け、パフォーマンスの低い人が奇跡的に成長するか、どこかへ行くことを願っているだけだ。いずれの可能性も極端に低い。 \nリーダーがそう願っても、パフォーマンスの低い人が成長しなければ(あるいはどこかへ行かなければ)、パフォーマンスの高い人の時間をムダにするし、チームの士気も下がってしまう。君がパフォーマンスの低い人を無視したとしても、チームはその存在を無視することはできない。割を食うのは自分たちだからだ。 \nパフォーマンスの低い人を無視するということは、パフォーマンスの高い人を新しくチームに入れないということでもある。そして、チームにいるパフォーマンスの高い人たちが流出していく。最終的にチームはパフォーマンスの低い人だけになる。自分の意思でどこかへいけない人たちだからだ。それにパフォーマンスの低い人をチームに残すことは、その人のためにもならない。そのチームで仕事ができなくても、他の場所で役に立つことが多いからだ。 \nパフォーマンスの低い人には早めに対応しよう。そうすれば、成長させるか、または退席させるかを判断できる。早めに対応できれば、その人には指示や支援が必要なことがわかるかもしれない。対応に時間がかかると、チームとの関係性が邪悪になり、君にもフラストレーションがたまり、彼を助けることができなくなってしまう。 \nパフォーマンスの低い人をコーチングするにはどうすればいいだろう?その分野については、ぼくたち2人は(残念ながら)苦痛なトライアンドエラーから学んだ経験が豊富にある。たとえば、足を痛めた人がリハビリをして、再びチームと一緒に走り出すことを想像してみてほしい。そのときには一時的なマイクロマネジメントが必要になるはずだ。ただし、HRT(特に「尊敬」)がある前提だ。期限(たとえば2〜3ヵ月)を設定して、達成してもらいたい目標を決めよう。最初の目標は小さくして、少しずつ大きくできるといい。小さな成功を何度も経験するためだ。そのエンジニアには毎週会って進捗を確認する。成功か失敗かを判断できるように、マイルストーンには明確な期待を設定する。続けられないようなら、早い段階でそのことが2人にわかる。うまくいかなければその時点で中止するかもしれないし、期待に応えられるように「ゲームを続ける」かもしれない。いずれにしても、パフォーマンスの低い人に直接働きかけることで、必要かつ重要な変化の触媒となるのである。 (p.71) \n\n> 禅マネジメントの秘密がある。質問だ。チームメンバーがアドバイスを求めてきたら、問題解決のチャンスだ! 問題解決ならリーダーになる前に何年もやってきたので、すぐに問題解決モードに突入してしまいそうだが、それはダメだ。エンジニアが相談を持ちかけるのは、君に問題解決をしてほしいからではない。彼が問題解決するのを手伝ってほしいからだ。そのためには、彼に質問をすればいい。何もマジック8ボールの代わりになれと言っているのではない。それでは役に立たないし、イライラさせるだけだ。そうではなく、問題を整理したり調査したりすることで、彼が自分で問題解決できるように支援するのである。そうすれば、彼の応えが見つかる。このことは、本性でも説明した当事者意識や責任の話と関連する。君が答えを持っている必要はない。答えを持っているかどうかに関係なく、エンジニアには君の印象が残る。不思議だよね。ソクラテスも満足しているはずだ。 (p.80) \n\n> 多くの場合、適切な答えを知るよりも、適切な人を知るほうが価値がある。(p.81) \n\n> (有害な人を排除するというコンテキストでそうではなくて)普通の人たちを排除するようなエリート思考のフラニティではなく、ネガティブな振る舞いを拒否するような文化を作るほうが健全だ。排除するのはあくまでも振る舞いであり、特定の個人ではない。個人を「いい」とか「悪い」とかで考えるのは単純すぎる。目に余る振る舞いを特定して、そのことを批判するほうが建設的で実践的だ。 (p.100) \n\n> 「すべてやっているけど、一向に改善されないし、うまくいかない」と文句を言ってくる人がいる。そういうときはどうすればいいのだろうか? 答えは単純だ。君ができることはもう残されていない。あとは被害者にならないように、そこから逃げ出そう。 \nシステムを変更できなければ、いくらエネルギーを注いでもムダだ。そこから逃げ出すことにエネルギーを注ごう。履歴書を更新して、友達にどこかいい会社はないかと聞いてみよう。新しいことを身につけよう。今のエンジニアは高い能力が求められている。自分自身の将来をコントロールできる能力を身につけてほしい。 \n...\n選択肢を知れば人間は自由になれる。逃げ出すことを恐れてはいけない。 (p.145)", ["oreilly"]],
["これだけ!KPT", "http://www.amazon.co.jp/dp/4799102753", "天野 勝/すばる舎", "kpt", "Tue Oct 15 08:51:42 +0900 2013", "2", "KPTという言葉を初めて知ったのは陣内さんが振り返りでやっていたとき。Keep\, Problem\, Tryに分けて振り返る手法で便利そうだと思った記憶あり。Agile系にはうといので本を借りて読んでみる。\n\nレビュー中身がないかと思ったら、意外にためになった。と言っても下の3つ。30分程度で読めるのも良い。 \nダメだったところは体系的でもないし、ノウハウ的でもない点。言葉を出しといて説明しないとか意味が分からない。 \n\n* KPTを週間進捗報告などで使う \nいままで数ヶ月単位のプロジェクトの振り返りでしかやっていなかったけど、何回も回す(Problemが治っているか、Tryが出来ているか価値があるかなど)ためには確かに小刻みにやっていった方が良い。 \n\n* KPTの順位付け \n次の2軸で重要そうなものからやっていく。リスク管理やToDoと同じ考え方。 \n    * P: 影響度、発生頻度 \n    * T: 重要度、緊急度 \n    * Action(Tryを具体的にブレイクダウンしたもの): 実効性(効果)、実行性(コスト) \n\n* Keepを引き出す質問例 \n    * 今後も続けたいことは何ですか? \n    * どんなよかったことがありましたか? \n    * なぜ、うまくいった/よかったのでしょうか? \n    * 他の人にちょっと自慢したいことや、褒めてもらいたいことはありますか? \n    * 他の人の「ここがよかった」 というところはどこですか? \n    * 前と変えてみたところはありましたか? \n* Problemを引き出す質問例 \n    * 気になることや、困ったことはありましたか? \n    * 何かガマンしていることはありますか? \n    * 「もっとできた」と思っていることは、どんなことですか? \n    * チームで決めたルールで、守れなかったことはありましたか? \n    * 目標の到達をさまたげることは、どんなことですか? \n    * ムダに感じるところは、どんなことですか? \n    * 理想と感じることは、どんなことですか? \n* Tryを引き出す質問例 \n    * そのProblemを少しでも改善するには、何をすればよいですか? \n    * そのProblemをすべて取り払うには、何をすればよいですか? \n    * そのProblemがなくせないとしたら、何をすればよいですか? \n    * そのKeepの本質は何ですか? \n    * そのKeepをよりうまく行うには、何をすればよいですか? \n    * 目標に近づくためには、何をすればよいですか? \n", ["チーム"]],
["コーディングを支える技術", "http://www.amazon.co.jp/dp/477415654X", "西尾泰和/技術評論社", "coding_support_tech", "Thu Oct 10 13:40:40 +0900 2013", "2", "何か自分には合わない本でした。Webで見ると評判いいのはなぜだろう。\n\n合わなかった点をつらつらと。\n\n* タイトルがひどい\n  せめてプログラミングだと思うのだけど、コーディングに何の思い入れがあるのだろう。自分が想像するのはプログラマとコーダーのアナロジーで、メソッド名の自動補完とかその程度の技術を想像しました。著者が雑誌で書いた記事名「プログラマが知るべき言語設計の基礎知識」がずばりだと思う。\n* 読者の対象を絞れていない\n  初学者を想定したような記述が多いが、歴史的な経緯を細かに説明している。初学者は歴史に興味はないし、ある程度の有識者には初学者のような内容は退屈なだけ。興味深そうなトピックはかなりさらりと書いてあって誰が読んでも分からない結果に。マニアックな人向けに書きたいのだろうけど、ある程度の商売を考えた結果か、かなり中途半端。\n* トピックが豊富だが内容が薄い\n  上の内容と重複するが、様々なことが書いてあるわりに内容が薄い。それぞれで一冊くらいの本を書けるのでしょうがないが、それにしても薄すぎ。本質的な中身を説明せずに、歴史の経緯の説明に注力しているので、意味を理解している人向けになっている。本質を理解させようという気があまり感じられない。例えばクロージャの説明は関数との違いを説明できていない。その割に自由変数の意味やらファーストクラスの言葉の意味やらに説明を割いている。何がしたいのだろう。\n* その他細かいところ\n** 型: もっと抽象的な説明をすべきだと思う。歴史的経緯が長すぎるが、動的型付け言語が使われている現在のプログラミング言語における型の意味を説明した方がよほど有用だろう。\n** スコープ: 問題はまだあると言っておきながら、言語固有の問題を持ち出すのはやめて欲しい。\n** オブジェクト指向: ひとりよがりな説明と感じた。\n** Javaのクラスはグローバルではない。package privateで隠蔽できる。\n** 処理系と言語仕様が混ざっている記述: JVM上で動くScalaには型推論があるなど。正しいけど違和感がある。\n", ["プログラマ"]],
["スタンフォードの自分を変える教室", "http://www.amazon.co.jp/dp/4479793631", "ケリー・マクゴニガル/大和書房大和書房", "willpower_instict", "Thu Aug 29 13:19:22 +0900 2013", "3", "図書館で予約して8ヵ月後に届きました。大人気。\n\n脳を通じて人間の特徴を知ることで、自分のコントロールを容易にしようという本(なのかな)。身近な実験を随所に入れ、共感できる点も多い。\n\n自分のためになった点は次のようなもの。\n\n* 欲求に負けそうになったとき、その瞬間を知覚する。\n  どのような心や体が動いているかを客観的に捉える。\n  欲求に負けた場合、その後も振り返る(案外、想像した結果に満たないことが多いらしい)。\n  なぜ負けてはいけないかを考え、実現したいゴールを思い出す。\n  善悪で捉えない。道徳的に正しい/誤りが決められないことは意外と多い。\n* 「明日にしよう」ではなく「未来ずっと続く」と考える。\n  今日できないことが明日できる理由はどこにもない。\n* 欲求を考えないようにしてはならない。欲求を受け止めた上で、従わないことが重要。\n  「シロクマのことは考えないでください」と言われると、どうしてもシロクマのことを考えてしまうらしい。\n\nただし実践はやはりなかなか難しい。自分がビアがやめられないのは、意思が弱いのではなく、やめる必要性が自分の中で納得できてないからなのだろうね。", ["自己啓発"]],
["SQLアンチパターン", "http://www.amazon.co.jp/dp/4873115892", "Bill Karwin/オライリージャパン", "sql_antipatterns", "Mon Jul 22 08:36:18 +0900 2013", "4", "SQLをほとんど書いたことがなく、プログラム初心者のように文法は理解したけど、実際にどう書けば良いか分からない自分にはとてもためになる本だった。入れ子のコメントなんて何も考えなければ、そのままアンチパターンに陥っていたと思う。中にはバイナリファイルをDBに入れろとか、ホントかよと思うのもあったけど、こんな考え方もあるとか、今までの常識がそのまま続くとは限らないか、となぜか上から目線で納得したり。自分のようなSQL初心者の時期に読むのが良い本だと思う。\n\np.s. 実務している友人から↑のファイルをDBへってのは普通にありじゃない?トランザクションとかで同期して消せないし。ってことを言われました。自分素人なのであまり信用なさらずに。\n", ["DB"]],
["7つのデータベース7つの世界", "http://www.amazon.co.jp/dp/4274069087", "Eric Redmond\, Jim R. Wilson/オーム社", "7database", "Mon Jul 22 08:29:47 +0900 2013", "3", "NoSQLって単語だけ聞いたことがあるだけの自分にはちょうどよい本。それぞれの特徴を書いてくれていて分かりやすい。実際に大きめのデータを入れてそれっぽいのを作っているのも良い感じ。実際に手を動かしながら試せばもっと身についたのだろうけど、怠惰な自分はさらっと読み流した程度。深く理解できるわけではないけど導入には十分か。本に書いてあった複数の処理系を用途に合わせてというのは、キーバリューストアとRDBが拡張したと考えれば自然か。RDBが必要としないそこそこの結果で良いケースは大規模データが増えるにしたがっての流れなのだろう。いずれにせよ道具が多くなり便利になるのはwelcome。使いこなす技術を身につけることも必要になってくるけど。\n", ["DB"]],
["プログラマのためのサバイバルマニュアル", "http://www.amazon.co.jp/dp/487311571X/", "Josh Carter/オライリージャパン", "programmers_survival_manual", "Mon Jun 10 08:36:38 +0900 2013", "2", "残念ながらあまり新鮮味がなく、どこかで読んだことがあるような文章ばかりだった。たしかに参考文献を読むと、そのほとんどを読んでいた。内容は情熱プログラマーに近いがその対象は新人プログラマという感じ。タイトルと違うこの内容にずっと違和感を持ちながら読んでいたのだけど、最後に原題が「New Programmer's Survival Manual」ということに気づいて納得。マーケットのパイを小さくしないための姑息な技を感じた。新人さを必要としないということで、自分のおっさん具合に気づかされた。\n\n一点同意したのはタッチタイプの重要性を説いていた所。自転車と同じで一度訓練したら、生産性を高める武器になるのに、周りは記号が打てない人が意外に多い。プログラマの会社じゃないからか。", ["プログラマ"]],
["マニフェスト 本の未来", "http://www.amazon.co.jp/dp/4862391176", "ヒュー・マクガイア、ブライアン・オレアリ編/ボイジャー", "manifesto", "Mon Jun 10 08:34:48 +0900 2013", "3", "本を読むのが好きな自分には気になる一冊ということで手に取った。なぜ、好きなのかを考えてみると、おそらく本の文章がきっかけとなり、いろいろなことを考えることができるからだと思う。入力に刺激されて思考回路が活発になる感じ。例えば、この本を通じて下のようなことを考えた。\n\n本はWebより情報の質が高いという点を除いてWebと変わらないと思っている。万人が出版できる今、本のレーベル(出版社)の重要さが増すはずだ。O'Reillyのように、出版社によりその質が担保されることにより、読者が本の検索に時間をとられることを省略してくれる。ただし、これはWebで言えば、検索サイトがポータルを作っていた時代といえる。これより未来があるはずで、それはGoogleのページランキングのように、もしくは、Amazonのリコメンデーションのように、良いもの、自分にあったものが自然に我々の前に表れてくれるはずだ。\n\n前半の方は大したことが書いていないのに小難しい文章で、読む速度が上がらなかったが、後半は興味深い点がいくつかあった。\n\n22章の中の、出版の形式は印刷からデジタルへと、読み方もソーシャルリーディングへと変わるが、その本質である本の中の世界は変わらないという主張。まさしくそのとおりで、本の本質は変わらないのだけど、その外側が便利になるだけと意識しておかないと、議論が変な方向に言ってしまう。\n\nまた、24章の未来の図書館のあり方として、市民にはDRMフリーな本をダウンロードさせるという方法。マイナーな著者には一度に一定の収入が与えられるため、一般的な販売より効果があると主張していた。会社の理論がそれについて来る遠いその日を待ちたい。\n", ["oreilly", "本"]],
["独創はひらめかない", "http://www.amazon.co.jp/dp/4532318416", "金出 武雄/日本経済新聞出版社", "dokusou", "Thu Apr 25 08:47:35 +0900 2013", "3", "著者はカーネギーメロン大学の教授。共感する点、ためになることが多かった。\n\nまずやってみるということや、議論によってアイデアを洗練していくという手法は、自分の経験からもUSの大学では確かに機能していた。自分の環境では議論が足りない気がする。人格ではなくアイデアを否定しているということが区別出来ていない人も多いからか。\n\n最近よく感じるのが、自分には失敗が足りないということ。失敗を通じて成功の道が開けると思うのだけど、その経験が少ないため、何が悪いかも分からず中途半端なままとなってしまう。まず手を動かすことを忘れないように。頭だけで考えられるタイプではない自分は、本を読んだり、ものを作っている時が一番集中してものを考えることが出来るから。\n\n以下、自分用メモ。\n\n> 物事を推し進めようとする時、やり遂げる前に「できないこと」をいろいろ想像していては前に進まない。最後までやり遂げるから知識も増える。私はやってみることをためらう学生にこう言う。\n「この問題が解ける方法があれば、それをやってくれ。しかし解く方法を君は分からない。私も分からない。とするならば、ダメだと思われる方法をやってみた方が賢明ではないか。最後までやりきれば失敗のパターンが分かるはずだ」\nと。この方法では解けない、解けないのはなぜか?ということがわかれば、解けなくさせている根本的な理由が少しはわかる。そうすれば、「なるほど、ここがキーなのだ」ということがわかってきて、その問題を正面から解決する方法が見えてくるのである。\nつまり、困難点をエクスプリシット(陽に明示)することが大切なのである。(p.40)\n\n> どんなアイデアでも、最初は単なる思いつきにすぎないということが多い。アイデアを練る方法は、考えついたアイデアを人に語りかけ、そのやりとりでまともなアイデアかどうかチェックし、関連した知識を得、不備な面を修正するのである。アイデアを昇華させるキーは「人に話すこと」と言えよう。ほかの人もいろいろ考えているものだからだ。\n自分の頭の中だけで考えているときは陰に考えるので、そのアイデアのすべてが正しく思える。しかし、人に話す時には相手を納得させようとするので、陽に言わなければならない。m[このアイデアはいいですよ]と口で言った途端に、「じゃあ、理由は?」と聞かれるに決まっている。「こう、こう...」と明確に言えなければならない。すると、自分のアイデアのどこに穴があるかわかってくる。(p.59)\n", ["イノベーション"]],
["ウェブオペーレーション", "http://www.amazon.co.jp/dp/4873114934", "John Allspaw 等/オライリージャパン", "weboperation", "Mon Apr 08 08:35:53 +0900 2013", "3", "DevOpsの本。運用のことはまるで知らない自分にはおもしろい内容が多く、もっと早くに読むべきだった。面白かったのは、16章 アジャイルインフラストラクチャ。リリース間隔の短さだけに目が行くことで品質が下がるような上辺だけのアジャイルを強烈に批判して、その価値を切り捨てている。本当のアジャイルであるために、不具合が起きたときの検知やそもそも不具合が起きないような継続的デリバリの環境が重要と説いている。開発の範囲が運用まで広がり境目がなくなっていく世界がすぐに来ることを予感出来た。\n", ["oreilly", "web", "devops"]],
["Makers", "http://www.amazon.co.jp/dp/4140815760", "Chris Anderson/NHK出版", "makers", "Mon Apr 08 08:35:12 +0900 2013", "3", "ロングテール\, フリーの著者の新作。ファボラボの設備が整った施設で、まさに目の前で様々な者が作られていくのを目の当たりした経験がある自分には、とても楽しみにしていた本。\n\n現在、技術の発達によりビットがほとんど無料になることで、ソフトウェア事業の設立はコストをかけずに誰でも出来る。これがアトムの世界にもやってくるという著者の主張。3Dプリンタ、レーザーカッター、オープンソースハードウェアなどの普及により、モデルのデジタル化や在庫を持たず注文後生産など高度に自動化されることで、ものを作り事業設立のコストが比べ物にならないくらい安くなるため。\n\nお気に入りのストーリーはリカちゃん人形の家具が必要になったら、コミュニティが提供している3Dモデルをダウンロードし、カスタマイズした後、3Dプリンタで印刷して自分用の家具を手に入れるという下り。早くこんな世界が来て欲しい。\n\np.89をメモしたが、自組織にこれを展開できないのか。一人一人が専門家となり、組織として最大限の価値を見出す。実現は難しいのだけど、全員がジェネラリストくずれの組織よりも期待できる。\n\nどこに書いてあったが忘れたが、解決方法を探している人との集まりと実際に解決する人たちをうまく結びつけたいと感じた。さらに言えば、Kickstarterのようにアイデアを出す人達と、そこに価値を見出す人たちを結びつけることが出来れば、より良いものが出来上がる。\n\nおもしろかったのは、現地生産のあり方が変わってきているという下り。高度に自動化された向上ではもはや人件費は中国などに比べて高くはなく、場所代のみが効いてくるということ。その場所代も、在庫保有リスク、調達の時間差、輸送費を考えれば、ローカルで作った方が良い場合があるという点。具体的には、次のように、合理的な選択により委託と自社生産が繰り返される。(p.204あたりのメモ)\n\n* 100個単位: ローカル: 試作品\n* 1\,000個単位: 中国: 製造委託\n* 1万個単位: ローカル: 在庫保有、調達の時間差を避けて自社工場で製作\n* 10万個単位: 中国: 規模の経済、低価格化競争\n\n以下、自分用メモ\n\n> ニッチ商品はたいてい企業のニーズではなく、人々のニーズから生まれる。もちろん、一定量を生産するには会社を興さなければならないが、そうした人々は自分たちのルーツを守ることに力を注ぐ。そんな起業家がよく口にするのは、まずコミュニティに役立つことがいちばんで、利益はその次でいいということだ。消費者から転身した情熱的な起業家が作る品物は、効率的な大量生産品にはない、手作りの味わいが感じられるものが多い。\nこれはある意味で、アダム・スミスが「国富論」で唱えた、効率的な市場を支える専門家の行き着く姿だともいえる。人は自分がもっとも得意なことだけを行い、それをほかの人が作る品物と交換すべきだ、と彼は言った。効率的な分業によって社会全体の生産性が上がる--得意分野の交換が成長につながる--ため、ひとりの人間、またはひとつの街がすべてを行うべきではない、と考えたのだ。一八世紀にうまくいったこのやり方は二一世紀にはもっと効果的だろう。いまではどんな専門品を作る人でも、原材料のグローバルなサプライチェーンを利用し、完成したニッチ商品を世界中の消費者に届けることが可能になったからだ。(p.89)\n", ["イノベーション"]],
["デバッグの理論と実践", "http://www.amazon.co.jp/dp/4873115930", "Andreas Zeller/オライリージャパン", "debugging", "Mon Feb 18 12:44:38 +0900 2013", "3", "デバッグについて体系的に学びたいけど、そういう本がなかなかないと思っていた自分には、発売されてうれしい本。\n\n単なるデバッガの使い方だけでなく、体系立ててerrorやfailureについて書かれている。ツール類も豊富に紹介されているが、直感的には、まだ時期尚早と思えた。もう少し洗練に時間がかかるのではなかろうか。まだ、プログラマが原因を考えて直した方が早いと思う。\n\nRuby\, Pythonなど高水準のプログラム言語を使うことが多いと、デバッガの必要性を感じず、ついprint文でデバグしてしまう。さほど苦労は感じないのが、デバッガを覚えて効率的に仕事をすることを妨げている原因のような気がする。そういえば、Javaでさえ、デバッガの必要性は感じなかった。どちらかと言えば、メモリリークの原因などを特定するプロファイラは重宝した。\n\n書かれている理論的なことは、結構知らないことが多く、手法が力任せ(と言っても二分探索でlogオーダーだが)に調べる方法が多かった気がする。特に良いと思ったアイデアは、並行プログラムのスケジューリング(コンテキストスイッチ)を様々な場合で試験して、不具合を出す方法は有用だと感じた。\n", ["oreilly", "プログラマ"]],
["インタフェースデザインの心理学", "http://www.amazon.co.jp/dp/4873115574", "Susan Weinschenk/オライリージャパン", "100_thing_every_designer_needs_to_know_about_people", "Mon Feb 18 12:41:50 +0900 2013", "3", "インターフェイスデザインに直接役立つtipsというより、人間ってこういう生物だからこう作りましょうねという感じの本。デザインというよりも人間を知る上でおもしろかった。原題の100 Things Every Designer Needs to Know About Peopleの方が内容を良く表している。\n\n本の内容自体に、おー、というのはあまりなかったのだけど、良いと思ったのは本の体裁がきれいなこと。空白の配置といい、カラーの写真といい、さすがインターフェイスの本、読みやすかった。この感覚、大切にしたいものです。ちなみに、自分的にiPhoneとAndroidの決定的な一番の違いは「フォントのきれいさ」です。これだけで買う価値あると思っています。\n", ["UI", "デザイン", "oreilly"]],
["それをお金で買いますか", "http://www.amazon.co.jp/dp/415209284X", "Michael Sandel/早川書房", "whatmoneycantbuy", "Mon Jan 21 09:02:18 +0900 2013", "3", "マイケル・サンデル著。8月に図書館で予約して約半年後、ようやく借りれる。直前のTVで見た内容とほぼ同じなので、ささっと読めた。正義の話の本よりも、軽い感じ。\n\n全てをお金で買えるのかという本。二つの観点があり、一つは公正さ、もう一つは腐敗に関するもの。\n内臓移植の場合、公正さの観点ではお金を出せる人しか変えず、お金がないがために内臓を売る人が現れるということ。腐敗については、そもそもお金で扱うべきでないものを、お金で買えるようにした瞬間に、その価値観が変わるということ。保育所で子供の迎えを罰金制にした瞬間、遅れがむしろ増えて、罰金制を無くしても遅れは変わらなかった。これは、道徳的な考えから、罰金になることでサービスの一部として捉えられたため。\n\n著者は至る所にお金で買えるものが増えることに警笛をならしている。唖然としたのは、人の生命保険をパッケージして債権化するというもの。白血病、肺ガン、心臓疾患などを多種多様な疾患をポートフォリオにすることで、リスクを最小化するというもの。リスクとは特効薬が見つかることで患者の余命が伸びて保険費用がかさむこと。実際、エイズの特効薬が見つかったときに、その生命保険を売買していた会社は潰れた。人の命(しかも死ぬ方)まで金儲けにする世の中は確かに行き過ぎだ。\n", ["経済"]],
["レガシーコード改善ガイド", "http://www.amazon.co.jp/dp/4798116831", "Michael C. Feathers/翔泳社", "working_effectively_with_legacy_code", "Mon Oct 29 09:10:47 +0900 2012", "3", "テストのないコードをレガシーコードと位置づけ、それを修正する時のリファクタリングテクニックを網羅したような本。テストドリブンが叫ばれていてその重要性を理解しながらも、やはりテストを後で書きたい自分にぴったりと読んでみた。残念ながら(というかそもそもの認識誤りで)、期待した内容ではなかったものの、本に書かれていること自体は大変ためになると思う。\n\nただし、最近のリフレクションを持っていて動的にクラスを作れるような言語ではモックが作れる。それを使えば、この本に書かれていることの大半は不要になると思う。レガシーな言語が対象ともいえるだろう。原書が出版されたのは2004年なので仕方がない。でも基本となる考え方はためになると思う。\n\ngetterとsetterを同じメソッドでは行わない(コマンドとクエリーの分離)など色々とためになることが書かれてきたのだけど、一番グッときたのは、第24章「もうウンザリです。何も改善できません」(p.335)での著者のレガシーコードへの思い。適当に要約してみる。レガシーコードだけが大変なのではない。隣の新規プロジェクトは立場が異なる大変さがある。きれいなコードを受け持ってもがっくり来ているチームもあれば、大変なレガシーコードを抱えても輝いているチームもある。要は気持ちの持ちようだ、\n\n一番違和感を覚えたのは、テストのために可視化の範囲を広げること。本末転倒の気がする。経験上、リファクタリングをする上で断然便りになるのが可視化の範囲だからだ。当時は試験をするためには仕方がなかったのだろうが、現在の言語ではリフレクションなどを使えばいかようにもなる。\n\n読んでいて思ったのは最初からテストしやすいコードを書くことが重要ということ。それにより、依存性などを最小限に抑えられ、個々のクラスやメソッドの責務が明確になるだろう。テストドリブンで行えば初めからそれが叶えられて理想なのだろうけど、(しつこいけど)それをやりたくない自分には、テストをリファクタリングの機会とするのが現実的だと思った。\n\nテストを先に書きたくない理由を挙げてみる。\n* 最初に何を作りたいか分からないから、テストを考えられない。\n  もちろん、やりたいことは漠然として思っていて、それを明確にするために、テストを通じてAPIを設計していく方針も分かるのだけど、まだそこまでの所までも行っていない。\n* どうすればできるか分からない\n  まずは何ができるか、どうすればできるか分からないから、そこを解決したい、という気持ちが先にある。そのときは、APIなどは関係なく、気になっている機能だけを実現する。そこに集中する上でAPIは二の次となる。\n\n要は仕様も決まっていなければ、その実現方法も分かっていないので、何をどうやればできるかを見極めながら、仕様(やアーキテクチャ)が決まっていく感じ。大方の人の決まりきったものを作るのとは立場が異なるのだ(という言い訳をしてテストを後に伸ばす)\n\nそして、最後の理由が一番強いのだけど、\n* つまらない\nこれが正直な所。一番おもしろいプログラミングをようやくできるのに、テストなんて書いてられない。これを言ったら今までの言い訳が無に帰るのだけど、そうなのだから仕方がない。人間のための方法論なのに方法論のために人間が合わせるなんてまっぴらなのです。UIに通じる考え方か。\n\nただし、試験が重要だということは何を言っても変わらない。しかもリーンや継続的デリバリにおいてより重要になっている。個人的には次の順番の開発が良いのではないかと思っている。\n\n1. とにかく作りたいもの動くものを書く\n2. それが通るような試験を書く\n3. 試験を仕様として、リファクタリングしてきれいなアーキテクチャに直す\n仕様が決まっていない開発だからこそできるのかもしれない。試験すら書いていない自分にとっては、大変な進歩のような気がする。今回のプロジェクトでためしてみたい。", ["プログラマ"]],
["まつもとゆきひろのコードの未来", "http://www.amazon.co.jp/dp/4822234630", "まつもとゆきひろ/日経BP社", "future_of_computing", "Mon Oct 22 09:11:12 +0900 2012", "3", "流行りの技術の概要を知りたい自分には良い本だった。広くさらっと知って興味あるものは、きちんとした本を読めばいいし。雑誌の記事をまとめたそうで、ひとつの記事の分量がちょうど良かった。\n一番ありがたかったのはプログラム言語の解説。言語屋が解説してくれると、特徴が明確になりうれしい。思ったのは、古い技術が基礎になっていること。Unixのselectやキャッシュが頻繁に登場してきており、おっさんにはうれしい感じ。一番残念だったのはもちろん表紙。良い内容なのに、タイトルと共にうさんくささ全開でかなり損していると思う。", ["プログラマ"]],
["継続的デリバリー", "http://www.amazon.co.jp/dp/4048707876", "David Farley等/アスキー・メディアワークス", "continuous_delivery", "Mon Oct 15 09:17:39 +0900 2012", "4", "良い本だった。実務でリリース業務に携わったことがなく、その知識がゼロに等しい自分には、このような本を読むことで一通りの考え方が分かるというのは大変ありがたい。特に、どうやるという方法論ではなく、なぜやるのかという考え方を教えてくれるので、知識がすぐ陳腐化せずに、また応用も効きやすい。\n\n個人的にはテスト駆動の開発はソースを変更したときに伴うテスト変更が面倒ですぐにやめてしまい、一回もできていなかったのだけど、ここまで何度もその価値を書かれると(540ページ越え!)洗脳されてしまう。人間が失敗しやすい所は、自動化する。難しい所を最初から何度も行うことで、最初に失敗することで本番に失敗しないようにする。言われてみると確かにと納得することが多い。どこまでできるかは分からないが試してみたい。\n\n以下、自分用メモ<!--more-->\n\n> 基本的なプラクティス\n\n> 1. ビルドが壊れているときにはチェックインするな\n2. コミットする前に、常にローカルでコミットテストを実行せよあるいは代わりにCIサーバーにやってもらえ\n3. 次の作業を始める前に、コミットテストが通るまで待て\n4. ビルドが壊れているのに、家に帰ってはならない\n5. 常に以前のリビジョンに戻す準備をしておくこと\n6. リバートする前にタイムボックスを切って修正する\n7. 失敗したテストをコメントアウトするな\n8. 自分が変更してビルドが壊れたら、すべてに対して責任をとれ\n9. テスト駆動開発\n(p.107の3.5節からの小見出しから)\n\n> 受け入れテストはビジネスの言葉(エリック・エヴァンスの言う「ユビキタス言語」)で表現されるべきだ。アプリケーションの技術的な言葉でではない。これはつまり、チームで開発に使っているのと同じプログラミング言語で受け入れテストを書くのは構わないが、その抽象概念はビジネスのふるまいのレベルで動くべきなのだ。「注文する」のであって「ボタンを押下する」のではない。あるいは、「送金を確認する」のであって「資金テーブルに結果が入っているかを確認する」のではない。(p.173)\n\n> リリース候補が本番にデプロイできるようになるころには、次に挙げるような内容が真実であると確実に言えるようになっている。\n\n> * コードがコンパイルできる\n* コードは開発者の期待通りに動く。なぜなら、ユニットテストを通っているからだ。\n* システムはアナリストやユーザーの期待通りに動く。なぜなら、受け入れテストをすべて通っているからだ。\n* 基板やベースラインとなる環境の設定が適切に管理されている。なぜなら、アプリケーションが本番と同じようにテストされているからだ。\n* コードには適切なコンポーネントがすべてそろっている。なぜなら、デプロイできるからだ。\n* デプロイメントシステムは正常に動く。なぜなら、リリース候補がこのステージに進んでくるまでに、一回は開発環境で、一回は受け入れテストステージで、一回はテスト環境で使われることになるからだ。\n* バージョン管理システムには、デプロイメントに必要なものがすべて格納されていて、手作業の操作は必要ない。なぜなら、システムをすでに何度かデプロイしているからだ。\nこの「成功を積み重ねる」アプローチは、「プロセスをできるだけ早く失敗させる」という我々の規範と組み合わされて、あらゆるレベルで機能しているのだ。(p.180) 継続的リリースの長所\n\n> 何もないところから完全なパイプラインを作成するための戦略を紹介する。たいていの場合、このようなステップを踏むことになる。\n\n> 1. バリューストリームをモデル化して、動くスケルトンを作成する。\n2. ビルドとデプロイプロセスを自動化する。\n3. ユニットテストとコード解析を自動化する。\n4. 受け入れテストを自動化する。\n5. リリースを自動化する。\n(p.180)デプロイメントパイプラインの実装\n\n> 一般論として、アジャイルな開発では技術的負債を最小に抑えなければならない。そのためには、変更のたびにリファクタリングして設計を最適化することになる。しかし現実的には、トレードオフが存在する。ときには将来からの借入れのほうが有利なこともある。重要なのは、余裕を持って返済できるようにしておくことだ。(p.393) 研究開発についてもこの場合が当てはまる気がする。不確定要素が大きいときはそれを取り除くことに没頭すべきだから。", ["プログラマ", "devops"]],
["イノベーションのDNA", "http://www.amazon.co.jp/dp/4798124710", "Clayton M. Chrisstensen等/翔泳社", "innovators_dna", "Tue Oct 02 12:46:22 +0900 2012", "4", "イノベーションのジレンマの著者の新作(と言ってももう新しくないけど)。良い本だった。\n\n言われると当たり前だと思えるけど、言われるまでは考えていなかったことが書かれていて読みながら納得できで腑に落ちる。\n\n一番良かった点は力付けられること。自分がやらないで誰がやるんだという気にさせてくれる。(cf. p.195のメモ)\n\nこのような人の本が読めるのはありがたい限りです。\n\n以下、自分用メモ\n\n> イノベータは、「現状維持バイアス」と呼ばれる、変化を嫌い現状をよしとする、人間が陥りやすい認知の罠とは無縁だ。たいていの人は、何も考えずに現状を受け入れる。決まりきった生活を好み、波風を立てがらない人もいる。「壊れていないなら、直すな」のことわざに忠実にしたがい、「それ」が壊れているのかどうか、真剣に考えようとしない。対照的に、イノベータは多くのものを「壊れている」と認識し、直そうとするのだ。(p.29) うちの会社にいると「ルールだから」と考えることをあきらめてしまっている人が多すぎると感じることが多い。\n\n> 質問ストーミング ブレインストーミングとは異なり、新しい解決策を考える代わりに全員で問題について質問しようじゃないかと提案した。驚いたことに質問オンリーの手法は、難しい問題の本質的要素により深く切りこみ、いままで気づかなかった問題の側面に全員の目を開かせてくれた。(p.98)\n\n> タタが経験したのは、いわゆる「ヴュジャ・デ」である。デジャ・ヴュ(既視感)はご存知の通り、実際には一度も見たり経験したことがないのに、すでに経験したことがあるという強烈な感覚を持つことを言う。ヴュジャ・デはその逆で、それまで何度も見ているのに、初めて見たような感覚をもつということだ。タタはヴュジャ・デの原理を応用することで、前からそこにあったのに、誰も気づかれなかったもの、少なくとも誰かの行動のきっかけにはならなかったものを「見る」ことができた。(p.105)インドで雨に濡れながら4人でスクーターに乗っている家族を見て安価な車の販売を思いついたきっかけ。\n\n> われわれが大企業の上級役員数十人に行ったインタビューでは、ほとんどの人がイノベーションを生み出すのは自分の責任ではないと考えていた。むしろ「プロセスを後押し」して、社内の誰かがその仕事を確実にやるよう取り計らうのが、自分の務めだと思っていた。これに対して、ジェフ・ベゾス(アマゾン)、マーク・ベニオフ(セールスフォース・ドットコム)、A・G・ラフリー(P&G)など、世界で最もイノベーティブな企業の幹部は、イノベーションを他人任せにせず、イノベーション・プロセスに自ら深く関わっているのだ。(p.195) イノベーションを生み出すのは誰か?へぼい計画を予定どおり実行して何がうれしいのか?イノベーショ!を生み出すために日ごろ何をしているのか?その成果をなぜ共有しないのか?", ["イノベーション", "Chrisstensen"]], 
["リーンソフトウェア開発と組織改革", "http://www.amazon.co.jp/dp/4048687417", "Mary and Tom Poppendick/アスキー・メディアワークス", "leading_lean_software_development", "Mon Oct 01 09:14:47 +0900 2012", "3", "よい本だった。前半は前の本と重複している点があったのか、あまり目新しさは感じなかったが、後半は本のタイトルである「組織改革」にふさわしい内容で、多々心に響く所があった。\n\n思うに、自分はこの本に書かれている内容に共感するとともに、そうなっていない現状に腹立たしいのだと思う。例えば、組織主義や能力不足で人を尊重できていない。最も基礎的なこの部分が成り立たないのであれば、チームで協力なんてできないし、組織全体の最適化なんてほど遠い。\n\nプログラマの価値が低いのも気にくわない。そもそもそういう人を集めてシステムを作っているからそうなるのだけど、その方法が気にくわないのだ。\n\n標準化を推進する側も開発プロジェクトをスキルが低いと思っていないだろうか。なぜ、当たり前のことができないのかを考えた方がより効果的なのではないか。\n\n全部が全部正しいと盲目的に信じることはないけど、少なくても現状よりはこうありたいという希望を見せてくれる。どうやってこの希望の道を実現するのか、この本は経営陣にも理解できるように記載していると思う。\n\n以下、自分用メモ<!--more-->\n\n> エスノグラフィーは、何が機能して何が機能しないかを見極めることではない。常に「なぜ?」を問う。なぜ、将来のユーザーはいま、こんなふうに動いているだろうか? なぜ彼らは、そのやり方に困っているのだろうか? なぜその製品やサービスはいまの設計になったのか? なぜ使いにくい(使いやすい)のか? また、「他とは違う人たち」を観測することも有益だ。ルールに従わない人、製品の使い方が自分勝手な人、製品を偏愛する人、憎悪する人、理由を話すことに遠慮を感じない人、などだ。(p.131)\n\n> プログラミングを仕様書を翻訳してソフトウェアにすることだと考えているなら、おそらくあなたはプログラマではない。コードを書いている人たちのなかで、自分を翻訳者だと考えている人はほとんどいない。彼らは自分を、自分が書くコードの作者だと考えている。(p.135)\n\n> プロセス標準\n...プロセス標準の目的はビジネス間の明解なコミュニケーションと明解な引き継ぎを可能にすることだと書いた。それにより、パフォーマンスを比較する評価尺度を作成でき、作業をより簡単にアウトソース(外注化)できるようになるとしている。また、特にCMMIを引き合いに出し、ソフトウェアの品質を高める上でも、ソフトウェア開発のアウトソーシングを推進するうえでも多大な影響を及ぼしたと述べている。このようにプロセス標準をとらえることは、プロセスが十分にコモディティ化(特別なスキルを要しなくなる)されたのなら、誰でもどんな仕事でもこなせるべきとする暗黙の了解のうえに成り立っている。つまり、人が取り替え可能となりソースとなるのである。プロセス標準のこうした考え方は、同じプロセスを全社的に展開することが大切とする信念に基づくことが多い。\n著者や、これは効果的なプロセス標準の目的を良くない方向にゆがめていると思う。中央集権的に考え出した開発プロセスを全社的に推進した結果、非常に高い効果が得られたり、特別なスキルがなくても開発作業に従事できることがよりよいシステムにつながったりした実例を著者は見たことがない。一方、現在の名立たるシステム -- インターネット、グーグル検索エンジン、アマゾンクラウドなど -- は、現場のチームに権限を与え、勇気と創造性を持って難題に立ち向かい、自分たちに合ったプロセスを独自に工夫し、改善した成果なのである。\nプロセス標準の起源をたどると、1900年代初めの科学的管理という潮流に行き着く。工程の専門家と監督者が作業者それぞれの仕事を計画し管理することこそ、最も効率よく成果を出せる道だという考えに沿っていた。およそ半世紀後、日本製品が価格・品質の両面で他国製品を圧倒し始めたころ、プロセス標準は新たな局面に入った。日本のトップ企業群が詳細なプロセス標準を守って高い成果を挙げていることが知られるようになったため、このプラクティスを模倣する動きが広がったのだ。ISO 9000やCMM/CMMIなどの評価基準も、企業は正式な標準を持ち、明示的かつ厳格に遂行されるべきだという考えを後押しした。だが、プロセス標準のこうしたとらえ方は、多くの企業に標準の本当の意義 -- プロセス標準の目的は、継続的な改善のベースラインとして活用すること -- を見失わせてしまった。標準その物が悪いのではなく、監査がムダを生み、オーバーヘッドとなっているのだ。\n Workplace Managementで大野耐一はプロセス標準についてこう述べている。\n\n> > 標準作業と言うのがあるが、標準というのは、刻々変わっていかにゃおかしいんで、そいつを、標準というのを最善だと思ったらもういかん。標準というのは、改善するためのひとつのベースであってね、今より悪くなったやつは改悪であり、今よりよくなったやつは改善なんで、こんなものは人間がいい加減に決めるんでね、変わっていかねばおかしい。\nそいつを、標準作業をつくれというと、何かベストのものを心掛けると、標準というものは仲々できん。これは大きな間違いだね。今やっていることをそのまま書け、と。で、これよりよくすれば改善だしね。そうでないと、最善のものが出ちゃったら、改善意欲はなくなってしまう。けれど、みんなもあんまりでたらめじゃね。何か標準がないと、ようしましたと言ったっても、比べる相手がないといかんので、それについては標準というのを、とにかくつくらにゃいかん、と。まずそれを持っていって、やりにくかったらどんどん意見出して改善をやりなさい。\n決めたことを守るということは、「決めた」という言葉にせんといかんのだね。「決められた」というと、なにかこう押しつけられた感じを持つんでね。決めたということは誰が決めたか、自分も決める権利があるんだし、自分で決めたやつは自分で守ぐらいのことはね、これは何も押しつけでも何でもない。\nだけど最初は、まずその標準作業をやってみて、やっていくうちに、これはつまらんなとか、こうしたらええとかああしたらええと改善案が出るはずだ。そしてらそいつをすぐ採り上げて、今度はそれを標準にしていけばいい。\n昔、標準作業所というのを現場へぶら下げたんだけど、一年たって、神の色が変わっておるのにね、そのままやっておるというのは、お前一年間月給泥棒だぞ、と言ってやった。毎日何しに会社へ出てきておるんだ。毎日見ておったらね、ああ、あそこはつまらんなとか、ここはつまらんなと、すぐ書き替えにゃおかしい。先月のがぶら下がっておってもおかしいぞ、と。トヨタじゃ最初、標準作業表をぶら下げて日付入れさせといたんだね。お前、一ヶ月遊んでおったのかって言って、組長を怒る材料になるわけだ。\nそいつをつくるのに、一ヶ月も二ヶ月もかかるというばかなことがあるか、とか。寝床で書いてはいかん。現場で見て書きなさいって言うんだね。(p.223)\n\n> 私はかねがね疑問に思っている。個人の強みを見出して、それにあった仕事を割り当てる人が誰もいない状態で、どうやって企業は知識労働者から最高のパフォーマンスを期待できるのだろうか。仕事が自分の強みにそぐわず、成長の機会もない状態で、どうやって人は潜在能力をフルに発揮できるのだろうか。人をコストとしてではなく資本材として遇するリーダーがいない状態で、どうやって企業は知識労働者がそのまま職にとどまってくれると期待できるのだろうか。 メアリーポッペンディーク (p.260)\n\n> うちの会社では、エンジニアと営業マンが一番大事で尊敬されるポジションなんですよ。'その他の人たち'は -- さきほど会われた副社長もそうですが -- 自分たちの仕事はサポートすることだと思っていますし、大声でそう言っています。創設者の1人がよく言うんです。『この会社では2つのことにいつも注目している。1つはすばらしいものを作ること、もう1つはそれを売ることだ』って。(p.275)\n\n> 任務重視命令(現地の小隊リーダーに任せた現地での意志決定)と、詳細命令(中央司令部からの細かい命令)の比較をまとめた。左側の任務重視命令はアジャイルの価値観と驚くほど重なる。右側の詳細命令はまったく逆だ。それでいて任務重視命令と詳細命令はどちらも指揮統制のアプローチなのである。軍隊組織にとっては任務重視命令のほうがはるかにうまく機能している。(p.278)\n\n> 信頼の問題: 詳細な予算と計画に基づくパフォーマンス評価を見ると、信頼が欠けていて、コントロールも足りないことがわかる。政治体制としては民主主義を信望しているはずなのに、多くの企業では玄関を入るときに民主主義を置いていかなければ成らない。コントロールシステムは、一部の不心得者によからぬことをさせないためのものなにに、全員が自分が疑われているような気分にさせられる。ボグネスは言う。\nいかにも疑り深そうに何度も何度も聞いてくるんだ。予算を下げるとして、管理外の出費を防ぐにはどうしたらいいか? 従業員がコスト管理を自分たちでできると本当に信頼できるか? 彼らの心配事その1、その2、その3、全部がこれだ。だが、いったい誰の話をしているんだ? 何百万ドルもするマシンを構築したり開発したりしている、信頼できる人たちなのに。原油を売り買いして、毎日、何百万ドルの通貨変動を処理している、信頼できる人たちなのに。そんな彼らの出張費を管理する? いいかげんにしてくれ。(p.298)\n\n> 効率性の問題: 予算と計画にかかわる問題の中で最後の、そしておそらく一番小さなものは、準備にかける時間と労力、および、後に不一致の測定と説明にかける時間と労力の膨大なムダである。この作業が価値を増やすものならムダではないが、ほとんどの場合は価値は増えない。プランニング(立案)はときに非常に有用だが、計画そのものに意味があることはまれである。(p.299)\n\n> リーンチームに推進チームに問う質問: 判例: 一般的な答え→望ましい答え(p.304)\n<コスト削減: 現在の経済情勢では大幅なコスト削減が必要だ。一番いいアプローチは何か?>\n\n> * 各部門でのコストを削減させる → 部門間のコストをなくす\n* 全体のコストは部門ごとのコストの合計である → 部門ごとにコストを削減させると、かえって全体のコスト増につながる\n* 全体のコストを下げるには、全社的にコスト削減するのが最も簡単で速い → コスト削減の最大の機会は部門と部門の間にある\n・部門の長はコントロールできるコストについて責任を負う → 部門の長は影響を及ぼせるコストについて責任を負う\n\n> <計画の順守: 計画をコミットし、そのコミットメントを達成することをどう思うか?>\n\n> * 計画コミットメントである → 計画することは重要だが、計画そのものは重要でない\n* 予測可能性は計画の順守からもたされる → 予測の精度が最も高まるのは、最も多くの情報が得られるまで複数のオプションを残していた場合である\n* 計画は常に正しい → 計画とは何が起こりそうかのシナリオであり、計画があると、起きたイベントにすばやく反応しやすい\n* 計画との差異は実行に誤りがあったということであり、釈明が必要である → 計画との差異は学習の機会として、また作業の複雑性をより理解する機会として歓迎される\n\n> <稼働率: 常に全員に限界いっぱいの作業量を課すことについてどう思うか?>\n\n> * 高価なリソースはフルに利用すべきだ → 余裕がなければすばやく動くことはできない\n* 生産性を上げる最もいい方法は、全員に100%の仕事を割り振ることである → 100%の稼働率はスラッシングを引き起こし、全体の生産性を低下させる\n* 作業のキューに多くたまっていると、マーケッティングは優先順位より適切に決定でき、全員の忙しさを維持できる → バッチのキューを重視する風潮がシステム全体のパフォーマンスに最大の不利益をもたらす\n\n> <作業標準: 作業標準の目的は何だと思うか?>\n\n> * 標準の目的は、全員どの仕事でもできるようにすること → 標準の目的は、改善のベースラインとなること\n* 標準はプロセスグループが策定する → 標準をこまめに手直ししなければ、改善努力が行き詰まる\n* 文書としてまとめられた標準は順守の対象となり、変更はされない → 仕事がうまくいかない人には、よい策を見つけて手助けする\n* 標準のアプローチは、組織全体で1つか2つあれば十分である → 作業標準には目の前のタスクをどう進めるかについてのチームの知恵と知識が詰まっている\n\n> <財務: 日々の意思決定を後押ししているのはどのような財務的思考か?>\n\n> * バランスシート型思考:企業の資産価値は何か? → キャッシュフロー型思考:どのくらいの時間で資産を現金に変えられるか?\n* 遅れてもかまわない → 遅れはムダを生む\n* ジャスト・イン・ケース(念のため)が賢明 → ジャスト・イン・タイムのほうがより賢明\n* 仕掛品には価値がある → 仕掛品はムダである\n* キューはよりよい意思決定と稼働率の極大化に役立つ → キューは作業の妨げとなり、進行を遅くする\n\n> <パフォーマンスの評価尺度: 企業の重要なゴールを達成する、最善の方法は何か?>\n\n> * 目標値を設定する → システムの能力と人の能力を高める\n* パフォーマンスを上げたければ、適切な評価尺度を見つけ、それをてこにするのが早道である → 「安定したシステムがあれば、目標値を設定する必要はない。システムが作り出せるものが手に入るもののすべてだ。システムの能力を越えた目標値はどうせ達成できないのだから」\n* ターゲットを設定すると、マネジメントが何を重要と考えているかを皆に伝えることができる → システムを変えないまま、目標値を満たしてしまうと、パフォーマンスに大きなぶれが生じ、物事を悪くする\n* データを測定基準として用いる → データをプロセス改善のために用いる\n* 個人ごとのパフォーマンス査定とボーナスが、個人のパフォーマンス改善のモチベーションとなる → 個人へのボーナスは有効な協力を妨げ、倫理にもとる振る舞いを誘発するおそれがある\n\n> 事業が成長すれば、権限を移譲しないとやっていけなくなる。男性にも女性にも自発性を存分に発揮してもらわなければならない。移譲する側にも相等の忍耐がいるが、権限と責任を与えられた者は、優秀ならば、自分のやり方で仕事をし始めるだろう。間違いも犯す。だが、根本的に資質のある人間なら、その間違いは、マネジメントが彼らに一挙手一投足まで細かく指示を出した場合の間違いの深刻さに比べればたいしたことはない。破壊的に危険なマネジメントは、間違いがあったときに自発性を消し去ろうとする。ずっと成長していきたいのなら、自発性を持った人材を多く抱えることが重要だ。(p.314) 3Mの元会長の言葉\n\n> 私を副社長に昇進させ、きみの最大のチャレンジは'自分に権限がない'かのように振る舞って組織を導くことだ、と言ったのだ。言い換えれば、上の意思や命令で組織を作るのではなく、それ以外の、たとえば従業員を指導したり、他者を理解し支援してゴール達成に努めるようなやり方で組織を作れということだ。私は、これこそが、健全で成長していく仕事の環境を作るマネジメントの役割だと深く確信している。(p.314)\n", ["イノベーション"]],
["リーン開発の本質", "http://www.amazon.co.jp/dp/482228350X", "Mary Poppendieck等/日経BP社", "implementing_lean_software_development", "Thu Sep 27 13:04:38 +0900 2012", "3", "コンセプトからキャッシュにするまでの時間をいかに短くするかというリーンのお話。\n\np.326、p.293は自分が標準プロセスに対する嫌悪感をまさに端的に表しているように感じた。人を信じずに、方法論のみを押し付け、それに従っているかどうかでのみ判定する環境。重要なのはなぜそれが必要かであり、それが守られるのであれば、その内容は内部での積極的な修正を許すべきである。\n\nプロセスや改善ツールが広がらない原因のひとつにそれがあるのだと思う。なぜ必要とされるかが理解できないから上辺だけを実践するし、効果が出ないから余計邪魔なものになる。理由とその効果(短期間で、少なくてもプロジェクトが終わるまでに出ることが重要)が極めて明白になっていれば、その手段は彼らなりにやるのだと思う。ツールを提供するのであれば、その方法の一つとして提供するぐらいの位置づけだろう。広げる方法が問題ではなく、理由と背景を明確に説明できないプロセスやツール自体が問題なのだと思う。\n\nソフトウェア開発ではなく自組織にリーンを当てはめたらどうなるのだろうと読みながら思ってたのだけど、次の本「リーンソフトウェア開発と組織改革」というズバリの本があったのでこちらを読もうと思います。\n\n以下、自分用メモ<!--more-->\n\n> グーグルは、検索結果のランキングとよく似た方法で、どの製品に取り組むかを決定している。つまり、優先順位は、開発チームの興味と、製品にひきつけられたユーザー数を基に決定するのだ。(p.56)\n\n> リーン活動に乗り出す前に、「人について、何を本当に信じているか?」という問いに答えなくてはならない。プロセスにどのような態度で取り組んでいるか、考えてみよう。きちんとドキュメント化され、誰もが質問することなく従えるようなプロセスが、正しい道だと考えているだろうか?それとも、プロセスを標準化するのは、その作業をする人に、疑問に思ったり変更したりするための土台を与えるためだろうか? リーン原則は確実に、後者の考えに根ざしているのである。(中略)リーンを成功させるには、作業を行っているその人本人が、その作業のやり方を最もよく知っているのだ、という基本理念を、(中略)問題解決するには、その本当に、作業を行う人たち自身に、トレーニングを行ったり、ツールや権限を与えたり、支援したりして、自らの問題を解決し、プロセスを改善できるようにするのが最善の手法だということを心から信じなくてはならない。(p.326)\n\n> 思考\nトヨタの「思考生産システム」の最大の強みは、人の育成方法にある、と言っている。「『プッシュ』(押し付ける)システムでは、作業者たちは与えられた指示に従って、ただ生産していくだけなので、ほとんど知恵を得る機会がない」と彼は言う。「それとは対照的に、『プル』(引き出す)システムでは、何をどのくらいの速さで作るべきか、一人で決定しなくてはならない製造プロセスを、作業者に自分の頭を使って考え出させるのだ」\nたいていの改善活動では、ドキュメントを必要以上に重視しすぎていて、各人に常に自分の作業環境の改善方法を考えさせることに、あまり重点を置いていない。もちろん、ほとんどの企業では、社員に十分に、改善について考えさせている、と思っている。私たち自身、何年も前からいいアイデアがあればそれを書き留めて提出できる提案システムを作業者に用意しているが、その提案活動も改善という点から見れば、ほとんど効果はなかった。ソフトウェア開発では、ふりかえりを使って変更すべき点を書き出したりするが、同じ内容が何度も繰り返しできてくることがあまりに多いようだ。\n困ったことに、提案活動やブレインストーミングで出されたアイデアの多くは、誰か別の人に引き継がれて、評価されたり、ときには実現されたりする。これは間違ったやり方だ。アイデアを持っているチームメンバー自身が、自らのアイデアを実現すべきなのである。他の人が実現することを前提に、提案システムにアイデアを出させても意味はないのだ。\n優秀なアイデアの長いリストに、自分のアイデアをただ付け足しているだけではダメなのだ。改善に関する優れたアイデアが、誰か別の人の問題として手渡されてしまったら、発案者はそのアイデアを自分で推し進めようとはしなくなる。そして、その問題についての暗黙知もまた、発案者の頭の中に残されてしまう。\nすべての作業者が自分たちの現在行っているプロセスのしくみに、常に疑問を感じるべきであり、新しいアイデアを試したり、うまくいくアイデアを実現したりするために、効果的な問題解決テクニックを積極的に使うように奨励されなくてはならない。この問題解決プロセスの基盤として、ドキュメントが存在すべきである。このドキュメントは、作業チームが作って、使い、保守し、手軽に変更できるようでなければならない。\nやる気と思考力のある人材に価値があると考えるのなら、ドキュメントに基づいたプロセス評価を見直す必要がある。通常、そのような評価は、組織が、ドキュメント化された手続きに従っているかどうかで、その組織の成熟度を測る。一見、この目的は無害に見えるが、実際には、評価プロセスは組織にドキュメントを凍結するように強いるのが常なので、そのプロセスを変えさせまいとする圧力もかかっているのだ。その結果、困ったことに、ともすると第一線の作業者たちから「考える権利」を奪ってしまう。作業者は、ドキュメントに書かれているとおりにやるように、と促される。しかし、本当は、ドキュメントに書かれている内容に、常に疑問を持つように促されるべきなのである。ドキュメント重視のプロセス評価は、ドキュメントの安定性を重視しがちだ。実際には、ドキュメントの頻繁な変更こそが、その組織が思考できるようになった証拠だと考えるべきなのだ。(p.293)\n\n> 計測\n開発チームを効果的に計測する方法を見つけるのは難しいものである。なぜなら、開発作業が終了してからしばらくたたないと、その成果が目に見えない場合が多いからだ。そのため、プロセスの各部分が最適化されれば、プロセスの成果物も最適化されるという前提から、計測を増殖させることになる。この前提は、「システム」としてのものの見方からすれば、根本的に間違っている。まったく制御不能なプロセスをスタート地点とするのであれば、プロセスを部分ごとに最適化していっても利益はあるが、結局は部分最適化によって、システム全体の最適化を妨害することになるのである。\n誤った計測を改善しようとしても、間違った要因を作り出すことになり、多くの場合は意図しなかった結果につながる。たとえば、プロジェクトマネジャーはよく、アーンド・バリューに基づいて計測される。しかし、アーンド・バリューを計測すれば、計画どおりに進めたかどうかを計測することになる。つまり、その計画が望まれた結果を達成するための方法であったかどうかという点は、まったく無視されてしまう。これが、予定どおり、予算内で、計画どおりのスコープを完成させた形でソフトウェアを提供しても、やはり顧客に不満を抱かせる原因なのだ。\nでは、正しい行いを促すためには、どのような計測基準を採用すればいいのだろうか?計測点を増殖させるのではなく、計測対象を減らし、サブシステムレベルでの正しい行いを促すようなシステムレベルでの計測点を見つけるのがいいのだろう。リーンな組織では、何を計測すればよいかがすでによくわかっているはずだ。つまり、サイクルタイム、財務上の成果、顧客満足度である。(p.294)\n\n> リーンソフトウェア開発の7つの原則とそれを妨げる神話\n\n> 原則1: ムダをなくす(Elimnate Waste)\n  神話: 早く仕様を固めればムダが減る → 使われることのない機能は最悪のムダ\n\n> 原則2: 品質を作り込む(Build Quality In)\n  神話: テストの役目は欠陥の発見だ → 欠陥を防ぐこと(人間だから起きるポカよけ)\n\n> 原則3: 知識を作り出す(Create Knowledge)\n  神話: 予測が予測可能を生む → 未来予測は、複雑、詳細、遠い未来、不確実な環境では必ず不正確\n\n> 原則4: 決定を遅らせる(Defer Commitment)\n  神話: 計画は決定である → 計画は役に立たないが、不可欠なプロセスであり、重要な学習訓練\n\n> 原則5: 速く提供する(Deliver Fast)\n  神話: 急がば回れ → Googleのように品質、速度が両立し得る。そのためには、プロセスの継続的改善、品質を作り込む人を育て、競合他社の何倍ものスピードで繰り返し、確実に顧客の要求に反応する能力を培う\n\n> 原則6: 人を尊重する(Respect People)\n  神話: 唯一最高のやり方がある → 改善の余地のないプロセスはない\n\n> 原則7: 全体を最適化する(Optimize the Whole)\n  神話: 分解によって最適化する → サブシステムのメトリクスは部分最適に陥るため、本当に重要なひとつだけ最適化する\n(p.28以降を適当に抜粋)\n\n> リーン開発を実践するための21ステップ(p.301)\n\n> 全体を最適化する\n> 1. バリューストリーム全体、製品全体を通してリーン手法を実践する。\n2. 計測基準を作り直す。\n3. 境界越えのコストを減らす。\n\n> 人を尊重する\n4. チームリーダーや監督者を訓練する。\n5. 責任や意思決定をできるだけ下のレベルに移譲する。\n6. 技術へのプライドを育てる。\n\n> 速く提供する\n7. 小さなバッチで作業を進める。\n8. 作業を許容量までに制限する。\n9. 利用率ではなく、サイクルタイムを重視する。\n\n> 決定を遅らせる\n10. 完全に仕様を決定してから開発に着手するのがよい方法である、という考えは捨てる。\n11. 依存性を断ち切る。\n12 選択肢を持ちつづける。\n\n> 知識を作り出す\n13. 設計・構築チームを作る。\n14. 継続的な改善を行う文化を守る。\n15. 問題解決手法を教える。\n\n> 品質を作り込む\n16. 同期する。\n17. 自動化する。\n18. リファクタリングする。\n\n> ムダを排除する\n19. マーケティングと技術の両方を理解しているリーダーを任命する。\n20. 価値のみを生み出す。\n21. コードをできるだけ書かない。\n", ["イノベーション"]],
["7つの言語 7つの世界", "http://www.amazon.co.jp/dp/4274068579", "Bruce Tate/オーム社", "7languages_7weeks", "Tue Sep 18 13:01:47 +0900 2012", "3", "7つの言語であるRuby\, Io\, Prolog\, Scala\, Erlang\, Clojure\, Haskellの外観を説明している本。\n\nプログラミング言語好きな自分にはとても楽しめた。長所、短所が書いてあり、どれも納得できる。実際に手を動かしながら覚えようという姿勢にも共感できる。言語の作者にインタビューしている点も興味深い。とくに「もう一度はじめから作れるとしたらどこを直したいか」という問いは楽しかった。\n\n残念な所は、本の性質上仕方がないのだけども、内容が濃く書けずさらっと書いてあるのが物足りないか。学生時代の専門がプログラミング言語の自分にとっては、あまり多くのことを得れなかったのも残念。手続き型言語しか使っていない普通の人には刺激的なはず。\n\nIoはプロトタイプ言語ということで紹介されていたが、JavaScriptとの違いがあまり伝わって来なかった。Rubyのメタプログラミングも例はもう少し適切なものがある気もした。\n\n感じたのは、プログラミング言語自身は古いのだけど、ようやくプログラマがこの概念についてこれるようになったという点か。Haskellなんて既に学生のときにあって、なぜ今頃騒がれているのかが良く分からなかったりもする。そうは言っても、関数型言語で大規模システムを組むのが普通になるとも考えづらい。日本のプログラマーが悪いのか、こんな考え方しなくても何とか出来るように進化しているプログラミング言語が良いのか分かりませんが。\n\nあとは、言語だけでなく、ハードが進化してきたから、言語を選ぶ可能性も広がったというのも大きい気がする。Javaが遅いからCで書き直すとか昔は平気でやられていたから、当時スクリプト言語を選択するなんて正気の沙汰ではなかっただろう。\n\nなぜ関数型言語が書けないのか、と聞かれたら、関数型言語で書いていないからだと言いたい。良いと思っているのであれば、ただ書けば良いだけだ。本ばかり読んでHaskellを始めない自分に対しての戒めもこめて。\n", ["プログラマ"]],
["Slack", "http://www.amazon.co.jp/dp/4822281116/", "Tom DeMarco/日経BP社", "slack", "Tue Sep 18 09:24:20 +0900 2012", "3", "効率化を優先するあまり余裕がなくなり、それにより、変化できずに会社として生き残れない。ゆとりの効果として、組織の迅速さ、人材の維持、未来の投資、リスク選択を挙げている。\n\n前者はイノベーションのジレンマと根本的なところで一致している気がする。効率を優先するあまり効果がないがしろにされて間違った方向に進んでも軌道修正できなくなるからだ(cf. p.133のメモ)。\n\n熊とワルツをから派生して気楽に読んでみたら、以外におもしろかった。\n\n平日に早めに仕事を切り上げてスタバでこの本を読みながらふと特許のアイデアが一本浮かんだ。業務に急かされていた最近にはない感覚だった。たしかにゆとりは必要なのだと実感。\n\n以下、自分用メモ。<!--more-->\n\n> 健全な組織の場合、ある程度の失敗は許される。たとえば、マイクロソフトには長年に渡って、「沈め、次に泳げ」という社是のようなものがある。社員は沈む(失敗する)ほどやまほどの責任を負わされる。次に、立ち上がり、自分行動を分析し、検証するチャンスが与えられる。次回はさらに強気の課題を背負わされると思っていい。この方針を全社にて起用していることに関しては、マイクロソフトの経営スタイルは、冒険スクールのアウトワード・バウンドのようである。失敗によって自分の弱点を知ることが、偶然の出来事ではなく、企業方針に組み込まれているのだ。(p.106)\n\n> ひとしきり騒ぎがかたづいたあとは、プロセスそのものに失望させられる。経験からいって知識労働の標準プロセスは、かならずといっていいほど肝心の中身がからっぽだ。たとえば、新しいプロセスは、新しいエンジニアを面接、採用するための29の必須手順を規定しているかもしれないが、本当に重要なただ一つのことについては、なんの指針も示さない。それは、「この応募者は役に立つか?」ということである。設計の標準プロセスは、優れた設計を考案する方法は何も教えてくれない(それを文書化する方法だけである)。(p.119)\n\n> 本当の品質は欠陥とはほとんど関係ないが、いわゆる品質向上プログラムは、すべて欠陥と関係している。企業の品質向上プログラムの核心は、欠陥をなくすためのメカニズムである。成功すれば、欠陥がまったく、またはほとんどない製品を生産するのに役立つだろう。しかし、そのような製品はなにかの約に立つのだろうか。答えはイエスかもしれないしノーかもしれないが、いずれにせよ、品質向上プログラムのためではない。(p.127)\n\n> 開発プロジェクトの品質保証プログラムは、なによりもまず、スケジュールの品質を保証するのが当然だろう。私はいつもそう考えている。しかし、これまでに出会った企業の品質向上プログラムや品質保証組織は、品質管理に割り当てた時間が妥当かどうかを判断する素振りもみせない。よくあるのは、品質管理の担当者が参加する前にスケジュールが決まっているケースだ。担当者が品質向上のためにすることは、期日(品質向上が可能か、不可能かはこれによって決まる)が決まった後に行われる。(p.129)\n\n> 効率か効果か、どちらかを選ぶとしたらどちらをとるだろう。答えは簡単だ。効果的だが効率的でない組織は、はやくはないかもしれないが、着実に本当の目標に向かって進んでいく。その方向にどれだけ進むかは、効率の問題である。一方、効率的だが効果的でない組織は、誤った方向に進む。最適化するほど、本当の目標とは違った方向へ進む。(p.133)\n\n> リスクの本質は、これまで能力を高めてきた分野を離れ、素人同然の新しい分野に飛び込むことである。だからこそ危機がともなう。\n現在のように市場経済が流動的だと、企業は積極的にリスクをとらなければ成功しない。しかし、効率を最優先していると、企業はリスクを回避しがちになる。「たしかに、この新しい有望そうな分野に進出する手もあるが、それには、ここ数年辛抱して慎重に進めてきた最適化による貴重な改良を犠牲にするしかない」と企業は化'我得る。これはリスクをとることに対する強力な反対意見になり、そのために変化の計画が封じられることも多い。効率が勝ち、効果が負ける。\nしかし、ちょっと考えてほしい。この章の冒頭で、効果と効率のどちらかを選ばなければならないとしたら、必ず効果を選ぶべきだといわなかっただろうか。逆ではまったく意味がないと。それではなぜ、企業は繰り返し意味のない選択をするのだろうか。いったいなぜ、効果より効率を選ぶのだろうか。お答えしよう。それは、目標管理という経営理念があるからだ。(p.136)\n\n> 目標管理は1950年代以来の流行だが、現在ではおおむね否定されている。しかし、消えたわけではない。...目標管理を行う企業は、四半期ごとに失敗するたびに、さらに目標管理を強化する傾向がある。利益が目標に達しないと、やむをえない市場要因のためと言い訳するが、数値で表した目標の一部が継続的に達成されると、たとえ業績が惨憺たるものであろうと、経営が成功している証拠として声高にうたわれる。(p.137)\n\n> まったく変化できない人は、成長もできない。これは目新しいことではないと思うが、変化できないこと、現状にこだわることを素直に認めておきながら、当然のように成長を期待している組織によく出会う。成長できないと、心底おどろく。彼らはこの事態を、変化できない、成長できないという二つの大問題のうち、第二の問題としてとらえているのだろう。第二の問題は第一の問題の結果であることを見落としていることが多い。\n変化できないこと、ゆとりが決定的に足りないことを認めている企業でも、「柔軟性」については語りたがる場合がある。型にはまりきっていて、そこから抜け出す方法もわからないのに、柔軟性を貴重な企業資産として話したがる傾向がある。(p.143)\n\n> 企業とその構成員にとって、「自分たちは何者なのか」を知ることは重要である。しかし、「自分たちは何者ではないか」を知ることの方が、少しだけ簡単である。それすらわからない場合、つまり、馬鹿ばかしい計画について「われわれのやることじゃない」と言える根拠が会社にない場合、その会社にビジョンがないことはあきらかだ。(p.146)\n", ["チーム"]],
["熊とワルツを", "http://www.amazon.co.jp/dp/4822281868", "Tom DeMarco & Timothy Lister/日経BP社", "waltzing_with_bears", "Tue Sep 04 09:24:27 +0900 2012", "2", "リスク管理入門書。やさしく、おもしろく書いている。とは言え、リスクなんて考えたくない自分には、とてもためになった。\n\n一番響いたのは倫理の話。沈みそうな船であることを知りながら、今まで大丈夫だったから今度も大丈夫だろうと神に祈りながらも航海した船乗り。そして見事に乗客ともども沈む。船乗りが真摯に大丈夫だと判断したから彼の罪は軽くなるか。否。また、船が無事にたどり着いたからといって彼の罪が軽くなるか。否。これが倫理かと腑に落ちる\n\n全文は下のURLの赤い文字で読める。\n「信念の倫理」第1部　ウィリアム・キングドン・クリフォード\nhttp://hhihou.blogspot.jp/2011/03/blog-post.html\n\nこの文章を読みながら、原発のことを思い出した。自分が反対、推進の立場を決めれないのは、双方のメリット/デメリットを理解していないからなのだと気づいた。「危険だから反対です」ではなく、なくなったときの影響などを理解した上でどちらを選ぶかの(自分の中での)選択ができると思うのだけど、そこまで自分がいけていないという感じ。推進派、反対派の双方に読んで欲しいエッセイ。\n\n次にためになったのは、システムの価値をリスクと同じように評価するという点。システム開発コストだけにフォーカスが当たる中、意外に忘れてしまう。開発するために無理やりひねり出しているのだろうけど、本当にそうなったの監査は確かに重要。システムの価値と同じだけのリスクを取るという考えはためになる。\n\n以下、自分用メモ<!--more-->\n\n> 1. マイナス思考をするな。\n2. 解決策が見つからない問題を持ち出すな。\n3. 問題だと証明できないことを問題だというな。\n4. 水をさすな。\n5. すぐに自分で解決を引き受けるつもりのない問題を口に出すな。\n(p.135) リスクを口に出さない理由。これらの不文律が企業に組み込まれているから。\n\n> 上司から人前ではっきりと「このアイデアについてあえて欠点を挙げるとしたらどうだ」と聞かれたら、やればできる思考の呪縛から解かれる。もしものことが起きたら、というマイナス思考が受け入れられるようになる。 (p.136) リスクを口に出せる環境を作るために。\n\n> リスク管理の手順が22章に、リスク管理が実施されているかの検証手順が23章に書かれている。\n\n>  【信念の倫理・第一部】クリフォード著 \n（【熊とワルツを】トム・デマルコ著より） \n\n> > ある船主が移民船を航海させようとしていた。 船主は船が老朽化しているうえ、そもそもの作りがあまり よくないことを知っていた。船はいくつもの海を超え、嵐を乗り切ってきたが、何度か修理が必要になった。この船はもう航海に耐えないかもしれないと船主は思っていた。選手の頭はそのことでいっぱいで、考えるたびに憂鬱になった。おそらく徹底的なオーバーホールか終戦に出すべきだろうが、それには莫大な費用がかかる。しかし、出航する前に、船主はこの憂鬱な気持ちを振り払った。船はこれまで何度も無事に航海を終え、いくつもの嵐を乗り切ってきたのだから、今度の旅から帰ってこないと考えるのはくだらないことだと自分に言い聞かせた。神を信じよう、新天地を求めて祖国を離れていく不幸な家族たちを、神はきっとお守りくださる。造船工たちの誠実さを疑うような狭量なことはするまい。こうして船主は、自分の船は十分に安全だし航海に耐えると、安心して真摯に確信するに至った。明るい気持ちで船を見送り、移民たちが新たな故郷となるべき見知らぬ土地で成功するようにと心から願った。そして船は跡形もなく海に沈み、船主は保険金を手にした。 \n\n> > この船主についてどう考えるべきか。人々の死についてこの男に罪があることは間違いない。たしかに、船主は自分の船の安全性を誠意をもって信じていた。しかし、そのような誠意はなんら罪を軽くするものではない。船主には、【目の前にある証拠を信じる権利】がなかったからだ。その確信は、忍耐強い調査によって確実に得られたものではなく、疑念を押し殺すことによって得られたものだ。最後には、そうとしか考えられないという確信に至ったとしても、わかっていながら意図的に自分にそう思い込ませたのだから、責任を問われなければならない。 \n\n> > 話を少しだけ変えて、結局船は安全だったとしよう。今回の航海も、その後のいくたびもの航海も、船は無事に終えることができた。それによって船主の罪は軽くなるだろうか。そんなことはない。ひとたび行動すれば、それは永久に正しいか間違っているかのどちらかだ。その善と悪がたまたま結果を生まなかったからといって、それが変わることはない。無実だったことにはならない、見つからなかっただけだ。正しいか間違っているかは、\n信じたかどうかではなく、なぜ信じたかの問題である。何を信じたかではなく、どのように信じるに至ったかの問題である。結果として正しかったかどうかではなく、目の前にある証拠を信じる権利があったかどうかの問題である。 \n\n> > むかし、ある島の住民の一部が、原罪の教義も永劫の罰の教養もない宗教を信仰していた。この宗教の信者が、不当な手段を使って自分たちの教義を子供たちに教えているという疑惑が広まった。その国の法律の解釈をねじ曲げ、子供たちを親権者や後見人のもとから引き離しているとされたのだ。さらには、子供たちをひそかに連れ去り、友人や親戚から隠しているとも言われた。この問題に対する一般市民の関心を呼び起こそうと、数人が組織を結成した。かれらは、特に地位や身分の高い住民をきびしく追及する告発状を公開し、あらゆる力を駆使して、信仰に励むこれらの住民を傷つけようとした。騒ぎが大きくなったため、事実を調査する委員会が任命された。ところが委員会が得られる限りの証拠を入念に調査した結果、告発された住民は無実だったことがわかった。証拠が不十分なまま告発が行われただけでなく、活動家たちが公正な調査をしようと思えば容易に入手できたはずの無実の証拠があった。この事実が発覚した後、国民は、この組織のメンバーの判断を信用できないことはもちろん、人間としても尊敬に値しないと考えるようになった。活動家は自分たちの告発を誠意を持って心から信じていたが、【目の前にある証拠を信じる権利】はなかったのだ。その心からの確信は、忍耐強い調査によって誠実に得られたものではなく、偏見と感情から発せられた声を聞いて得たものだったからだ。 \n\n> > この話も少し変えて、ほかの部分は前と同じだが、さらに綿密に調査した結果、告発された住民は本当に罪があったことが分かったとしよう。これによって告発の罪は変わるだろうか。もちろん、そんなことはない。周囲は信じたことが正しかったか間違っていたかではなく、誤った根拠にもとづいて信じたかどうかである。かれらは間違いなくこう言うだろう。「そらみろ、結局われわれが正しかったんだ。次は我々の言うことを信用するだろうね」信用はされるかもしれないが、それで尊敬に値する人間になるわけではない。無実ではない、見つからなかっただけだ。一人ひとりが自分の胸に手をあてて考えてみれば、自分は目の前にある証拠を信じる権利もないのに思い込みを深めていたのだと気づくはずである。そして、間違ったことをしたと気づくはずである。 \n\n> > しかし、いずれの例の場合も、間違っていたのは信じたことではなく、その後の行動だということもできるだろう。船主は「わたしの船はかならず安全だと信じているが、それでも多くの人びとの命を託す前に船を調べることは自分の義務だと思っている」と言い得たはずだ。そして、活動家に対しては、「いかに自分の主張が正しく、信念が真実だと確信していようと、最大限の忍耐と注意をもって、平等な見地から証拠を調べるまでは、他人の人格を公然と攻撃するべきではなかった」と言い得ただろう。たしかに、ある程度はこのような考え方も正しいし、必要である。なぜ正しいかというと、信念が固く、ほかに考えようがないとしても、そこから起こす行動にはやはり選択の余地があり、強く確信しているからといって調べる義務を逃れる理由にはならないからである。なぜ必要かというと、自分の感情や思考を制御できない人は、明白な証拠だけを扱うという明快な原則にしたがうべきだからである。 \n\n> > しかし、このような考え方が必要であるにしても、それだけで十分とは言えず、先に述べたような審判をくだす必要もある。信念とそれにもとづく行動を切り離せないのと同様に、一方をとがめてもう一方をとがめないわけにはいかないからだ。問題に対する一方の見方を強く信じている人、あるいはもう一方の見方を信じたいと思っている人は、真剣に疑念を抱き、先入観を持たない人のように公平かつ完全に問題を調査することが出来ない。すなわち、公正な調査にもとづくことなく信念を持った人は、必要な調査を遂行するのに適した人物ではない。また、信念がその人の行動になんら影響を及ぼさないとしたら、それは本当の信念とはいえない。自分を行動に駆り立てる何かを本当に信じている人は、その行動をとりたいと望んでいるのであり、心の中ですでに罪を犯しているのである。信念がただちに表立った行動としてあらわれないとしても、それは将来の指針として心の中に\nしまい込まれる。それは人生のあらゆる場面で感覚と行動を結びつける諸々の信念のひとつとなる。それらの信念は複雑にからみ合って凝縮されているため、一部だけを切り離すことはできないが、新たな信念が加わるたびに全体の構造が変わる。どれほど些細で断片的なものにみえたとしても、まったく意味をもたない信念などない。人はひとつ信念を持てば、さらに同じような信念を受け入れるようになる。以前からの信念を裏付けるものに出会うとさらに信念を深め、そうでないものに出会うと軽視する。こうして徐々に心の奥底にひそかに積み重ねていったものがいつか表立った行動として爆発し、その人の人格として永久に刻まれるかもしれない。また、人の信念は、いかなる場合でも、その人だけに\nかかわる個人的な問題ではない。われわれの人生は、社会が社会たるために作りだした、物事に対する一般的な通念を拠り所としている。われわれの言葉や文章も、思考の形態や過程や方法も、時代とともに形づくられ、完成されてきた共通の財産であり、世代が変わるたびに、さらに次の世代へ引き継ぐべき貴重な財産として、また神聖な宝として代々受け継いできた至宝である。それは不変というわけではなく、拡大と洗練を続け、人が適切に手を加えてきた痕跡がある。その中には、良くも悪くも、ほかの人と対話をするあらゆる人間のあらゆる信念が織り込まれている。子孫が暮らす世界をわれわれの手で作るという大いなる特権、そして大いなる責任。 \n\n> > 先の２つの例では、不十分な証拠にもとづき信じることも、疑念を押し殺し調査を避けることによって信念を深めることも間違いだと断じた。このように審判をくだした理由は明白だ。いずれの例でも、ひとりの人間が信じたことが、ほかの人間にとって重要な意味を持つからである。しかし、人の信念は、どれほど些細なものに見えても、その人が無名だったとしても、本当に無意味なことなどなく、人類の運命に何も影響を及ぼさないことなどないのだから、どのような信念についても同様の審判をくだすしかない。われわれの意思による決定をうながし、人間のエネルギーをすべて凝縮して調和させる信念という神聖な財産は、その人だけのものではなく、人類すべてのものである。信念は、長い経験とはてしない労苦によって立証された、大胆率直な追及にも耐えうる真実に対してもつべきものである。そのような信念は人と人を結びつけ、人類共通の行動を強め、方向を定めてくれる。証拠もなく立証もされていないことを、自分への慰めや個人的な楽しみのために信じれば、信念は神聖なものではなくなる。それは人生のまっすぐな道を金ぴかに飾りたて、行く先にきらびやかな妄想を描くようなものである。あるいは、人類共通の悲しみを自己欺瞞でごまかすことによって、われわれをおとしめ、卑しめることでさえある。正しい信念をもっていると賞賛されてしかるべき人は、いかなるときも、不適切な対象を信用して消えることのない汚点を残したりしないよう、徹底的に用心を重ねて純粋な信念を守ろうとする。 \n\n> > 人類に対してこのような責任を負うのは、指導者や政治家や哲学者や詩人だけではない。村の酒場でたどたどしく自分の考えを言葉にする田舎者が、人類の進歩を妨げるとんでもない迷信を打ち砕くかもしれないし、永らえさせるかもしれない。疲れきった職人の妻が子供に話して聞かせた信念が、社会をつむぎあげるかもしれないし、粉砕させるかもしれない。素朴な人間であろうと、地位が低かろうと、信じるものをすべて追求するという万人の義務から逃れることは出来ない。 \n\n> > 確かに、この義務は厳しいものであり、何かを疑うことは非常につらい場合もある。自分は安全なところにいて力があると思っていたのに、無力でたよりないと気づかされる。何かについてすべてを知るということは、あらゆる状況下でその何かに対処する方法を知るということだ。何が起きようと、何をすればいいかはっきりわかっているつもりのときは、幸せで安心していられる、ところが、道に迷い、どちらへ行けばいいかわからなくなる。自分が何かについてすべてを知っていて、それに対して適切な行動をとることができると思っていたのに、実は自分が無知で無力で、それがどういうものなのか、どのように扱えばよいのかを１から学びなおさなければならない（そもそも学ぶことが可能だとして）などとは気づきたくないものだ。人が何かを信じたいと望み、疑うことを恐れるのは、知の感覚には力の感覚がともなうからだ。この力の感覚は、そのおおもととなる信念が調査におって公正に得られた本当の信念であるときに最も高揚する。そのようなときには、それが人類共通の財産であり、自分だけでなくほかの人びとにも通ずるものだと正しく感じられるからである。秘密を知ったおかげで自分が強く安全になったことが喜ばしいのではなく、人類が世界をさらに深く掌握したことが喜ばしいのである。ところが、不十分な証拠をもとに何かを信じたとしたら、その喜びは不当に得たものである。本来もてないはずの力の感覚を与えて自分をだましただけでなく、人類の義務に反して不当に力の感覚を得るという罪を犯したことになる。その義務とは、やがてわれわれの体を支配し、町中に広がっていく不当な信念から自分の身を守ることである。甘い果実を得るために、そうと知りながら自分の家族や隣人に疫病をうつす危険を冒すものがいたら、どう思われるだろうか。さらに、ほかの場合もそうだが、考えるべきことはこの危険だけではない。不適切な理由で何かを信じるたびにわれわれは自己統率力を弱め、疑問をもつ力を弱め、公正かつ公平に証拠を吟味する力を弱めている。われわれはみな、誤った信念と、そこから生まれる決定的に間違った行動を守り続けることによって大いに苦しむことになる。そのような信念を抱いたときに生じる悪は途方もなく大きい。しかし、軽々しく物事を信じる性質を持ち続け、不適切な理由によって信じることがあたりまえのようになると、さらに大きな悪が生まれる。わたしが誰かから金を盗んでも、単に所有者が変わっただけで何の害もないかもしれない。相手は金を失ったことに気づかないかもしれないし、相手が悪いことに金を使うのを妨げるかもしれない。しかし、これは自分を不誠実な人間にするという意味で、人類に対する間違った行為であることを免れない。社会が傷つくのは財産を失うからではなく、盗人の巣窟となるからであり、そうなれば社会は社会でなくなる。だからこそ、善を生むためには悪を行うべきではない。このような大きな悪が生まれるのは、われわれが悪を行い、それによってよこしまな人間になるからである。同様に、不十分な証拠をもとに何かを信じたとしても、それだけではさしたる害にはならないかもしれない。それはほんとうに真実かもしれないし、真偽があきらかになる機会はこないかもしれない。しかし、軽々しく物事を信じたことで、人類に対して重大な間違いを犯したことは免れない。社会にとって危険なのは、間違ったことを信じることだけではない。それだけでも重大な危険だが、さらに社会が軽々しく物事を信じるようになり、詳しく検証し、調査する習慣を失う危険がある。そうなれば野蛮な社会へと逆戻りせざるをえない。 \n\n> > 人が軽々しく物事を信じることによる害は、他人にも軽々しく信じる性質を広め、結果として誤った信念をもたせることだけではない。自分の信念について常に注意を払っていれば、他人が自分に話して聞かせる物事の真偽についても、常に相手に注意を求めるようになるはずである。誰もが自分の心と相手の心の誠実さを尊重すれば、人は互いに真実を話す。しかし、わたし自身が真実に無頓着だったら、そして自分が信じたいから、その方が安心できて楽しいからという理由で物事を信じる人間だったら、友人たちがわたしの心の誠実さを尊重するはずがあるだろうか。かれらはわたしに向かって心にもない「ごきげんよう」を言うようにならないだろうか。そのうちに周囲は虚偽と欺瞞の空気に包まれ、その中で生きていかねばならない。甘い幻想といとおしい嘘でできた空中楼閣の中では、それもたいしたことではないかもしれない。しかし人類にとってはわたしが隣人を嘘つきにしたことは重要である。軽々しく物事を信じる人は、嘘つきや詐欺師の始まりである。人は家族に囲まれて暮らしており、家族と同じような人間になったとしても何の不思議もない。人間の諸々の義務は深くからみ合っているため、法をすべて守るべき人が一点でも過ちを犯せば、すべてが罪となる。 \n\n> > 結論をいうと、不十分な証拠をもとに何かを信じることは、いつでもどこでも誰にとっても間違いである。子供のころに教わったことやその後に説かれたことを信じている人が、それについて心の中にわき上がる疑念を払拭し続け、それについて疑問を呈したり論じたりする本を読むことや人びとの輪に加わることを意図的に避け、それを揺るがしかねないような質問を不信心だとみなした場合、その人の人生は人類に対する長いひとつの罪となる。 \n\n> > 幼少のころから疑うことを恐れるように育てられ、信じるものによって永遠の幸福がもたらされるのだと教えられてきた分別の足りない素朴な人間にもこの審判を適用するのは厳しすぎる、と思われるとしたら、真剣に問うべきである。誰がイスラエルに罪を犯させたのかと。 \n\n> > この審判を裏づけるため、ミルトンの言葉を引用させていただきたい。 \n\n> > >　人間は真実について異端者となりうる。 \n　牧師がそう言ったから、 \n　あるいは集会でそう決まったからというだけで、 \n　ほかの理由も知らずに物事を信じた場合、 \n　その信心が真実であっても、 \n　その真実こそがその人の異端のしるしとなる。\n\n> > また、コールリッジによる有名な格言もある。 \n\n> > > 　最初に真実よりキリスト教を愛する人は、 \n　キリスト教より自分の宗派や教会を愛するようになり、 \n　最後には何よりも自分を愛するようになる。\n\n> > 教義の証拠は、一度調査したら永久に確定するというものではない。疑問を押し殺すことは正しくない。その疑問は、すでに行われた調査によって誠実に答えられるものか、さもなければ調査が完全ではなかったことがわかるかのどちらかである。誰かがこう言うとする。「しかし、わたしは忙しいのだ、特定の問題について適切な判断をくだすために必要な調査を延々と行う時間はないし、そもそも何を言っているか理解できない」それならば、その人には何かを信じる時間もないはずだ。\n", ["チーム"]],
["世界一大きな問題のシンプルな解き方", "http://www.amazon.co.jp/dp/4862761062/", "Paul Polak/英治出版", "out_of_poverty", "Mon Aug 27 09:21:49 +0900 2012", "4", "おもしろかった。おもしろく読むことができたのは、一般的な話の前に、個人の体験談(ストーリー)をおりまぜることで、主張や内容がすぐに納得できるからなのだと思う。\n\n1日1ドル以下の収入で生活している貧困をいかに解決すべきかを経験を通じて語っている。安い農具を売り、それを用いて収入を増やし、得られた収入でさらに収入を広げ生活を豊かにしていく市場を活性化させるが一番とのこと。助成は一過性のものであり持続的な成長が得られないため効果的ではない。\n\n日本語版への序文を書いた人と何回かお話させていただくことがあったのだけど、そこにいる人たちは、確かにこのような真のエリート精神があった。いかに世の中を良くしていくかを真剣に考え、行動して、結果も出していた。我々の会社で言われる社会貢献とは、こういうことを言うのではないかとも思う。\n\nまた、自分の仕事に当てはめながら読んだのだが、大変ためになった。\n\n例えば、問題が発生している現地に行き、そこで実際の問題を見て、解決案を試行錯誤しながら磨いて行くというもの。本当に問題を解決したいのであれば、自然にそのような行動に出るのだろうなと思いながら。\n\nまた、サービスを利用する側もデメリット(この本の場合はお金を借りるリスク)が発生するのだけど、その人にとってサービスから目に見えて利益を得られることが重要であること。やって当たり前のことができていない人たちにそれを普及させるのは、ゆでガエルがゆであがる時間を延命するにすぎない。やはり他と差別化できる付加価値をつけることが重要なのではないか。\n\nまた、目に見えてメリットが分かれば、どのように普及させるか重要な問題にならないと思う。自然に普及する素地ができている。\n\n彼らを哀れみの対象として見るのではなく、ビジネスパートナーとして見ることがお互い成功するために重要。彼らは貧困から抜け出す起業家精神は旺盛だが、アイデアや機会がない。それらを作ることが大切と言っている。たしかに、その心構えは確かに重要だと思うし、一部の人はそうだろう。しかし、実際には後書きにもあるように、多くの人は欲しくない(起業家精神がない)のではないかと思った。それでやっていって、何とかやっているのだから、新しいことを試す必要性も考えていないのではないか。その人(early adaptor)を見つけるにはどうするのか。まずは良いものを作り、成功例をまわりの人が見ることで、人づてで伝わるというのが理想か。\n\nまた、サービスを提供する相手を助成すべき人と考えるのではなく、実は我々オーバーヘッドの方が助成されていることに気づきハッとした。\n\n以下、自分用メモ<!--more-->\n\n> 現実的な解を導く12のステップ(目次より)\n\n> 1. 問題が起きている場所に行く\n2. 問題を抱えている人と話し、その話に耳を傾ける\n3. 個々の特有の状況について、可能な限りすべてを知る\n4. 大きく考え、大きく行動する\n5. 子どものように考える\n6. 当たり前のことを見て、実行する\n7. すでに誰かがやっているかどうか調べる(やっていればする必要はない)\n8. 目に見えてよい影響をもたらし、大規模化できる手法を採る\n9. 具体的な費用と価格目標を決める\n10. 現実的な三ヶ年計画に基づいて実行する\n11. 顧客から学び続ける\n12. 他の人の考えに流されず、前向きでいる\n\n> 1. 一日一ドル未満で生活する人を顧客とするモデルをつくることを、第一優先する。\n2. 価格に助成をせずに公正な市場価格で売る場合は、一日一ドル未満で暮らす人が買える価格になるように、製品やサービスを設計する。\n3. 最初に開発し市場に提供すべきなのは、収入を稼ぎだせる道具や手法であり、それを買った人が遅くとも一年以内に元がとれるようにする。\n4. ビジネスモデルは、事業に出資する投資家が許容する期間内に黒字化するものでなければならない。\n5. 貧困の改善に対して目に見えてよい影響があること。\n6. 百万人もの貧しい人たちに事業を拡大できる可能性があること。\n(p.84)", ["イノベーション"]],
["プログラミングの心理学", "http://www.amazon.co.jp/dp/4844323040", "ジェラルド・M. ワインバーグ/技術評論社", "psychology_of_computer_programming", "Mon Aug 27 09:14:34 +0900 2012", "2", "今の仕事に役立つかと思い読んでみた。初版発行が1971年と40年以上も経過しているのに、根本的なところはこのころから指摘されていたのかと思い、著者の目の付け所に感心した。エゴレスプログラミング、プロジェクトの納期に対する葛藤、チーム構成によってプログラム構成が変わったり、環境によって成果が変わったり。正直現状には沿わないため理解できない部分もあったが、どこが昔と変わったか、どこが変わらないかを考えるのにも悪くない。", ["プログラマ"]],
["リーダブルコード", "http://www.amazon.co.jp/dp/4873115655", "Dustin Boswell\, Trevor Foucher/O'Reilly Japan", "readable_code", "Tue Jul 31 13:02:16 +0900 2012", "3", "短いし楽しいし、あっというまに読めるのでおすすめです。どこかで聞いたことがあったり見たことがあったりするものも多くありましたが、実際できているかと言われるとまるでダメな自分です。こういうのをきっちり出来る人かどうかでその人の評価というのが決まってくるのでしょうね。反省。", ["プログラマ", "oreilly"]],
["人を伸ばす力", "http://www.amazon.co.jp/dp/4788506793", "エドワード・L.デシ / 新曜社", "why_we_do_what_we_do", "Fri Jul 27 09:12:33 +0900 2012", "3", "次の一文(cf. p.27のメモ)にひかれて読んでみた。この意味だけ知ればいいかと思っていたけど、読んでみると止まらず最後まで読む。\n\n> 「どのようにすれば、人を学習に、仕事に、家事に、あるいは薬を飲むよう動機付けることができるのか」という、多くの人々が抱く問いこそが、根本的に誤っていると考えるようになった。\n\n人や報酬によって動機づけされるのではなく、自分がやりたいと思うことが重要。では、どうやったらそう思うようになるのか、となるが、そこは、その人に「どうすれば良いだろう?」と問うてみると言っているのだと思う。やってもらう必要のあることや制約は多々あるが、それを素直に伝えた上で、やり方を考えてもらう。それが自律性を呼び起こすとのこと。\n\n\n以下、自分用メモ<!--more-->\n\n> 「どのようにすれば、人を学習に、仕事に、家事に、あるいは薬を飲むよう動機付けることができるのか」という、多くの人々が抱く問いこそが、根本的に誤っていると考えるようになった。なぜなら、このような問い方は、人が主体的に何かを為すものとして動機付けをとらえるのではなく、むしろ、人に何かをさせるものとして動機付けを考えているからである。この問題を生産的に考えるには、まず、内発的動機付けの概念を受け入れることが基本になると思われた。内発的動機付けとは、活動することそれ自体がその活動の目的であるような行為の過程、つまり、活動それ自体に内在する報酬のために行う行為の過程を意味する。...内発的動機づけとは、活動それ自体に完全に没頭している心理的な状態であって、(金を稼ぐとか絵を完成させるというような)何かの目的に到達することとは無関係なのである。\n(p.27)\n\n> では、内発的動機付けを弱めないようにするためには、人々に好きなことを好きなようにさせるべきだということなのだろうか。もちろん、そうではない。むしろ、人の精神を抹殺することのない組織のあり方や行動を制限するしかたを模索することこそが次に検討すべきテーマなのである。(p.43)\n> ポイントは、意味のある選択が自発性を育むという点にある。人は、自ら選択することによって自分自身の行為の根拠を十分に意味づけることができ、阻害の感覚が減少する。しかも、もし選択の機会が提供されるならば、人々は自分たちが一人の人間として扱われていると感じる。(p.45)\n制限の設定は責任感を育てるうえでも非常に重要である。問題はそのやり方なのである。自律性を支えるしかたで制限を設けることによって、つまり相手を操作する対象、統制する対象とみなすことなく、制限される側の立場に立ち相手が主体的な存在であることを認めることによって、偽りのない自分であることを損なわずに責任感を育てることができる。(p.58)\n\n> 薬を飲めと言われても飲まなかった人の話。緊急入院しても医者に説得されても飲まなかった。毎朝飲まなかった理由を聞くと「薬を飲むのを覚えていられないだけ」とのこと。医者を変えたところ、その医者と長時間話し合い、その結果薬を飲みつづけるようになった。その話し合いの中で、医者は一日の中で何時に薬を飲めば良いと思うか尋ねた。彼女は少し考えた後で「夜、ちょうど寝る前がいいんじゃないかしら」と答えた。そのときなら習慣になりそうだと彼女はいいた。実は寝る前に一杯のミルクを飲む習慣があるので、そのミルクで薬を飲むのであれば忘れないと付け加えたのである。彼女の新しい医者は、彼女が自分自身で薬を飲む方法を選択することのできる機会を提供し、驚くほどの効果をあげたのであった。\np.46\n\n> ミスした女性に対して、問題に対して率直に切り込む、起こり得た結果に関する情報と、今後注意すべきというメッセージを伝えるという点、フィードバックの言葉づかいを行為に向け人格に向けないという案。悪くは無い。そのミスにについて彼女自身がどう思っているか尋ねる方がよい。彼女に聞けば、前述のことを自分ですべて言うと思うからだ。(p.98を適当にまとめ)\n\n> 自律性の支援とは、他者 - 子どもや生徒や従業員 -\nを、自分自身の満足のために操作すべき対象と見るのではなく、人間として、支援する価値のある能動的なエージェントとして認めながら、かかわっていくことだということである。それは、彼らの立場に立ち、彼らの視点から世界を見るという意味である。(p.137)\n\n> 赤いチューリップを先生に言われた切り絵ではなく立体で表現しようとした子ども。先生はそれをよしとしない。宣誓が理不尽なのははっきりしている。...しかし、いとこにとって息子に先生が間違っていると-\nようするに悪い先生だと - 言ったところで、問題が解決するわけではない。そこで、いとこは、五歳の息子に、息子が考えた花の作り方はほんとうに素晴らしかったこと、紙の花を作るやり方はたくさんあること、時には先生が望むように作る必要もあることを説明することにした。先生のやり方の方がいいというわけではないが、それが、今回先生が望んでいたやり方であった。私のいとこは、これらのことを何とか息子に話し、紙を取り出していっしょに立体の花を作ったのであった。(p.198をてきとうにまとめ)\n\n> この本で言及されているすべての研究を振り返ってみると、良い親、良い教師、良い管理職、良い医者でいることには共通点がある。それは、自律性を支援するような態度を持っていることである。人の上に立つ地位で成功するには、下の地位にいる人の業績や成長や健康に留意し、自律性を支援する態度を持つことが必要である。それは他者の視点から状況が理解できるように、オープンに話を聞くことから始まる。(p.242)", ["自己啓発"]],
["すごいHakell たのしく学ぼう!", "http://www.amazon.co.jp/dp/4274068854", "Miran Lipovaca/オーム社", "learn_you_a_haskell", "Fri Jul 20 12:52:57 +0900 2012", "4", "Hakellの力強さが理解できるよい本だった。自分が書けるようになるかは自信はないが、少なくても書いてあることは理解した気になれるのでうれしい。\nなぜ良い本なのかを挙げてみる。\n- 多くの例題を通して実際のコードレベルで理解できる。\n- 一つずつステップを区切って説明しているので、理解がしやすい。\n- なぜそれがうれしいのかが、その都度書いてあるので、違和感なく、新しい概念を受け入れられる。\n- 文章も丁寧に書かれているので理解がすすむ。前に書いたことでも、ページ数を挙げるのではなく、そこで思い出すべきことを書いてくれているので遡る必要がない。結構大事なことだと思う。\n\nHakellのよさを感じたところとして、本当の関数型指向でプログラミングができると感じた点がある。たとえば、関数合成において、データはひとつであり、それ以外は関数を合成されたもので処理するという考え方をポイントフリースタイルという形で実現できる。\n通常の考え方でプログラミングすると、つぎのようにデータありきで、その結果を次の処理に適用することで、計算をすすめていく記述になる。\nfn x = ceiling (negate (tan (cos (max 50 x))))\nHaskellならば、これを下のように書き換えることができる。\nfn = ceiling . negate . tan . cos . max 50\n引数はなく、関数に着目され、、それらが関数合成(.)で実現されているのが見て取れる。この考え方でプログラミングできるようになることにあこがれる。\n\nモナドは文脈付きの計算と言うのが、多くの例題を通じて理解できた。\n\n状態が必要なときは、計算結果と状態をペアに持ち、状態を更新しながら計算を進めていくところに、関数型言語の限界を感じた。例えば、Zipなどで木を進んで行くときに、今まで進んだ木、残りの木、今いる場所のペアで管理していて、新たに進む毎にペアを一部作りなおす(Consセルが一つ生成される)ところが、ポインタ操作だけですむ言語とは異なる。\nさすがは、カシコイ人が集まって作った言語だけあって、きれいに抽象化されていると感じる。失敗(例外)をモナドに持ち込むことで、計算結果ときれいに分離している。また、同じような所があれば、リスト、木構造などなど、それらの共通項から抽象化された、ファンクター、モナドなどなどに引き上げられている。\n", ["プログラマ", "haskell"]],
["モチベーション3.0", "http://www.amazon.co.jp/dp/4062144492/", "ダニエル・ピンク/講談社", "motivation_3.0", "Tue Jun 30 19:30:12 +0900 2012", "4", "モチベーションの話となると、科学の知識とビジネスの現場にはギャップがある。ビジネスにおける現在の基本ソフト(OS)は、外部から与えられるアメとムチ式の動機付けを中心に構築されている。これはうまくいかないし、有害な場合も多い。アップグレードが必要なんだ。科学者たちの研究成果がその方法を示している。この新しいアプローチには重要な要素がある。一つは<自律性> - 自分の人生を自ら導きたいという欲求のこと。二番目は<マスタリー(熟達)> - 自分にとって意味のあることを上達させたいという衝動のこと。三番目は<目的> - 自分よりも大きいこと、自分の利益を越えたことのために活動したい、という切なる思いのことだ (p.277の本書の概要) という本。 \n\nお金による報酬は自分が単なる労働者と言ってるも同じ。いっそのこと職場内では同じ給料で良いのではないか。評価はお金ではなく仕事ぶりを認めてもらうために必要。と、考えている自分にはジャストな内容。 \n\nただし、全員にこの考えを適用できないのが、自社の残念なところ。ティーチングと同じでレベルが低ければ指導すなわちお金で動機付けをするしかない。では意識の高い人には何をすれば良いのか。お金や地位だけではないはず。充足感に浸れるはずだから、その補助として単に褒めれば良いのか。新しい何かが必要なのか。素直に良かったとフィードバックになれる、be niceになれる環境作りが一番重要な気がする。逆に考えれば、今の制度は評価/報酬はお金や地位として作られている。残業はお金のためにやっているのではないのに。そのお金が払えないから残業してはいけないなんて、働きたい人をバカにしているといつも感じる。 \n\n以下、自分用メモ<!--more-->\n\n> 芸術家へお金を払って注文した作品は、自主的な作品と比べて、創造性の面ではるかに劣ると評価された。それでも、技術面の評価では両者に違いはなかった。さらに、依頼された作品を製作しているときは、芸術家たちは自主的に製作しているときと比べ、著しく束縛を受けているように感じる、とも語った。(p.76)美術大学の学生時代に外発的な動機付け(=お金などによる報酬)が低いほど、卒業後のプロの芸術として成功する割合が高い(p.77)。研究開発もそうだろう。 \n\n> 「シアーズでは、自動車修理スタッフに売上ノルマを課した。するとスタッフは、顧客に料金を水増し請求し、不必要な修理を施してノルマを達成しようとした。」(p. 83) 人が与えた目標は成果を下げる。メトリクスを導入するとそれを越えようとしていびつになる。これは、プログラマの世界でも言われていた。\nこの考え方は子どもの教育に使えると読みながら思ったが、最後にまとめて書いてあった。 \n\n> アメとムチの致命的な7つの欠陥(p.93) \n\n> 1. 内発的動機づけを失わせる \n2. かえって成果が上がらなくなる \n3. 創造性を蝕む \n4. 好ましい言動への意欲を失わせる \n5. ごまかしや近道、論理に反する行為を助長する。 \n6. 依存性がある。 \n7. 短絡的思考を助長する。 \n\n> 外的な報酬が重要視される環境では、多くの人は報酬が得られる局面までしか働かない。それ以上は働かなくなる。たとえば本を三冊読めば商品がもらえるのなら、多くの生徒は四冊目の本を手に取りはしないだろう。ましてや、生涯にわたる読書の習慣など身につくはずがない(p.93) \n\n> 人には生来、(能力を発揮したいという)有能感、(自分でやりたいという)自律性、(人々と関係を持ちたいという)関係性という三つの心理的要求が備わっている。この要求が満たされているとき、わたしたちは動機づけられ、生産性的になり、幸福を感じる。この要求が満たされないと、人のモチベーションや生産性、幸福感は急落する。(p. 109) この考えは自分がなりたいプログラマ像をまさに言い当てている。自分で仕様を決めて、自分で作り、それを評価してもらう。これのどれかが欠けてもプログラマとは言えないだろう。 \n\n> * X理論: 従業員の大半は基本的に仕事が嫌いで、できることなら仕事をしたくないと思っている、とほとんどのリーダーは考えていた。主体性を欠く従業員たちは、責任を負うことをおそれ、ひたすら安全を望み、指示を必要とする。結果として、「組織の目標を目指して、適切に仕事に取り組ませるためには、ほとんどのものに対して強制し、管理し、指示を出し、罰を用いて脅かす必要がある」 \n* Y理論: 仕事に興味を抱くことは「遊びや休息と同じくらい自然」である。クリエイティビティや創意工夫の才は、すべての人に広く備わっており、適切な条件のもとなら、誰もが責任を感じ、責任を求めさえする。(p.115) 自分の組織をY理論で運営するためには何が必要か。組織を守る管理者に対して、どう安心させれば良いか。例えば、成果を出している人には、ボーナスステージとして、計画はゆるくみて、実績だけをきちんと評価する仕組みになれないか。計画なんて代わっていくのが当たり前だから。 \n\n> 「クリエイティブな集団にとって、もっとも大切な自由とは、新たなアイデアを試せる自由である。イノベーションには費用がかかるのではないかと疑ってかかる者もいる。長期的に見れば、イノベーションは安価だ。汎用に甘んじれば高くつく。自律性がこれに対抗する手段となるだろう」 トム・ケリー IDEO (p.131) \n\n> 自律性とは、選択をして行動を意味する。つまり、他社からの制約を受けずに行動するできるし、他社と円満に相互依存もできる (p. 131) 自律性こそプログラマーとコーダーを分けるものだ。 \n\n> 素晴らしいデザインを生み出すために必要な五つの信条を、簡潔に説明したことがある。その中の一つに「自分の作ろうとするものは自分が決める」とある。これは、仕事の自律性を重んじるタイプIの考え方を的確に示すスローガンとしても使える言葉だ。 (p. 142) \n\n> 目標には二種類あると指摘する - 達成目標と学習目標だ。フランス語でAをとる、というのは達成目標。フランス語を話せるようになる、というのは学習目標だ。(p.175) \nそれが得意だと感じていなくても、学習目標があれば、生徒は粘り強く頑張れる。結局のところ、彼らの目標は学ぶことであり、頭が良いと証明することではないからだ(p.176) \n\n> * お小遣いと家事の手伝いを結びつけないように \nお小遣いを家事の報酬として与えることは、子どものために“ならない”。家事の手伝いをすれば、お小遣いがもらえるとしてこの二つを結びつけると、親は小遣いを「交換条件つき」の報酬に変質させてしまう。これは子供たちに、報酬が与えられない限り、自尊心のある子どもは、配膳やゴミ出し、ベッドメーキングなどはやらなくていい、という明確な(そして誤った)メッセージを送ることになる。...子供たちは「行動の基準」と「報酬」の違いを学ぶようになるはずだ。 \n\n> * 正しい方法で褒める \n    * 頭が良いと褒めるのではなく、努力や取り組みを褒める \n    * 具体的に褒める \n    * 人前で褒めない: 賞賛はフィードバックであって、表彰式ではない。 \n    * きちんとした理由があるときだけ褒める \n(p.242) \n\n> 子どもたちにやらせるべき五つの危険なこと TED (p.247) \nhttp://www.ted.com/talks/lang/ja/gever_tulley_on_5_dangerous_things_for_kids.html \n\n> 多くの人が発する問い - 「どうしたらほかの人に学習意欲を起こさせるか、勤労意欲を沸かせられるか、家事をする気にさせられるか、薬を自分から飲む気にさせられるか」 - は、的外れである。この質問は、他人が何をするかではなく、他人に何をさせられるかの動機付けを見つけようとしているので的外れなのだ。 「人を伸ばす力」 新曜社 (p. 254) 意図が分からなくてとてもモヤモヤした。この部分だけで良いので本を読みたい。 \n\n> 「他人の意欲を起こそうとしてエネルギーを費やすのは時間の無駄である」と、コリンズは「ビジョナリー・カンパニー」で述べている。「ふさわしい人材を雇用していれば、彼らは自発的であるはずだ。次に意欲をそがずに、管理するにはどうすべきか?という本当の問題が湧き上がってくる」(p. 270)", ["自己啓発"]],
["ユーザエクスペリエンスのためのストーリーテリング", "http://www.amazon.co.jp/dp/4621084593", "Whitney Quesenbery\, Kevin Brooks / 丸善出版", "story_telling", "Tue Jun 27 19:27:34 +0900 2012", "2", "人が理解するには、具体的な話で雰囲気を知ってもらうのが、一番だということなんだと思う。我々かしこくないので、抽象的な論理から説明に入られるよりも具体的な話からの方がわかりやすい(中には学会であいまいでよく分からないから表示的意味論の数式書いて、というカシコイ人もいるけど...)。共感されるためには個々の思いや詳細が重要で、そのためのストーリーテリングなのだと思う。ただし、それはあくまでもリサーチに裏付けられたシナリオを表現するための手段であって、それがなければエンジニアにガツンと叩かれて終わってしまう。 \n\nこの手の本を初めて見ておもしろそうだと思ったのだけど、その期待にはそってくれずなかなか読み終わらなかった。あまり目新しいことが書いてなかったからかも。", ["UI"]],
["セキュリティはなぜやぶられたのか", "http://www.amazon.co.jp/dp/4822283100", "ブルース・シュナイアー/日経BP社", "beyond_afear", "Tue Jun 6 19:27:34 +0900 2012", "3", "セキュリティには絶対がない、リスクとのトレードオフ、結局は人、など本質的なことが多く書かれている。知識的にあまり得られたことが無いと思えるのは、いつも感じていることから腑に落ちるのが早すぎて、あまりに納得できるからだったからか。 \n\n5つのポイントを挙げているので、これを自分の会社を例に試してみた。これは自分の意見だが、ぜひ、自分の身の回りについて行ってみることをお勧めする。セキュリティは自分自身が許容するリスクで決めるべきものなので。 \n\nステップ 1. 「守るべき資産は何か」 \n\n* 誰から: 自分の社員から \n* 何を: 機密情報と位置づけられている情報。 \n* 他人から守ることや些細な情報が漏れることはここでは考えない。他人から守ることは他の対策で行っているとする。また、実際は、対策として些細な情報を漏らすのも厳格化しているが、これはそれぞれを分けるコストが高いためだと思う。 \n* 何から: 競合会社への漏洩も考えられるが、それよりも情報漏洩に対する社会的失墜が大きなリスクであろう。顧客情報そのものだけでなく、機密情報と思われる情報が漏れれば、このような会社に安心してサービスをまかせたいとは思わないという \n* どの程度: ソフトバンクでは情報漏洩した顧客に500円の商品券を配った。これは直接的なコストだが、これ以上に失った信用は大きい。ただし、記憶の風化などから、いつまでもリカバリーできないものでもないことも付け加えたい。 \n\nステップ 2. 「その資産はどのようなリスクにさらされているのか」 \n\n社員が情報を持ち出すリスク。具体的には、メールなどネットワーク経由での漏洩、USB、DVDなどへのメディアへのコピーでの漏洩、HDDの持ち出し。紙の打ち出し、画面の写真撮影は比較的小さなリスクとしてここでは扱わない。 \n\nステップ 3. 「セキュリティ対策によってリスクはどれだけ低下するのか」 \n\n* メール/Webの監視: ネットワーク経由の漏洩を低下させる。ただしリスクを0にはできない。宛先を監視するのは、社外の人と結託すれば可能だし、メールの添付内容を上司など確認するのは、トレードオフが大きすぎて(通常の送信が多すぎてチェックが行き届かず)機能しない。 \n* シンクライアント化: メディアへのコピーが困難。ただしリスクを0にはできない。方法は敢えて書かない。 \n* その他の脅威、例えば(必要な情報をコピーした)HDDの持ち出しについては無力である。 \n結局、上記二つのセキュリティ対策だけを行っても、他の脅威があれば、不正を行うものについては無力である。 \n\nステップ 4. 「セキュリティ対策にとって、どのようなリスクがもたらされるか」 \n\n* シンクライアントの実現レベルにもよるが、一般的に通常のPCに比べて性能面で制約が大きい。Excelなど事務処理をだけを行っているに人には問題ないかもしれないが、プログラマからすれば大きく影響を受ける。ただし、どこでも仕事ができる、セキュリティ対策を個人/個組織で考えなくても良いというメリットもある。 \n\nステップ 5. 「対策にはどれほどのコストとどのようなトレードオフが付随するか」 \n\n* 他の脅威がある以上、現状の対策にメリットはあまり無い(ちょっとした出来心を削減できる程度)と言える。他の脅威を続けて止めていくしか道は無い。社員を信用せずに一つ一つ止めていく。 \n\nと、つまらない結果になった。ただ、自分が思うに、根本的な問題はここには無いと思う。この手の漏洩を防ぎたいのであれば、(さほど対策をとらずに)「漏洩したものは厳罰処分」とするのが一番だと思う。そもそも漏洩する可能性は低いし、実際に漏洩後に対処した方が(全社員の被る不利益に比べ)コストは安い気がする。 \n\nまた考えるべきははなぜ社外に情報を持ち出すのかという問いである。多くの場合、“仕事が終わらないから家でやる”ではなかろうか。不正で自己の利益のために情報漏洩するのが狙いであれば、漏洩したことすら気づかないようもっとうまくやるだろう。家で仕事をする程度であれば、技術的に解決できる。これをやろうとしないのは、会社側がコスト(システム/労務費)や法務面(勤怠管理)などで今まで見てみないふりをしていた点を解決しなければならないからだ。経営者は若い頃は自分もうまくやっていたのだから、おまえ達も察しろというかもしれないが、状況は悪くなっている。察する上司やザルのセキュリティが無いのが条件なのに、自分で不正と同等の行為をするというリスクを犯してやらなければならない環境を作り上げているのだ。そして、それ以外の仕事の改善はしようともせずに。 \n\n結局、社員は不利益だけ被って、経営陣は(中身は実質無いが)対策はしたという言い訳ができる安全なところに位置することだけが社員には見え、不信感だけが増大するのである。 \n\n話題を変える。 \n\n> セキュリティは基本的にうまくはたらいている。最近、同時多発テロによって世界はまったく違うものになってしまった、特にセキュリティが大きく変わったという専門家の意見を繰り返し目にする。もちろん、不安感は強くなったし、セキュリティに期待することにも変化が見られる。ここまでは当たり前だ。問題は、脆弱だという不安感から、パニックといえるほど、何でも変えてしまおうという動きが生まれたことだ。このような考え方はとても安直なのに、安易にうけいれられ、ばかげたことや差し障りのあることを正当化する理由として使われている。 \n現実は「2001年9月10日、我々のセキュリティシステムは、大規模で複雑、効果的ながらも問題も抱えていた」なのだ。問題は深刻でもなければ、直せないほどでもなかった。基本的にきちんと機能してくれたのだ。連邦航空局は、事件発生から二時間半で米国上空の飛行禁止を完了した。ニューヨーク警察も、すぐ、このような大規模災害につきものの略奪行為などをおさえにかかった。新しい捜査権限などなくても、既に持っていた手続きとシステムだけで、FBIはテロリストをすばやく特定し、どのような計画が実行されたのかを詳しく解明した。他の組織も、一致協力して、世界各地でテロリストを逮捕し、金融資産を凍結し、活動を制限した。国の情報機関と航空セキュリティは、同時多発テロ時にうまく機能しなかったかもしれないが、全体としてはきちんと機能しているのだ。攻撃を防止できなかった -- そのとおりだ。セキュリティの失敗である -- そのとおりだ。セキュリティがぶざま、かつ徹底的に失敗した -- それは違う。 \n日常生活のあらゆる側面にさまざまなセキュリティシステムがあり、それに伴う経験とノウハウがある。完璧なものなどないが、まったくだめなものもない。我々がやらなければならないのは、何を残して何を変え、何を捨てて何を一から作り直すべきかを判断することだ。たった一回の失敗で車輪の再発明が必要だと考えるのは、くだらないプライドやおろかさを露呈するだけでなく、大間違いである。現状に問題が無いと判断するのと同じくらいの大間違いだ。(p.408) \n\nこの文章を読んだとき“原発”の文字が頭によぎった。自分の違和感を最も適切に表してくれている文章だと感じたから。セキュリティと事故は違うし、その規模も違うので“大間違い”と断定はできないが、現状の恐れからくる感情的な意見では正しく判断することができないのではないかと思っているからだ。客観的にコストとリスクを考えられるように今の世の流れはなっていないと思う。 \n\n最後に。 \n\n> 受け身でいれば、自分の代理人や他の関係者が決めたセキュリティを甘んじてうけいれなければならない。トレードオフを自分で決めたければ、他の関係者の思惑に応じ、できるかぎりの交渉をしなければならない。それしか方法は無いのだ。... 受け身のままなら、ぐちを言うのが関の山だ。(p.403) \n\nそう、ここでぐちを言うにとどまる。", ["セキュリティ"]],
["ビューティフルデータ", "http://www.amazon.co.jp/dp/4873114896/", "/オライリージャパン", "beautiful_data", "Tue Jun 17 19:26:01 +0900 2012", "3", "いろいろとおもしろい話が多かった。勉強になったのはYahooの話。データの自己発見もおもしろい考え方だったがその実装が想像できないので自分が残念。実験のデータをすべてオープンにするという考えは追試が可能というのももちろんだけど、ソーシャルな研究を加速するという意味でおもしろい。 \n\nビューティフル系は結構読んでいるけど、長いのと、つまらない話を飛ばせないのが自分にとってなんだかと思っていたけど、今回はバシバシと飛行機の中で読み飛ばせて快適だった。 \n\n下のは最後の方にあったおもしろい逸話。条件付き確率をきちんと考えましょうというコンテキストだった気がする。 \n\n> 100万人の人口で1\,000人HIV陽性の都市があるとする。HIVの試薬で、1%失敗する、すなわち100回試してHIV陰性の人を陽性とみなし、HIV陽性の人を陰性とみなしてしまうができたとする。そこで、テストを受けた人がHIV陽性だと診断されたとする。この人がウィルスを持つチャンスはどれくらいだろうか。多くの人は1%試薬が失敗するのだから、99%だと回答するだろう。実際は、陽性の人口がとても少ないので、その確率はとても低く、たったの9.9%である。(999\,000のHIV陰性のうち9\,900人が陽性とみなされ、990人の陽性の人が実際に陽性と判断される。従って、999/9\,990=9.9%なのだ。)", ["oreilly"]],
["複雑さと共に暮らす", "http://www.amazon.co.jp/dp/4788512475", "ドナルド・ノーマン/新曜社", "living_with_complexity", "Tue May 29 19:24:25 +0900 2012", "3", "そもそもシンプルさを重要としていたノーマンが、複雑さを認めようと訴える。現実は複雑であり、それは受け入れなければならない。ただし、混乱は敵だと。デザインの力で裏に隠れている概念モデルをユーザに理解させることが重要だと。記憶させるのではなく理解させるという点がミソ。ユーザも複雑さをすぐに扱えるようになるのではなく、時間をかけて学ぶ姿勢も必要。ただし、分からないときにその場で答えが出せるような環境は用意する必要がある。 \n\nおそらく要旨はこんな感じ。あとはいつもながらエピソードを通じて楽しく納得させてくれている。 \n\nあまり目新しさはなかった気もするけど、その気持ちの移り変わりには共感できる。", ["UI", "Norman"]],
["Making Software", "http://www.amazon.co.jp/dp/4873115116", "/オライリージャパン", "making_software", "Tue Feb 19 19:23:09 +0900 2012", "4", "ソフトウェア工学について何もしらずかつ懐疑的な自分にとっておもしろい本で楽しく読めた。以下のような、一見不思議とも思える内容や、何となくそう思っていたけどどこにも載っていないような内容が書かれており興味深かったので。 \n\n* コードの中身を見るよりも、どのような組織でそのコードが書かれたかを見た方がエラーがどこにあるか分かる(cf. p.190とp.400のメモ) \n* ファンクション法などによる見積り方法は、専門家の判断による見積りよりも優れていない(cf. p.44のメモ) \n* コードカバレジが多くなればリリースの品質が向上する、とは言えない。(cf. p.393のメモ) \n* コピーペーストが一概に悪いとは言えない(cf. p.501のメモ) \n* ソースコードの複雑度を調べなくてもソースコードの行数だけで十分(cf. 134のメモ) \n* TDD(Test-Driven Development)が有効と言うエビデンスはない(cf. p.201のメモ) \n* プログラミング言語の差よりも、プログラマの差の方が重要。(cf. p.241のメモ) \n* コードレビューを会議でやるのは無駄(cf. p.312のメモ) \n* パーティション、共同作業空間、個室の中で最悪なのはパーティション(cf. p.328のメモ) \n* APIの使いやすさを測定して改善したケースがある(cf. p.524のメモ) \n\nエラーがどこにありそうかの研究なんて意味があるのだろうか。このソースにバグがあると言われてもどこにあるのか分からなければ意味が無い気がする。何が問題かすら分からないのだからバグの見つける方法が無いと思うから。そして何の問題かが明かになるのは、実際にバグが出たときである。 \n\n我々は取れるデータからすぐ「量的エビデンス」的な(cf. p.21のメモ)に走りやすいが、その基礎となる理論もしくは法則(質的エビデンスと言えるのか?)が無いのであればあまりその研究に価値はないのではないかと感じた。少なくてもどちらの立場で研究してそれは何故かを言えるようにしなくては。 \n\nこの本のタイトルは当初Beautiful Evidenceとしたかったのではないか(原題はMaking Software: What Really Works\, and Why We Believe It)。 \n\n以下、自分用メモ <!--more-->\n\n> フロアーからの「なぜ“ピープルウェア”の主張がアジャイル開発方法論に受け入れられるまでにこれほどまでの時間がかかったのか」という質問に対して、デマルコが「すべてベームが悪い」と答えたのです。その趣旨は、「私たちはベームの“ソフトウェア工学の経済学”のおかげで、ソフトウェアの不良の修正にかかるコストは、修正作業が開発ライフサイクルの後になるにつれて指数関数的に増えるので、要求や仕様はできるだけ上流で確定することが正しいと洗脳されてしまった」というものでした。これでウォーターフォールに“お墨付き”が与えられてしまったというのです。 \nそれに対してベームは、なんと合意しました。そして、ウォーターフォールが妥当だったのは、宇宙システムや軍用システムのように、ユーザの要求がきっちり定義できたときだけだった。1980年代は様相が変わったと述べていたのです。(p. v) \n\n> 量的エビデンス対質的エビデンス: 誤った二項対立 \n研究に置ける議論では、調査が量的なものか質的なものかを区別するのが普通です。大まかに言うと、その違いは感心の対象とする問いにあります。量的調査は測定を中心とし、、「比較(comparison)」の質問(AはBより速いか?)、「もし～なら(if)」の問題(もしAが変わったらBは変わるか?)、「どれだけ(how much)」の問題(開発者はデバッグにどれだけの時間を費やすか?)を問うのが普通です。対照的に、質的調査は記述と分類に関係し、「なぜ(why)」の問題(なぜAはBより学びやすいか?)、「どうやって(how)」の問題(開発者はどうやって、どんな方法でデバッグにアプローチするか?)を問います。(p.21) \nまとめると、量的な調査の威力は、状況を少量の簡潔な記述で補足でき、そのため物事を非常に明解にできる場合がある、という点です。一方その不利な点は、多くの情報を無視してしまうため、結果が本当に何を意味しているのか、その結果が摘要可能なのはどの場合かの判断が難しいことが多いことです。質的な研究の威力は、その結果が現実世界の複雑さを反映し明かにしてくれる点です。その不利な点は、そのために評価がひどく難しいことです。どんな調査結果も、実権の範囲が一般化できないような狭いものであったり、観察の状況があまりに異なっているなどのために、その結果が現実世界のコンテキストとどう対応しているかが明らかでないなら、現実世界に適用することは難しいでしょう。(p.22) \n\n> その結果は、コストモデルによる見積りが専門家の判断による見積りよりも優るはずだ、という視点とは相違したものだったのです。(p.44) \n\n> 1976年から2001年にかけて、私たちは多数の間違いを犯しつつも、多くのことを学びました。間違いとしては、次のようなものがありました。 \no 環境を完全に理解する前に評価しようと試みた \no ゴールおよびモデル主導でなくデータ主導だった \no 他所の環境から導かれた他人のモデルを引き合いにして私たち自身の環境を説明した(p.67) NASAのソフトウェア工学研究所SEL \n\n> 実務環境におけるソフトウェア工学への科学的手法の適用プロセスという道のりを精選した形でお話ししましょう。 ... \n\n> 1. 適切なモデルとメトリクスに基づき、現在のプロジェクトとその環境を「特徴づける」(私たちの世界はどのように見えるか?) \n2. うまく実行されたプロジェクトの効率やその改良に関して「定量化可能な目標を設定する」(私たちの世界について何が知りたいか、そして何を成し遂げたいか?) \n3. 現在のプロジェクトに対して、「プロセスモデルの選択」、およびそれをサポートするメソッドとツールの選択を行う(この環境でこの目標のためにはどのプロセスがうまくいくか?) \n4. 「プロセスを実行」し、製品を構築し、データの収集・検証・分析を行って活動の適切さに関するリアルタイムのフィードバックを提供する(選んだプロセスの適用を通じて何が起きるか?) \n5. 「データを分析」して現在の実践を評価し、問題点を見極め、発見を記録し、将来のプロジェクト改善のための推奨点をまとめる(提案されたソリューションがどの程度うまくいったか、足らなかったのは何か、どう直すべきか?) \n6. 経験したことがらを、更新・洗練を行ったモデルの形、および今回や以前のプロジェクトから得たその他の構造化知識の形で、「パッケージ化する」。そして将来のプロジェクトで再利用できるように、経験データベースに保存する。(どうやって私たちが学んだことを組織に統合するか?) \n(p.68) 4\, 5が弱いか。これらを何回も回すのも重用なはず。 \n\n> ソフトウェア開発で最も重要なことは、プログラマが使うツールや技法ではなく、プログラマ自身の品質である。 -- ロバート・グラス「ソフトウェア開発55の真実と10のウソ」真実1 \nプログラマ個人を分析した研究によると、最も優秀なプログラマは最悪に比べ、28倍優れている。給与が能力を反映していないとすると、優秀なプログラマは、最高の掘り出し物と言える。 -- ロバート・グラス「ソフトウェア開発55の真実と10のウソ」真実2 (p.77) \n\n> * 優秀なソフトウェア開発者であるとはどういう意味なのか、あなたは実際に定義できますか? \nソフトウェア開発の一部のタスク(プログラミングなど)については、間もなく得られそうだけど、他のタスク(ソフトウェアの工数見積り)については、優れた能力を発揮する人はどのような人かを定義するのがずっと難しい \n* できるなら、ある開発者が他の人よりも優秀だということを、確実かつ効率よく見極める方法は見つけられますか? \nある種のタスクについては、専門性やタスクの困難さを測定できそうですが、他の種類のタスクについては、まだ道のりはずっと長そうです。 \n* できないなら、その代替としてツールや技術に注力すべきでしょうか? \n重要なスキルはツールや手法をマスターするスキルに変更されます。これが、ソフトウェア工数見積もりのように困難なタスクを、整合性があるとまでは言えないとしても、少なくとも不整合がより小さいタスクに変換する、1つの方法かもしれません。 \n(p.78とp.98) \n\n> C言語で書かれた非ヘッダファイルに対しては、すべての複雑度メトリクスがコード行数と高い相関を示すため、わざわざ複雑なメトリクスを使っても、単にコード行数では測れないような情報はもたらされない(p.134) \n\n> コンウェイの法則: (広義の)システムを設計する組織はどんな組織でも、その組織のコミュニケーション構造と瓜二つの構造を持った設計をしてしまうものである。 \n逸話の形のエビデンスとして、コンウェイは次のような例を引いています。研究の下請けをやっている組織に8人の人がいて、COBOLとALGOLのコンパイラを開発しました。最初に作業の難しさや所要時間の見積をした結果、5人がCOBOLの仕事に、3人がALGOLに仕事に割り当てられました。その結果製作されたCOBOLコンパイラは5つのフェーズ、ALGOLコンパイラは3つのフェーズを持つようなものでした。(p.179) \n\n> エラー予測は、組織構造をモデルとしたものが、他のモデル(コードの変更量、コードの複雑さ、依存関係、テストカバレッジ、リリース前のバグ)よりも正確に出る。(p.190 表11-1) \n\n> TDDの有効性 \n\n> * 内部品質: 確実な効果はないことを示しています。TDDは一部のメトリクス(複雑性と再利用)に関して対照群より良い結果を出しているようですが、他のメトリクス(結合度と凝縮度)はTDD治療をすると悪化することがあります。 \n* 外部品質: 改善することを示すエビデンスがある程度あります。ただし、商業プロジェクトと制御実験における支持のエビデンスは、厳密な実験構成のもの(L2とL3)に限定すると無くなってしまいます。 \n* 生産性: TDDを採用すると、険しい学習曲線が必須であり最初は生産性が落ち込む可能性があると多くの人が認めている一方で、長期的には生産性が向上するという合意はありません。<snip>臨床試験で得られた有効なエビデンスは、TDDは生産性に関して確実な効果を持たないことを示しています。 \n* テスト品質: 少なくとも悪くなることはなく、他の代替アプローチよりも良好な場合も多そうだ、ということになります。 \n(p.201以降を適当に抜粋) \n\n> * プログラミング言語に関して言えば、何らかのテキスト処理(やその類の一般的な活動)を実行する小さなプログラムに対しては少なくとも、従来の静的な言語よりもスクリプト言語の方が生産的だと言っても安全でしょう。 \n* そのようなプログラムの効率については、誤った言語の選択を避けることよりも、誤ったプログラマを避けることの方が通常ははるかに大切です。この点(および使うべき言語)を正しくする方法は多数あります。 \n* Web開発のプラットフォームに関して、教科書通りのWebベースのシステムを有能なチームが開発する場合には、どのようなフレームワークを用い、チームがそのフレームワークをどれくらいマスターしているかが、使用する言語よりもずっと重要です。(p.241) \n\n> 多くのチームはペアプログラミングを利用することで製品の品質が改善したと報告している。生産性(人月単位のコード行数)は減少したという報告や複雑なタスクをこなすときはプラスの効果があるという報告がある。 \n(p.297を適当に要約) \n\n> コードレビュー \n\n> * 60分後は欠陥発見の効率が急激に落ち込むのでやっても無駄。 \n* レビュー速度は400～500LOC/時を越えると、欠陥密度は高くならないので、速くしすぎてもだめ \n* 300～500LOCあたりで欠陥密度が下がるので大きいとダメ \n* 各自で見つけるバグの割合: ミーティングで見つけるバグの割合は、96:4なのでミーティングは不要 \n* 事前にセルフチェックをするとチェックなしで外部に指摘される時の半数を自分で見つけられる。 \n(p.312以降を適当に抜粋) \n\n> 「共同作業場か、閉じるドアか?」に対する答えは「はい」です。つまり、両者は連続スペクトルの両極端にあるにも関わらず、双方のレイアウトが、現在標準的なパーティションレイアウトに対する大きな改善をもたらすのです。 \nパーティションの問題は、それがここまで議論してきた2つの極端なレイアウトが持つ欠点のほとんどを兼ね備えているうえに、これらの長所のほとんどは持っていない、ということです。第一に、パーティションでは個室のように孤立できませんから、近くの会話で邪魔されたり注意が逸らされることが頻繁にあります。ですがパーティションはまったくの共有空間でもないので、共同作業場のような、常に互いにコーディネーションしたり意識しあえる場というわけでもありません。私の知る限りでは、ソフトウェア開発作業のための他のあらゆる選択肢よりもパーティションの方が優れている、ということを示すエビデンスを提示する文献はまったく存在しません。とにかく可能な限り、パーティションは避けるべきです。集中できること、もしくはコーディネーションできることの、いずれかを選択してください。どちらも選ばないというのは、かなり馬鹿げたことです。(p.328) \n\n> * 1番の人は最低の人に比べて約10倍の能率を実現すると期待できる \n* 1番の人は中央値の人の約2.5倍の能率を実現すると期待できる \n* 中央値より良い半数の人たちは、残りの半数の人たちより2倍以上優ると期待できる \nより重要なこととして、デマルコとリスターは、プログラミング言語、経験年数、給料、欠陥数に基づいては、誰が1番であるかを予測できないことを発見したのです。1つの強い余因子は、どこの場所で作業したか、ということでした。...デマルコとリスターは、これら驚くべき結果は相関があるというエビデンスに過ぎず、因果関係のエビデンスとは言えないことを認めています。彼らのはこう書いています。「(ここに)示したデータは、より良い作業場がより高い能力を示す人たちの助けになるであろうことを、厳密には証明はしていない。ただ単に、より高い能率で仕事する人たちは、より良い作業場を提供する組織に引き寄せられる傾向があることを示しているのかもしれない。...」(p.323) \n\n> よりカバレジが多くなれば、コード中のエラーをより多く見つけられ、それが修正されれば、リリースの品質が向上する、という主張もあり得ます。この仮定は広く信じられていますが、カバレジが多くなったときに欠陥が減る結果になることを示すエビデンスはほとんど無いのが実状です。(p.393) \n\n> 組織に関するメトリクスがソフトウェア品質の予測因子として効果的に利用可能なことを示しています。精度は86.2%、再現率は84%です。これは、私たちのこれまでの研究からすると、エラー予測に関する最も良い再現率の値だと言えます。このことが、組織のチーム構造を理解することがソフトウェアの品質について予測し理解する上での重大要因だというエビデンスを提供してくれます。このように解釈できるのは、組織に関するメトリクスが、実際のコードに対するメトリクスよりもずっと良くコードの品質を示しているからです。(p.400) \n\n> コードペーストされる場合 \n\n> * ハードウェアの違い: ドライバなど共通なコンポーネントとしてくくり出すのが難しい \n* プラットフォームの違い: APIの実装がOSなどで異なっている場合 \n* パラメタ化コード: Javaのジェネリクスが言語仕様に無かった時などプログラミング言語の問題 \n* 常用句など: JavaのSwingなどボタンをcreateし、それをコンテナに追加し、リスナで動作を割り当てるなどおプログラミングイデオムなど \n(p.501以降を適当に要約) \n\n> Visual Studio IDEの設計時に用いた3つのペルソナ: \n\n> * 便宜的開発者: さっさと実験してみる、タスク中心のアプローチ。高レベルの具体的なコンポーネントを多用するなどの習慣が特徴 \n* 実践的開発者: コード中心のアプローチと、(リファクタリングツール、ユニットテストツールなどの)自分が書くコードの頑健さや正しさに焦点を当てさせてくれるツールを用いることが特徴 \n* 体系的開発者: 開発に対する防御的アプローチと、どのような技術でもそれを使った開発に着手するまでに深く理解する必要があることが特徴(p.524) \nすべてのペルソナに対応したAPIを設計するという問題の1つの方法は、APIが使われると期待されるシナリオと、そのシナリオを実行すると考えられる開発者のタイプに注目することです。多くの場合、シナリオが決まれば開発者のタイプも決まるでしょうから、そのシナリオに対応してどのような種類のAPIを設計すべきかも決まるでしょう。(p.527)", ["ソフトウェア工学", "oreilly"]],
["プログラマが知るべき97のこと", "http://www.amazon.co.jp/dp/4873115116", "Kevlin Henney/オライリージャパン", "97_things_every_programmer_should_know", "Tue Jan 31 19:23:09 +0900 2011", "3", "USに来たときに下のURLで英語の勉強を兼ねて一日一話ずつ読もうと思うも見事に3日坊主に。 http://programmer.97things.oreilly.com/wiki/index.php/Contributions_Appearing_in_the_Book 出張時の飛行機で読む本が無いことに空港で気づき慌ててダウンロード。\n\nこれだというすごいというのは無いけど、良いことが多く書かれているという印象。と、実践できてないくせに偉そうに。印象に残ったのはビジネスロジックを書くときはドメイン(型)をしっかり定義して書こうというエッセイ。実装的にはリストを使ったものかもしれないけどそこはクラスなどで抽象化して、ビジネスロジックで何をしているのかをしっかり書くという考え。これを使えば確かにソースで意図が分かるし、型により静的なエラーも防げる。\n\nIDEとか使わずにコマンドを使おうというのも多い印象だけど、IDEを使うのが当然だから書かれているのだろう。自分のように使いたくても、いつまでもEmacsから抜けきれない人からしたらIDEで全然良い気もするけど。\n\nところで、iBook/iPadで読んだのだけど、何かの操作ミスで表紙に戻ることが多数。はっきり言って読みづらかった。\n\n次は、PMでも読もうかと思いつつも三日坊主の予感。 http://pm.97things.oreilly.com/wiki/index.php/Main_Page ", ["プログラマ", "oreilly"]],
["パブリックスピーカーの告白", "http://www.amazon.co.jp/dp/487311473X", "Scott Berkun/オライリージャパン", "confessions_of_a_public_speaker", "Tue Jan 2 19:21:16 +0900 2011", "3", "イノベーションの神話、アート・オブ・プロジェクトマネージメントの著者で、この著者が書いたからという理由だけで買った本。好きな映画監督が撮ったからという理由で見るような感覚に近いし、安定した結果が得られることもうれしい理由。 \n\n特に目から鱗ということはなく大事な事をしっかりと書いているのだけど、この人の本の特徴で読むのが楽しい。場所を舞台に見立てとても大切にしている所が印象的だった。 \n\n 個人的にプレゼンに大事なことは、誰に向かっての講演なのか(前提としてよい知識は何か)、彼らは何を求めているのかを考えること、そしてひたすら準備。あとは内容の問題となる。まれにおもしろい内容を持っているのに、プレゼンテーションで台無しにしているものがあるけど(多くの場合、台無しのプレゼンテーションでは内容が良いかどうかすら判断出来ない)、この本に興味を持つような人はそういうレベルではないはず。 \n\n自分のプレゼンテクニックの土台は高専の卒研発表時に指導教官に丁寧に教えてもらった所にある。かなり有用で、学部の発表などでも好評を博した思い出があるのだけど、段々記憶から薄れたせいか、プレゼンの準備を怠るようになってきたからか、最近ヘボい気がする。がんばろう。", ["プレゼンテーション", "oreilly", "Berkun"]],
["言語設計者たちが考えること", "http://www.amazon.co.jp/dp/4873114713", "Federico Biancuzzi\, Shane Warden /オライリージャパン", "masterminds_of_programming", "Tue Dec 5 19:21:16 +0900 2010", "3", "色々な言語の設計者のインタビュー。言語マニアにはウハウハかと思ったけど、自分はそこまででもないからか、そこまで楽しめなかった。残念。でも、言語に対する思いや、その背景に触れることができるのは、確かにおもしろい。Eiffelは昔から良い言語だと思っていたのだけど、設計については当たり前のことをやっただけのこと(半日でコアを考えた)というのだから、すごいの一言。\n\n本のメモをTwitterで取ろうと試みたけど、結局最初の一回しかしなかった。\n\n> 優れたプログラマは、優れたプログラムを迅速に開発します。...質の悪いプログラマは問題について語りたがり、コードの記述よりも計画に時間を費やし、コードの記述やデバッグ以外のキャリアを積んでいくのです。p.82 ", ["プログラマ", "oreilly"]],
["これからの「正義」の話をしよう", "http://www.amazon.co.jp/dp/4152091312", "Michael J. Sandel 早川書房", "justice", "Tue May 21 19:19:41 +0900 2010", "4", "Webでダウンロードした動画を英語で見てたけど、学生との具体的な討議以外は分からず悶々としていたので、本を購入。本を読んで分かったけど、この内容は確かに自分には分かるはずがないと。日本語で読んでもようやくついていけるかどうかくらいの内容だ。飛行機の中で読むにはちょうど良くてあっと言う間に読み終わる。 \n\n原題“Justice --What's the Right Thing to Do?--”のとおり“正義とは何か”言い換えれば“何が正しいのか”を考えるために“幸福”、“自由”、“美徳”について考えていく。“幸福を最大化するためには何でも許されるのか”という問いから、“何にも犯されない尊重すべき人権が存在する”という帰結を。“自由であることが最も重要なのか”という観点から“社会の一員として果たすべきことが存在する”問題点を。“道徳”からは次のことを。ものごとは複雑であり、中立を気取っていても結局いずれかのポジションを取らなければ議論できない(e.g. 中絶\, 同性愛)。また、議論して結局は双方が合意に至らなくても、理解していくことが重要だという考えに共感。宗教感など触れることをタブー視するよりも、その様々なバックグラウンドからの物の見方を豊かに捉えた方が実り多いものが得れるだろう。 \n\nこのような本を読むのは人生を豊に生きるために良いことだと思う。 \n\n機会の平等化は結局実現できないのだから、生じた格差を分配して埋めようという考え方はおもしろいと思った(ジョン・ロールズによる格差原理)。 \n\n一見単純な事象も根本に位置する問題は複雑であることが分かる。次のことを簡単に“ばかな”で済ませられなくなる。 \n\n* 大学がマイノリティな人種の入学を保護するため、入学試験の結果がそれ以上だった白人を不合格にする。 \n* クローゼットに隠れている友人を殺しにきた殺人犯に“今はいない”と嘘を着くこと。 \n* 台風などの災害でニュースキャスターが“幸い、日本人の負傷者はいませんでした。”と言うこと。 \n\n正義に関する様々な考え方が示されてくると、著者の考えが知りたいという欲求が募ってくる。そして最後の最後に著者の考えが示されると、コロッとその考えに同意してしまう。うまく書かれている。どちらかと言えば、小さな政府や自由経済が良いと思っていたのだけど、それだけではうまく機能しない多くのことを示されることで、考えを新たにしてしまった。\n\nこの本をどこで知ったのか忘れたけど、そうとう売れているようで、2010/5/25 初版発行で、2010/7/12は37版だった。 \n\nアリストテレスの物の目的から物の妥当な割り当てという論理(目的論的な論法)は研究の考え方に使えそうだ(cf. p.243のメモ) \n\n以下、自分用メモ\n\n> 最もうまい笛吹きに最もよい笛を与える明白な理由は、そうすることで最もよい音楽が生みだされ、我々聴衆がより幸せになるからではないだろうか。アリストテレスの挙げる理由は違う。彼の考えでは、最もよい笛が最もよい笛吹きに与えられるべきなのは、笛は“そのために”--うまく演奏されるために--存在するからだ。 \n笛の目的は優れた音楽を生みだすことだ。この目的を最もうまく実現できる人が、最もよい笛を持つべきなのである。(p.243)", ["経済"]],
["情熱プログラマー", "http://www.amazon.co.jp/dp/4274067939", "Chad Fowler/オーム社", "passionate_programmer", "Tue Jul 16 19:17:33 +0900 2010", "3", "プログラマーのための自己啓発本。一言で言えば、“今やれ”ということだと思う。USの人の感覚は自分の感覚と近くて共感できる。読者の引き付け方がうまくて、“おまえらプログラマは自分が他人より優れいているのに評価されていないと思っているのだろう?分かるよ。でも、会社から見たら...”という感じで共感しつつも納得をせざる得ないよう話を持っていっている。著者の葛藤の経験がうまく表現されていると思う。“自分が最高だと思っている井の中から外に飛び出して、最高と思える人たちの下で自分が一番下手くそと感じる環境に飛び込もう”という文章はまさにそのとおり。まさにその環境にいる身としては、そういうのを知ると、自分も含めてまわりの人を評価するのがバカバカしくなる。 \n\n以下、興味が沸いたサイト。 \nTopCoder.com: プログラミングコンテストのサイト。練習問題も多い。\nCode Kata(codekata.pragprog.com): 達人プログラマ(Progmatic Programmer)への道(演習問題)", ["自己啓発"]],
["ピーターの法則", "http://www.amazon.co.jp/dp/4478760853", "ローレンス・J・ピーター / ダイヤモンド社", "peter_principle", "Tue Jun 30 19:17:33 +0900 2010", "2", "最初は仕事ができる人でも、昇進していく度に異なる要素が求められるために、いつかは適合しない所で昇進が止まる。それは、その役職で無能なことを意味するため、無能な人で役職が埋め尽くされることになる。本文では次のように言っている。\n\n* 階層社会では、全ての人は昇進を重ね、おのおのの無能レベルに到達する。\n* やがて、あらゆるポストは、職責を果たせない無能な人間によって占められる。\n* 仕事は、まだ無能レベルに達していないものによって行われている。 \n\nこの法則を知ったときに興味深くて、この本を買ったのだけど、この本について言えば、上の内容だけを知っていれば、他に得るものは無かった。ほとんどが負の内容で尽くされており、読んでいるとイライラすることが多かった。 \n\n本では昇進を断って、自分にとってベストな仕事をし続けるのが良いと言っている。そうなのだろうけど、新しい仕事にチャレンジしないことを意味しているし、給料も上がらない。給料に関しては、そもそも昇進が管理職、経営職に昇っていくことになっているのが問題点なのだろう。同じ、仕事をしている人でも、昇進すれば(昇進と呼ぶのか知らないが)、給料だけは上がっていくという仕組みの方が健全のような気がする。たまたまその人にとって向いている仕事が管理業務なのか、手を動かす仕事なのか。仕事の内容によって給料が異なるのは当然としても、職種によって明らかな差があるのも不自然な気がする。手を動かす仕事が、そこら辺の管理業務よりも価値が高い場合も多々ある気がする。 \n\n以下、自分用メモ <!--more-->\n\n> 無能な上司は無能な部下を昇進させる(p.45) \n\n> 社員が有能か無能かを決定するのは、外部の人間ではなく、その組織の内部にいる上司です。もし上司が有能なら、部下の労働の成果を見て評価するでしょう。たとえば、治療を適切に行なったとか、ソーセージを作ったとか、テーブルの足を取り付けたとか、組織の目的の達成に向けて何をしたかが問われます。つまり、有能な上司はアウトプット(生み出したもの)で部下を評価するのです。 \nしかし、無能レベルに達してしまった上司の場合は、組織の自己都合という尺度で、部下が有能かどうかを判断します。つまり、組織の規則や儀礼や様式を支える行動こそが有能のあかしとされるわけです。迅速であること、丁寧であること、年長者に礼儀正しく接すること、社内文書を適切に処理できることなどが高く評価されます。つまり、無能な上司は部下ををインプット(取り入れたもの)で評価するのです。 \n\n> *「ロックマンは頼りになる」\n* 「ルーブリックは業務の円滑な運営に貢献している」\n* 「ルターは几帳面なヤツだ」\n* 「トラッジェンの仕事は堅実で安定している」\n* 「フレンドリーは同僚と協調してよくやっている」 \nこのような例では、組織と調和していることの方が、提供した仕事の内容よりも高く評価されています。これが「ピーターの本末転倒」の意味するところです。", ["チーム"]],
["1分間リーダーシップ", "http://www.amazon.co.jp/dp/4478360073", "K.ブランチャード / ダイヤモンド社", "leadership_and_the_one_minute_manager", "Tue Jun 28 19:17:33 +0900 2010", "3", "飛行機のお供にと、本屋で色々な本を買っているついでに色気が出て購入。薄い本でサラッと読むには良い感じ。実際、快速で東京駅から海浜幕張までの間で読み終える。30分程度か。 \n\n人に応じて、さらに同じ人でも分野によって異なるリーダーシップを発揮すると良い、という主題。 \n\n以下、p.78の表\n\n発達段階(適性能力\, やる気)| 適切なリーダーシップ・スタイル(名前\, 概要) \nD1: (低\, 高)| S1: (指示型\, 細かく指示する、コントロールする、監督する) \nD2: (中\, 低)| S2: (コーチ型\, 指示する\, 援助する) \nD3: (高\, まちまち)| S3: (援助型\, 褒める、聞く、促す)\nD4: (高\, 高)| S4: (委任型\, 日常の業務処理を委任する) \n\nダメな人は逆のパターン(分からないのに放っておいたり、できるのにマイクロマネージメントしたり)に陥るというのは、納得。", ["チーム"]],
["プレイフル・シンキング", "http://www.amazon.co.jp/dp/488335220X", "上田 信行 / 宣伝会議", "playful_thinking", "Tue Jun 14 19:17:33 +0900 2010", "3", "著者の上田さんとは同じラボということでお会いして、研究のお話を聞いて、おもしろそうと食いついて購入。自分自身なんとなくそう感じていることが言葉でより明確に説明されていて、あっという間に読み終えた。何でも楽しくチャレンジする気持ちが重要なのだと思う。楽しいことは、あたり前だけど苦にならない。何でも楽しむためには、自分で自分の壁を作らない。自分にできるかと悩むよりも、どうやったら、誰とやればできるだろう、と考える。つまらない仕事と考えずに、この仕事を通して何を自分が吸収するのかを考える。 \n\nIDEOの人の本を読んだときにも思ったのだけど、理想の職場とは、各々優れている分野の人が協力して、ひとりでは決してなし得ないほど優れたものを作り上げていく場所だと思う。それに必要なのは、能力の他に各々を尊重する気持ちだと思う。能力がないとつい尊重する気持ちも薄れてしまうのが自分の弱点のような気がする。こちらの人は能力がない自分に対してもとても紳士的だ。能力以前に人格をとても大切にしている。それが仕事をする上で、チームで仕事をする上でとても重要なことなのだと思う。目の前の仕事よりも重要な「人との関係」を少し考え直さなければとも思った。 幸い今の職場はこのような理想的な環境なので、多くの気持ちをここで変えていきたい。まわりの評価を気にする小さい人間から脱却したいところ。 \n\n明日の仕事の話はせずに5年後、10年後のビジョンを語り合うパーティには興味津々。まずは自分も他人に何かを考えさせるきっかけを作り出せる人になりたい。 \n\np.s. それでも自分自身を変えるのは難しい。何かルールを作ると効果的な場合もある。例えば、映画のイエスマンではないけれど、「誘われたパーティには必ずいく」というルールを作っておくと、忙しいとか面倒とかの理由を許さない。行けば必ずおもしろいことはあるし、得られるものも大きい。行きたくないと思っているものほど、そのような傾向にある気もする。これは、行きたくないのは、通常の自分とかけ離れているので不安が大きいからで、そこに行けば全く異なる世界を体験するので世界が広がるからだと思う。 \n\n以下、自分用メモ。<!--more--> \n\n> はじめての仕事に向き合ったとき、「この仕事、私にできるだろうか」と不安にためらう人と、「ぜひやってみたい」と意欲を見せる人がいる。その違いは、「新しいことに挑戦して、現状を変えてしまうことへの恐怖心があるかないか」であると述べてきた。...これらの2つのタイプには、自分の能力や成長に対して抱いているイメージに大きな違いがあるとしている。変化を怖れる人は、「努力して文字分は変わらないのではないか」と思い、変化を楽しめる人は、「努力すれば自分はいくらでも変われる」と思う傾向がある。(p.34) \n\n> 人がプレイフルであることを阻害しているのは、自分が変わっていけるという予感をあまり持つことができない、硬直した心のあり方なのである。(p.35) \n\n> 「よく見せたい」と「よくなりたい」では言葉は似ているが意味合いが全く異なる。「よく見せたい」という気持ちは、固定的知能観をもつフィックストマインドセットの人に見られる。 \n固定的知能観の人にとって、自分を評価するのは「他人」である。いまの自分が他人からどう見られるのかをとても気にしており、できるだけよく見せたいと思う。成果やパフォーマンスをとても気にして、自分の評価を落とすような失敗や失態を非常に恐れるのである。 \nそれに対して、「よくなりたい」という気持ちは成長的知能観をもつグロウスマインドセットの人に見られる。成長的知能観の人は、自分の能力がどんどん伸びていくことを知っているので、いまの自分が他人からどう思われるかにはあまり興味が無い。それよりも、もっと成長したいと思っている。自分を評価するのは「自分自身」であり、仕事を選ぶ基準も、この仕事は自分にとっておもしろいか、自分のためになるか、自分はこの仕事から何を学べるか、である。知的好奇心が旺盛なので、これまでと同じ仕事のやり方ではつまらなく感じてしまう。新しいことや、ちょっと背伸びした仕事に取り組んで、もっと成長したいという意欲にあふれている。(p.37) \n\n> 僕たちは全知全能ではないのだから、そもそもひとりでできることは限られている。それをひとりでやろうとすることは間違っているのかもしれない。できないなら勉強してできるようになればいい、とも教えられてきたけど、できないことをゼロからはじめるのは時間がかかるし、それこそ大きなプレッシャーになる。それに、もし僕が1年かけて統計学の勉強をしたとしても、専門家の仕事には到底かなうはずもないし、専門家に頼んだ方がずっとクオリティの高い成果が得られるだろう。その分僕の研究のクオリティも高まるだろうということは、考えてみれば当然のことなのだ。 \nよりよい仕事をすることを第一に考えれば、ひとりでやるかどうかは大した問題ではない。それよりも、それぞれの得意分野をもちよって一緒に課題解決にあたったほうが、ひとりの力ではできないことを実現できるのである。(p.121) \n\n> 仲間と一緒に仕事をしたがらない人のなかには、一緒に仕事をすると自分のやりたいようにできなくなってしまうから嫌だ、あれもこれもと仕事を押し付けられるから面倒だ、と思っている人もいるかもしれない。もっともな意見のようにも聞こえるけれど、「それって自分の枠組みを変えたくないからそう思うのではないだろうか」と自問自答してみてほしい。 \nたしかに、誰かと一緒に仕事をすることであなたの業務負担が増え、面倒だなと思うこともあるだろう。でも、あなたが自分の枠組みを変えないということは、あなたが変わっていくチャンスを見捨てているということ、あなた自身の成長を止めているということでもある。それはすごくもったいないことなのだ。 \n誰かと協働していくということは、異なる意見や価値観を受け入れるために、必要に応じて自分の枠を広げていくことでもある。「こんな考え方もあるのか」という新しい価値観と出会うことであり、それを受け入れることができる自分の可能性を発見することでもある。「あなたが変化していく」ということには無限の可能性が秘められている。そうやってあなたが変化していけるのも、他者の存在があるからなのである。(p.128)", ["チーム"]],
["セキュリティの神話", "http://www.amazon.co.jp/dp/4873114519", "John Viega  / オライリージャパン", "mice_of_security", "Tue May 14 19:17:33 +0900 2010", "3", "イノベーションの神話のように、通常の人が普通そうだろうと思っているようなことが実は違うという目から鱗が出るような話を期待していたのだけど、ちょっとがっかり。各トピックに対してブログレベルの記事で自分の意見を述べているという感じ。トピックの内容は主にセキュリティ業界の実態。著者自身もその業界にいるので、何かうさん臭い香りもする。 \n\nそれでも良い個所もあった気がする(もう忘れたけど)。うれしかったのは、McAfeeの副社長と感覚がそう遠く離れてないことが分かったこと。たとえばMacのセキュリティホールを突くなんて悪者のインセンティブが働かないだろうからアンチウィルスなんて要らないというもの。そもそもプライベートではWindowsでも入れてないし(滅多に使わないけど)。「NATがあって変な所に行かないんだから別に要らないんじゃない?」って同じ仕事をした違う会社に言ったときの、すごい異様な目で見られたのは忘れられない。そもそも当時はLinuxだったし無敵でしょ(誰も相手にしないという意味で)。って言っている人に限って、ブラウザのセキュリティホールとかでやられるんだろうな、と思いながら今に至る。あとP2PするならVMWareとか仮想マシンでやれって前々から言っていたことが(たしか)書かれていたりしてうれしかった。 \n\n感心したのは、ユーザの実態を把握していること。自分が業界にいて、ほぼ全員がセキュリティに関して興味を持っていないという、ことを理解しているのはすごいと思う。自分の知識が邪魔をして、つい、甘えを持ってしまいそう(ユーザの知識や関心を前提としてしまいそう)になるところを、冷静にとらえているなあという印象を持った。", ["セキュリティ", "oreilly"]],
["モノの意味", "http://www.amazon.co.jp/dp/441430623X", "M.チクセントミハイ\, E.ロックバーグ=ハルトン/誠信書房", "meaning_of_thing", "Tue Apr 20 19:16:06 +0900 2010", "3", "本が電子ブックに、写真がデジタル画像に置き換わり、テレビは壁に映し出されるようになったとき、人間に必要な物は生活に必要最小限な衣食住以外に何が必要になってくるのか。電子的なものではダメで物でなければならない理由は何にあるのか。この疑問の答えのヒントを求めて読んでみた。 \n「あなたの重要なものはなにか。そして、それがもしなくなったらどう思うか」という問いを様々な家庭に行い、その分析を通して、人のものに対する思いを調査していく。 \n著者は、フロー体験のチクセントミハイ。ものは単に自己の所有物にするためのものではなく、それを介して何らかの経験を生み出すもの、そして経験を呼び出す媒介になるものなのだと思った。だからこそ、人はものを大切に取っておくのだろう。快楽に浸り続けることではなく、自分が何かに没頭していることが人を豊かにし、またそれこそが人間の幸せだというフロー体験の理論の基礎がこの辺から出来ているのだろうと想像した。 \n抽象的で退屈な1\, 2章をどうにか切り抜けると、家の中でもっとも大切にしている物とようやくおもしろくなって、のめりこめる。 \n人はどうして物を大事に取っておくのかという理由がある程度俯瞰できて良かった。(cf. p.108 表3-2のメモ) \n\n以下、自分用メモ。<!--more--> \n\n> 社会学的視点では、この状況は人が「客体化された現実」として直面する社会的に構成された「象徴世界」ということばで語られてきた(Schutz\, 1960; Berger & Luckman\, 1967)。プラグマティズム哲学において、それは意味の三要素として反映されている。私たちがあるものを解釈するとき、それはまず記号として作用する(第一の要素)、それはあることを意味する(第二の要素)、さらに一定の解釈的な思考と感情を生み出す(第三の要素)。解釈を通して創出された記号は、最初の記号と同等のものかもしれないし、さらに発展したものかもしれない(Peirce\, 1931-5\, II\, p.228)。たとえば、われわれがインタビューした一人のおばさんは、夫と彼女自身の祖母からもらった結婚指輪を特別なものとしてあげており、それを孫とその婚約者に結婚プレゼントして与えた。これらの指輪は記号であり(第一の要素)、この女性にとって五世代にわたる家族の継続を意味する(第二の要素)。これらの記号の第三の要素は、出会った人びとや出来事についての思い出であり、回想を通して喚起される思考や感情である。回想という特定の行為において、記憶や思考、感情はまったく新しいものではないかもしれない。しかし、彼女の生涯を通して、これらの指輪はたとえ同じ物理的形態を保持しようとも、常に「成長」、発展し、新しい意味を帯び続け、それは現在もなお続いている。(p.60) \n\n> 物の獲得と維持は、容易に人の生活を埋め尽くし、他のことをする時間を奪い、挙句の果てにはその人の全ての心的エネルギーを使い果たしているその物自体まで使えなくなってしまう。そのような事態に陥ってしまうと、ものの適応的価値は逆転する。物は心的エネルギーを解放するのではなく、それを無益な仕事に縛り付けてしまう。以前は道具だった物が、その使用者を奴隷にしてしまうのである。 \n物は人間の行為や思考の範囲を拡大したり、制限したりすることで、人間のなし得ることに影響を与える。そして、人間のすることはその人が何であるかということと大いに関わっているため、物は事故発達に決定的影響力を持つ。だからこそ、人と物との間に存在する関係の型を理解することが極めて重要なのである。(p.64) \n\n> なぜ家具が特別と考えられるかについて、全部で638の意味が挙げられた。これらのうち、最も多くの人があげたのが、「思い出」(15%)、「様式」などの外見(12%)、「経験」(11%)である。実利的な物の「有用性」に焦点を当てたものは5%にすぎなかった。自己との関係を重要性を強調した物は全体の17%であり、回答者の肉親との関係した物が15%であった。それ以外の血縁や家族以外との絆を強調した回答は、それぞれ3%にとどまった。(p.77) \n\n> 表3-2 大切なものが持つ意味のカテゴリーと回答者の割合(N=315) (p.108) \nA. 人物に関わる理由 \n\n> 1. 自己 87% \n2. 肉親 82% (配偶者 34%\, 私たち 33%\, 子 35%\, 母親 27%\, 父親 20%\, 兄弟 11%\, 祖父母 12%\, 孫 7%\, 家族全体 22%) \n3. 親族 23% (親戚 9%\, 祖先 7%\, 義理の家族 11%) \n4. 家族以外 40% (友人 24%\, 仲間 9%\, ヒーロー 20%) \n\n> B. 人物以外の理由 \n\n> 1. 思い出 74% (記念 52%\, 追憶 46%\, 家宝 20%\, おみやげ 22%) \n2. つながり 52% (民族的 9%\, 宗教的 7%\, 収集品 15%\, 贈り物 40%) \n3. 経験 86% (楽しみ 79%\, 進行中のできごと 48%\, 解放感 23%) \n4. 内的特質 62%(工芸品 34%\, 唯一性 17%\, 物理的特徴 46%) \n5. 様式 60% \n6. 実用性 49% \n7. 個人的価値 53% (理想の体現 24%\, 功績 31%\, 擬人化 15%) \n\n> 将来の家庭について重要なことは、部屋数の多さとか、そこにある電器製品の点数ではない。重要なことはそこに住む人びとの心的活動である。その活動が、自身にとって、そして他者にとって敵対的でないか目的を共有しているという充実感と生活規範を与えるべくはぐくまれた目標に投資されるものであるかである。われわれは本当に本質的な問題を考慮しないまま、瑣末な技術的改良にあまりにも心を煩わされている。(p.184) \n\n> 彼らは、われわれに自分は物質主義者ではなく、物は何の意味も持たないと語った。重要なのは物ではなく人だというのである。「あなたは、物ではなく人についてわたしがどう感じているかを尋ねるべきですよ」と彼らは言った。人間関係の方が物の所有よりもずっと重要だと主張し、事実、彼らは特別なものを何もあげなかったし、せいぜい自分たちの親しい人の写真を一、二枚あげるくらいだった。人間同士の直接的なつながりを重視し、物による象徴的な媒介作用を拒否するのも、最初はもっともだと思った。しかし、次第にわれわれは、物への意味を拒否する人たちが、人間関係の親密なネットワークをも欠いていることに気づき始めた。物との関わりよりも友情を声高に誉めそやす人たちの方が、もっとも孤独で阻害されているように思われた。もちろん、これは愛する物との関係を客体化するのに物が不可欠だという意味ではない。しかし、人とのつながりを持つ人たちは、具体的なものの中にそのつながりを見出す傾向がある。(p.209) \n\n> 個人的自己が「私は何者か」という問いに対する答えの役目をはたし、社会的自己が「あなたや私たちは何者か」という問いに答えるとすれば、自己の第三水準である宇宙的自己は、「それは何なのか、なぜなのか」という問いに答えてくれるように思われる。(p.243) \n\n> いや、わたしゃどんなものにも<<愛着>>なんかないよ。あなたも棺桶に片足を突っ込むような年になって、自分自身そのものに愛着がなくなれば、同じように感じるはずよ。あなたはまだ若いから分からないだろうけど。 \n年をとるにつれ、その人の経験と結びつく物や意味への移行が確かに生じるようだ。われわれが研究した地域では、子供たちはまず物質世界を把握し、その世界を自分自身に引き寄せることによって、物とのかかわりを持つ。彼らは心的エネルギーの成果よりも、エネルギーその物を使用し統制することに関心があり、それゆえ発達の誘因として、あるいは個人的自己の発達に向かう活動を楽しむ手段として、物との経験を強調する。人は年齢とともに、心的活動が<<成果>>をもたらすこと、また涵養が成果と無関係な過程を強調することから目標試行的な過程へと移行することを、いっそう理解するようになる。記憶や追憶はいっそう顕著なものとなる。つまり、人は過去を構築し始めると、次に重要になるのは過去の自己や経験を保存するという目標である。(p.246) \n\n> 的を射た説明になっているかわかりませんが、多分に感傷的なものです。いくつかの点で私は感傷的な人間です。私にとって、それらは両親や過去とのつながりを示してくれます。私はこれらのものすべてを人や時期、ことによれば何があったかまでを思い出すことができます。骨董屋さんで買った時計とはわけが違うのです。これらのものの多くは人からもらったもので、それぞれ意味があります。(p.290)", ["UI"]],
["第1感 「最初の2秒」の「なんとなく」が正しい", "http://www.amazon.co.jp/dp/4334961886", "M・グラッドウェル/光文社", "blink", "Tue Apr 5 19:14:40 +0900 2010", "3", "この人の本はおもしろい。多彩な例の一つ一つがおもしろい。 \n人がもつ“第一印象”について良い面と悪い面を多くの例を用いて書いている。そして、第一印象は危うい。状況や偏見や無意識の感情に大いに左右される。しかもそれが人間の決断に重大な影響を及ぼしている。特に強い第一印象を持つと考えることをやめるというのは危険な気がする。一度強くもった誤った判断はなかなか覆せないことは確かに多い。第一印象を覆すのはとても難しい。 \n\n以下、自分用メモ。<!--more--> \n\nITAテストの例。次の単語を「ヨーロッパ系アメリカ人もしくは善」か「アフリカ系アメリカ人または悪」に分けるのは簡単だと思う。 \n\n* 傷つける \n* 凶悪 \n* 輝かしい \n* (黒人の写真) \n* (白人の写真) \n* 素晴らしい \n\n> でもこれを「ヨーロッパ系アメリカ人もしくは悪」か「アフリカ系アメリカ人または善」に分けるとなるとあっというまに難しくなる。無意識に黒人と悪をもしくは白人と善を結びつけていることが分かる。(p.88の例) \n\n> 人種のIATを何度も受けて、瞬時に答えられない項目にもっと速く反応しようと努力しても、結果が変わらないのは事実だ。だがテストの前にマーティン・ルーサー・キングやネルソン・マンデラ、コリン・パウエルといった立派な黒人の写真を見せたり、記事を読ませると、不思議なことに反応に要する時間は変わる。黒人と肯定的な事柄をすんなり結びつけられるのだ。IATの考案者バナジが言う。「毎日IATを受ける学生がいた。大学にくるなりテストを受けて、帰るときにデータを持ち帰っていた。ある日彼の中で黒人と肯定的な事柄が結びついた。その学生は『おかしいですね。今までまったく変わらなかったのに』と言っていた。私たちはIATの得点を何とか操作しようとしたが、できなかった。しかし、その学生は陸上競技の選手で、その日の朝、オリンピックのレースを見てきたといっていた」 \n第一印象は経験と環境から生まれる。つまり第一印象を構成する経験を変えれば、第一印象を生む輪切りの方法を変えられるのだ。(p.102) \n\n> プロの第一印象は「違う」のだ。普通の人と好みが違うという意味ではない。そういうこともあるにはあるが、何かに秀でると、好みは難解で複雑になる。そして自分の好みについて的確な説明をできるのはプロだけなのである。(p.183) 自分が全てにおいてアマチュアであることを痛感。好き・嫌いの感覚は示せるけど、どうして好きか、どこが嫌いかを明確に言うことができない。", ["マーケティング"]],
["小さなチーム、大きな仕事", "http://www.amazon.co.jp/dp/4153200115", "ジェイソン フリード\, デイヴィッド・ハイネマイヤー ハンソン/早川書房", "37_signals", "Tue Apr 5 19:12:04 +0900 2010", "3", "小気味よくてサラッと読める。かつ、メッセージに共感する所が多い。文章自体を簡潔に保つため半分に削ったらしいけど、そこがサラッとしすぎている原因かもしれない。もう少し具体例などを豊富にすると、著者の人となりがわかって親近感が沸いたと思う。 \n\n以下、自分用メモ\n\n> 従業員はガキではない \n人を子供扱いすれば、子供のようなしごとしかしない。これが多くの会社、多くの管理職の人の扱いだ。従業員は何をするにも上司の許しがいる。本の少しの出費にもいちいち許可が必要だ。クソをしに行くのに許可証が必要でないのが不思議なくらいだ。 \n何にでも許可を必要とする環境は「何も自分で考えない文化」をつくる。上司対部下の構造を生み、そこに信頼関係などない。 \n仕事中にSNSをチェックしたり、ユーチューブを見たりするのを禁止して何になるというのだろう。そうしたところで部下は必ず他の気晴らしを見つけるだけだ。 \nそもそも、あなたはみっちり一日八時間の仕事を従業員からは得られない。八時間の従業時間かもしれないが、それは八時間の仕事ということではない。人には気分転換が必要だ。ちょっとフェイスブックやユーチューブを見たところで問題はないはずだ。 \nその上、そんなことにあなたが費やす時間と費用を考えてみよう。監視ソフトのコストは?本当に価値ある仕事のかわりに他の社員を監視している仕事のムダは?誰も読まないルールブック作りに何時間かけているだろうか。換算してみると、社員と信頼関係をなくすことはかなり不経済だと気づくだろう。(p.167) \n\n> 大げさに反応しない \nまずいことが起こると、新しい規則を作りたくなるかもしれない。「誰かが短パンをはいてきた?服装規程が必要じゃないか!」いや、そうではなくて、短パンをはいてきた奴に忠告すればいいだけの話だ。 \n規則とはそんなに起こらない状況に会社が大げさに反応した傷痕だ。一人の間違いに対するみんなへの罰だ。 \nこうやって官僚制度は生まれる。誰かがそれを望んだわけではないが、いつの間にか社の一部となっている。一つ一つの規則(きずあと)と共に。 \nだから大げさな反応はやめなくてはならない。ただ一人の間違いから規則を作らないことだ。規則とは何度でもありえる状況を想定して作るものだ。(p.169)", ["自己啓発"]],
["20歳のときに知っておきたかったこと", "http://www.amazon.co.jp/dp/4484101017", "ティナ・シーリグ/阪急コミュニケーションズ", "what_i_wish_i_knew_when_i_was_20", "Tue Apr 5 19:10:10 +0900 2010", "4", "良い本だった。最初の「手元に5ドルあります。二時間でできるだけ増やせと言われたら、みなさんはどうしますか?」という問いの答えがおもしろく一気に惹き込まれる。本を読むのが楽しいと思える良い時間を作ってもらった。賢いアイデアに触れるのは何よりの喜びと自分自身を再確認。何か新しいものを作りたいと思っている人ならこういうアイデアに触れつづけることは重要だと思う。その後は、グサリグサリと突き刺さる良い言葉の連発。それはまさしく自分がダメだと思っているところを、もしくはこうなりたいと思っているにもかかわらずできていない所をズバリと突かれているからだと思う。20歳のときに知りたかったとあるけど、社会人数年してからの方がありがたみがわかると思う。そういう意味では何回も読み返したい本。自分を奮い立たせるにも良い気がする。興味深い豊富な具体例で納得させられた。アイデアの出し方についても良い方法を教えてもらった気もする。 \n\n以下、自分用メモ <!--more-->\n\n> 「不可能に思えること」に挑戦する方法。まず自分たちに関係のある課題を挙げる。例えばガス会社の経営幹部であれば、社内で省エネをいかに実践するか。つぎにグループを少人数にのチームに分け、最高の案と最悪の案を考える。最高の案とは、問題が見事に解決できそうな案。最悪の案とは、成果が上がらずかえって問題が悪化したりするような案。まとめた結果を「ベスト」と「ワースト」として提出させるが、「ベスト」な案をシュレッダーにかけズダズダする。次に「ワースト」の案に対しこの最悪の案を練り直して最高の案にすることを指示する。そうすると、「従業員のひとりひとりに使用電力を割り当て、それを越えたら罰金を取る」が「使用電力が下回った場合、現金で払い戻し、余畳分を売買することを可能にする」というような案になる。(p.50を適当なまとめ) \n\n> 「アイデアに悪いものなどない」と「他の人のアイデアを発展させる」という二つの命題を両立させる、素晴らしい演習を編み出しました。まず、グループを二人組に分けます。ひとりがパーティを計画し、もうひとりに提案します。提案された方は、どんなアイデアも否定し、どうしてダメなのか理由を言わなくてはなりません。たとえば、「土曜のよるにパーティをしよう」と誘われたら、「ダメ。美容院に行かなくてはいけないから」などと答えるのです。これを二、三分続けると、提案する方はフラストレーションが溜まりますが、その一方で、何とか相手にイエスといわせるアイデアを思いつこうと頑張ります。しばらくしたら役割を交代し、いままでノート答えてきた人が、パーティの案を考えることにします。提案された方は、今度はすべてイエスと答え、何か付け加えなければいけません。たとえば、「土曜の夜にパーティをしよう」と言われたら、「そうしましょう。わたしはケーキを持っていくわ」などと答えるわけです。これをしばらく続けていると、思いもよらない飛躍をすることになります。パーティが開かれる場所が海中やよその惑星だったり、見たこともない料理屋、奇抜な余興が用意されたりすることになります。その場のエネルギー高まり、気持ちが高揚し、数え切れないほどのアイデアがつぎつぎに生まれます。(p.57) \n\n> ルールは破られるためにある--こうした考え方が集約されているのがよく耳にするフレーズ「許可を求めるな、許しを請え」です。(p.63) 原文だと“Never ask for permission\, ask for forgiveness”でマフィーの法則の一つ \"認可をとるより許しを請う方が容易\" Easier to Ask for Forgiveness than Permission が語源とのこと。 \n\n> 戦闘機のパイロットの訓練生ふたりが、互いに教官から受けた指示を披露し合いました。ひとりが、「飛行の際のルールを1000個習った」というのに対して、もうひとりは「私が教えられたのは三つだけだ」と答えました。1000個のパイロットは、自分の方が選択肢が多いのだと内心喜んだのですが、三個の方はこういいました。「してはいけないことを三つ教えられたんだ。あとは自分次第だそうだ」。この逸話の要点は、すべきことをあれこれ挙げていくよりも、絶対にしてはいけないことを知っておく方がいい、ということです。そして、ルールと助言の大きな違いも教えてくれています。助言を吹き飛ばしてしまえば、ルールははるかに少なくなります。(p.64) \n\n> 人間は二つのタイプに分かれることが分かってきました。自分のやりたいことを誰かに許可されるのを待っている人たちと、自分自身で許可する人たちです。自分自身の内面を見つめて、やりたいことを見つける人がいる一方で、外からの力で押されるのをじっと待っている人もいます。私の経験から言えば、誰かがチャンスをくれるのを待つのではなく、自分で掴みにいった方が良い面がたくさんあります。(p.72) \n\n> 自分の持つスキルの幅を積極的に広げ、リスクを取って新しいことに挑戦する人の方が、自分のスキルや潜在能力はこれだと決め付け、決まった役割に徹する人たちくらべて成功する可能性がはるかに高いことは、数多くの調査で示されています。(p.79) \n\n> リスクは基本的に五種類に分けられているようです。身体的リスク、社会的リスク、感情のリスク、金銭的リスク、知的リスクです。わたしは社会的リスクは平気ですが、身体的リスクは取りたくありません。初対面の人に話しかけるのは億劫ではありませんが、橋の上からバンジー・ジャンプをしろといわれたら断ります。また、自分の分析力を磨くためなら喜んで知的リスクを取りますが、大きな金銭的リスクを負いたくはありません。ラスベガスに行くなら、大損しなくてすむように、わずかな現金しか持っていきません。(p.114) \n\n> 精巧の秘訣は、みずからん情熱に付き従うことである--一体、何人からこういうアドバイスされたことでしょう?きっと、多くの人からこういわれた経験があるのではないでしょうか?何をすればいいのか分からなくて悩んでいる人に、こういうのは簡単です。でも、このアドバイスは単純すぎて、人を惑わせます。誤解しないでいただきたいのですが、私も情熱は大好きですし、自分を突き動かすものを知っておくのは、とても大事だと思います。ただ、情熱だけでは足りないのです。 \n情熱は出発点に過ぎません。自分の能力と、それに対する周りの評価を知っておくことも必要です。とても好きだけれど、必ずしも得意ではないことを仕事にしようとするとも必要です。とても好きだけけれど、必ずしも得意ではないことを仕事にしようとすると悩みが深くなります。バスケットボールが好きだけど身長が足りない人や、ジャズの大ファンだけれど音程を外す人もいるでしょう。どちらの場合も、プロトしてではなく、熱心なファンとして、試合を見に行ったり、コンサートに足を運んだりすることはできます。 \n情熱をかけられるものがあり、能力もあるけれど、それを活かす市場がない、という場合があるかもしれません。例えば絵がうまくて書くのが好きだとか、サーフィンボード作りが好きでサーフィン乗りが得意だとしても、こうした才能を活かす市場は小さいのが実状です。自分が夢中になれることを仕事にしようとすると、欲求不満に陥るのは目に見えています。仕事にするのではなく、素晴らしい趣味だと考えた方が懸命でしょう。 \n... \n情熱とスキルと市場が重なり合うところ。それが、あなたにとってのスウィート・スポットです。そんなスポットを見つけられたら、仕事がただ生活の糧を得る手段で、仕事が終わった後趣味を楽しめるのではなく、仕事に酔って生活が豊かになる素晴らしいポジションにつけることになります。こんなに楽しんでいてお金をもらっていいのかと思えることを仕事にする--これが理想でないでしょうか?(p.120) \n\n> 「ちょっと言っておきたいんだけど、あなたにこの組織は合わないと思うわ。押しが強すぎるもの」。私は涙がこみ上げてきて、このピンチをどう切り抜けるか必死に頭を巡らせました。私は素直に誤り、指摘してくれたことに感謝しました。そして、大抵の人はエネルギッシュで情熱的だと言ってくれるけれど、気づかないうちに誤解されていることがわかってよかったと伝えました。わたしの熱意が誤解されていたのです。その後は打ち解け、会話が弾みました。そして最後に、採用するといってもらえたのです。 \nこの逸話が示しているのは、自分の行動に責任を持ち、経験から学ぼうとする姿勢が大切だと言うことです。それができれば、すぐに先に進めます。(p.168) \n\n> 何かをしようとするのと、実際にするのでは大違いだ、ということです。わたしたちは、「何かをしようとしている」としょっちゅう口にします。減量であったり、運動であったり、職探しであったり。でも、ほんとうのところは、しているのか、していないのか、どちらかなのです。「しようとしている」というのは言い訳に過ぎません。何か事を起こすには、最低でも100パーセントの力を出して実現のために努力しなくてはなりません。100パーセントの力を出す覚悟がないなら、目標が達成できなかったとき、責めるべきは自分しかいないのです。(p.193) \n\n> おわかりだと思いますが、光り輝く方法は一様ではありません。ですが、すべては限界をとっ払い、持てる力を遺憾なく発揮しようとするところから始まります。及第点に満足せず、自分の行動とその結果の責任は、最終的に自分にあることを自覚することです。人生にリハーサルはありません。ベストを尽くすチャンスは一度しかないのです。(p.203) \n\n> 種明かしをすると、これまでの章のタイトルはすべて、「あなた自身に許可を与える」としてもよかったのです。わたしが伝えたかったのは、常識を疑う許可、世の中を新鮮な目で見る許可、実験する許可、失敗する許可、自分自身で進路を描く許可、そして自分自身を試す許可を、あなた自身に与えてください、ということなのですから。じつはこれこそ、わたしが二十のときあるいは、三十、四十のときに知っていたかったことであり、五十歳のいまも、たえず思い出さなくてはいけないことなのです。(p.206) \n\n> 成功は甘美だけれど、移ろいやすいものであることも父が教えてくれました。影響力や権威、力のある立場に立てば、大きな恩恵を受けられます。ところが、その地位を去った途端に、そうした特権は消滅してしまいます。「力」は地位に由来します。その地位を外れた途端に、すべてがなくなってしまうのです。だから、自分自身を今の地位と結びつけて考えてはいけないし、周りの評価も鵜呑みにしてはいけません。(p.212) お伺いを立てているのはその地位にかその人の能力にか。", ["自己啓発"]],
["イノベーションの達人!", "http://www.amazon.co.jp/dp/4152087366", "トム・ケリー\, ジョナサン・リットマン/早川書房", "ten_faces_of_innovation", "Tue Apr 2 19:08:09 +0900 2010", "4", "“発想する会社!”と同じ著者で、IDEOのイノベーション方法について述べている。うまく説明できないのだけど、個々のエピソードがおもしろくて、読みやすい。素直にこういうクリエイティブな雰囲気で仕事がしたいとうらやましく思う。もちろん、個々の非凡な力量があってこそ成り立つのだろうけど。セキュリティのためにアホみたいな非生産的な施策をしたりマイクロマネージメントしたりと信頼関係を築こうとも思っていないような多くの日本の組織とは真逆だろう(cf. pp.148-150のメモ)。 \n\n\n前作もそうだったのだけど、元がデザイン系の会社のせいか、本が読みやすい。紙の質、レイアウトや写真など、優れている。文章もすらすらと頭に入ってくるし、内容も具体例が多くわかりやすい。そういえば似たような本を目指そうとしているだろう“デザイン思考の道具箱”はセンスが真逆で気持ち悪い色使いだったと思い出した。 \n\n以下、自分用メモ。 \n\n> 一つの方法は、自分の仕事のあらゆる側面に目を向け、「これは平凡だろうか、それとも少しでも非凡なところがあるだろうか」と考えてみることだ。経験デザイナーは平凡なものを見つけるそばから、それを払いのける。それが自分のチームや組織にあれば、エントロピーの力に逆らって、ただの商品化を必死になって避けようとする。この自問は驚くほど単純で効果的なアプローチだ。うちのカスタマー・サービスに電話したら、どういう経験をするだろう--平凡だろうか、非凡だろうか? うちを初めて利用した顧客の経験はどうだろう? この方法論は社内の経験にも適用できる。うちのホットなプロジェクト・チームが正午の会議を開催する時のメニューはうまそうだろうか--つまり、平凡だろうか、非凡だろうか? (p.187) 平凡な存在になるための第一歩は平凡なものを捨てることである。(p.212) \n\n> かつてウィンストン・チャーチは言っていた。「私はいつでも学ぶ用意があるが、必ずしも教えられることが好きなわけではない」。(p.247) 相手に伝えたいときの教訓として覚えておくと良い気がした。 \n\n> ホールフーズのチーム体制 (pp.148-150)の感想。 共同作業の教えとして次の2点を挙げている。 \n- 組織の業務をチーム主導のプロジェクトに変える｡ \n- チームにしっかりした仕事上の役割を与える。 \n逆になぜ我々はこの2点ができないのだろう。上がどれだけ下を信頼して、下がどれだけ働く気があるかってことなのだと思うのだけど。労使間闘争とか言っているようでは時代錯誤も甚だしい。", ["イノベーション", "IDEO"]],
["インビジブルコンピュータ", "http://www.amazon.co.jp/dp/4788511711", "ドナルド・A. ノーマン/新曜社", "invisible_computer", "Tue Mar 27 19:06:25 +0900 2010", "2", "自分も計算機は人間が何かを行うものを支援するモノであると考えているので、目に見えないうちに計算機が支援しているという考えには強く共感しながら、本を読んだのだけど、その内容はあまり深くなく残念。イノベーションのジレンマとキャズムを用いて説明している所は何となく退屈だった。優れたモノの作り方をプロセスや組織などについて書いている箇所があるのだけど、まさにIDEOで実践されていることではないかと思った。情報アプライアンスという聞きなれない単語をフィーチャーしているのだけど、要は何か機能に特化した電子機器のこと。計算機が安価になれば、この流れは加速するとは確かに思う。それだからこそ、タンジブルのような特化されたインターフェイスが重要になっているのかも、と無理につなげてみる。", ["UI", "Norman"]],
["急に売れ始めるにはワケがある", "http://www.amazon.co.jp/dp/4797338121", "マルコム・グラッドウェル/ソフトバンククリエイティブ", "tipping_point", "Tue Jul 17 19:05:03 +0900 2012", "3", "マーケティングの授業を受けていたとき、いかにviral marketingを実現するか、が大きな課題だったくらい、今時のマーケティングには重要。この本は、どうやってそれを実現するかは書いていないし、仕組みについても、そりゃそうだろ位の内容しか書いていない。それでも、具体的なエピソードがおもしろいので読み入ってしまう。実験で首を縦に降りながら話を聞くと、納得しやすいと本に書いてあったけど、そんな感じ。あまり関係ない小ネタに頷いているうちに、大筋の話にも納得しているような感覚。読み終わった後にはあまり残ってないのだけど。", ["マーケティング"]],
["天才! 成功する人々の法則", "http://www.amazon.co.jp/dp/4062153920", "マルコム・グラッドウェル/講談社", "outliers", "Tue May 22 19:02:31 +0900 2010", "3", "何に興味を持ったか忘れたけど、amazonのwantsリストに入っていたので映画までの時間つぶしに購入。物語としてはおもしろいのだけど、言っていることは、成功するには(失敗するにも)環境が重要、ということと、長時間の練習(1万時間)が必要ということで、あまり大したことは言っていないと思う。 \n\n思ったのは、成功するには、まわりから優れていることが重要なのだと思う。それはものすごく秀でている必要はなく、少しだけで構わない。そうすると、特別プログラムの機会が与えられて、さらに他の人より優れていくループに入ることができる。例えば勉強なんかは、基礎がある程度分かっていれば次に習う概念もすんなり入ってくるだろうし、他の人が教科書を家で読んで理解しようとしている間に、複雑な問題に取り組む余裕も出てくる。結果も伴うから勉強が楽しいというループに。鶏と卵だけど、早い時期にそういうのを見つけると、周りの人より優れることもできる。若い人に夢中になるものを見つけようというは、まんざら悪いことでも無かったと思ったのでした。もちろん、自分のように若くなくても、今からでも没頭することは重要だとも思ってます。とりあえず一歩を踏み出すことが重要なのだと思う。 \n\nあと、訳者の勝間さんが後書きを書いていて、正直この人を全く知らないし興味もないのだけど、後書きに訳者の主義主張を読まされて気持ち悪かった。", ["マーケティング"]],
["未来のモノのデザイン", "http://www.amazon.co.jp/dp/4788511347", "ドナルド・A・ノーマン/新曜社 ", "design_of_future_things", "Tue Mar 17 19:00:39 +0900 2010", "3", "人間と計算機がどのように今後接していくのかという観点で興味深かった。本では主に自動車などの機械にスポットがあてられていたけど、ユーザインタフェイス全般を想像しながら読んだ。計算機には限界があって人間の意図を100%正しく理解することができない(人間だって他人を理解することは不可能なのに!)。意図を外されたときの計算機の行動は、人間をイライラさせ、ときには大きな事故にさえ通じる。そうであれば、初めからそのような目標はあきらめて、うまく人間をサポートするような、もしくは人間が計算機に合わせやすいように行動するものを目指すべきではないか。と、著者は言っているのだと思う。この考えは、計算機が人間に合わせるべきという“誰のためのデザイン?”をさらに深めた考え(第一原則はもちろんそのままだけど)であり、かなり共感する。最後の機械側から見た人間の文章は、お話としておもしろいだけでなく、こういう考え方ができる人はすごいなあ、とただただ感心。モノを作るときの考え方の参考にしたい。 \n\n以下、自分用メモ <!--more-->\n\n> この本を書き始めたとき、機械を社会化するためのカギは、より良い対話のシステムを開発することだと私は考えていた。だがそれは間違っていた。対話がうまくいくには、知識と経験の共有が必要なのだ。そのためには、環境と文脈、そこに至るまでの経過、関与している人々の多岐にわたる異なった目標や動機を正しく認識することが要求される。これは機械が完全な人間らしいインタラクションをするのを妨げる、今日のテクノロジーのもつ根元的限界であると私は今考えている。この、人と共有された理解を打ち立てるのは大変難しい。機械と共通理解が持てるようになると、どうしたら期待できるだろう。 \n機械とうまく協調するためには、機械とのインタラクションを動物とやりとりするときのインタラクションのようなものとして見る必要がある。人も動物も知的ではあるが、違う種であり、異なり理解、能力をもっている。同様に、もっとも知的な機械であっても、異なる種であって、独自の強みや弱み、理解、能力を持っている。ときには我々が動物や機械に従わなければならないし、ときには機械や動物が我々に従わなければならないのである。(p.11) \n\n> 予想外のことについて、我々は次の二つのことを知っている。第一に、それはいつでも起こる。第二に、それが起こるときはいつでも予想外だ。(p.16) \n\n> もし、人が冷蔵庫を開けて、それから電子レンジのところへ行ったら、その人は「食べ物を再加熱しようとしている可能性が高い。」単なる推測に、なんとももったいぶった科学的言い回しだが、なるほど、確かに洗練された推測ではある。だが推測にすぎない。(p.36) カシコイ家の想像で。 \n\n> どの節が最もよく読まれたか分かるように、電子文書にマークを付け加えた。汚れや擦り切れは、使用されたこと、関連性や重要性の自然な表示であるという利点を持つ。(p.79) \n元論文: http://www.cc.gatech.edu/~isbell/classes/2003/cs8802b_spring/read_edit_wear.pdf \n\n> 最も賢いものというのは、人の知能に取って代わろうとするものではなく、補完するものです。(p.103) \n\n> スマートホームの例は、賢いモノがとり得るふたつの別の方向性を示している。一つは知的な自律性、すなわち人々の意思を推測しようとするシステムである。もう一方は知的な能力拡大、すなわち有益なツールを提供するが、いつどこでそれが使われるのかを決めるのは人々に任せるものである。双方のシステムにはそれぞれ利点があり、問題もある。(p.156) 著者は多くの研究者は前者に走りがちであり、かつ失敗することが多いと言っている。", ["UI", "Norman"]],
["エモーショナル・デザイン", "http://www.amazon.co.jp/dp/4788509210/", "ドナルド A.ノーマン/新曜社", "emotional_design", "Tue May 13 18:59:06 +0900 2010", "2", "“誰のためのデザイン?”では不適切なデザインをいかに無くすかを書いていたけど、やっぱり人を熱狂させるような何かも必要だよねという感じの本。好き嫌いのうち、“嫌い”を適切なデザインで排除することはできるがそれには限界がある、ということを言っている(p.210)。“好き”を作る必要があるということだと思う。 \n\nこのこと自体とそれに続く三つのレベル(本能、行動、内省)に分けるところくらいまでは全うだと思うのだけど、それに続く流れがイマイチだった。ちょっとどこかで見たことがあるような内容でつまらなかった。ロボってにいたってはかなり退屈だった。“誰のためのデザイン?”のアプローチのように具体的なものをあげ、何のどこが人を熱狂させているのか、その熱狂的なものを作っていくにはどのような方法をとれば良いのか、というようなことを書いてほしかった。 \n\n以下、自分のメモ用<!--more--> \n\n> 誰にも当てはまる黄金律を一つ言うならそれは、家の中に、役に立つとは思えないもの、あるいは美しいと感じないものは置かないということだ。(p.3) \n\n> 三つのレベルは、次のように、製品の特性に対応付けることができる。 \n\n> 本能的デザイン >> 外観 \n\n> 行動的デザイン >> 使うことの喜びと効用 \n\n> 内省的デザイン >> 自己イメージ、個人的満足感、思い出(p.50)\n\n 各デザインを意訳すれば見た目(本能的デザイン)、性能(行動的デザイン)とメッセージ、文化、製品の意味や使われ方(内省的デザイン) \n\n> デザイナーの必読書「ものの意味」(p.61) “フロー”のチクセント・ミハイが著者の一人 \n\n> デービット・フローリックは、写真を撮った瞬間の周囲の音をとらえるオーディオトラックを併せ持つ「オーディオフォトグラフィー」と呼ぶシステムを開発した(そう、写真を撮る前から録音をスタートさせることができる。現代テクノロジーの魅力的な可能性の一つだ)。フローリックの研究について書いているエイミー・コーエンは、その重要性をこう述べている。「どの写真にも物語、瞬間、思い出がある。だが時が経つと、写真が記録している瞬間を呼び戻すのに必要な細部がだんだん思い出せなくなる。写真に音を付ければ、記憶をそのまま保つのに役立つだろう」。 \nフローリックは、今日のテクノロジーは、写真を撮ったときの音をとらえ、アルバムで見るときにそれを再生することができる、と指摘する。音は画像その物よりもずっと豊かに情動的な状況をとらえる。写真を撮る二十秒前に冗談っぽく言い合っていた声(「メアリー、しかめっ面するのやめてよ」とか「ヘンリー、早く、フランクとオスカーおじさんの間に立って」)、そして撮った後に十秒間のクスクス笑ったリラックスした様子も記録されている家族写真を想像して欲しい。フローリックはその可能性を次のように述べている。「画像を撮った瞬間の周囲の録音はその場の雰囲気やムードをよく伝え、その時のことを思い出すのに実に良い助けとなる。写真に添えられた懐かしい音楽は、写真を撮った頃の気持ちと記憶をより多く呼び起こす。声の説明があれば、写真を撮った当人がいないときには特に、他の人がその写真の意味を理解するのに役立つだろう」。(p.68)", ["UI", "Norman"]],
["ライフログのすすめ", "http://www.amazon.co.jp/dp/4153200107/", "ゴードン ベル\, ジム ゲメル/早川書房", "total_recall", "Tue May 13 18:57:44 +0900 2010", "4", "自分に関するデータをすべて電子データで記録しるとどんな世界が待っているかについて述べている。日常の買い物で電球のサイズのどれを買えば言いのだろうと迷ったときに、とにかくすべてを記録しておいてその場で見れれば、前買ったものと同じものを買うことができて便利と思っていた自分にはもってこいの本。かしこい人が自分の興味ある分野について解説してくれると、思いもつかないアイデアに触れることができてとてもうれしい。いろいろと考えを想像させてくれておもしろい。というより、自分の考えがいかに浅いかってことなのだけど。 \n\n自分の携帯電話の番号や人の名前を覚えるのが苦手(というより意味がないので覚えたくないとすら思っている)なので、共感することしきり。こういうシステムを使うことができれば、こんなメモを入力しなくてもいいのになあと思ったり。 \n\n主題は、データを記録することで、余計な記憶をなくすことができ、かつ、効率的に正確にデータを使うことができるのだから便利でしょということなのだと思う。著者が言う通り他人にデータを撮られる点などは技術と法律と政治(だったけかな?)とともに徐々に進歩していく分野なのだと思う。 \n\n自分と意見が異なる点は、彼は電子データがあればすべての物質データは不要だとしていること。おばあさんの毛布さえ等身大にスキャンしてしまえば捨ててしまっても構わないと言っている。デジタルにより、簡単にその情報にアクセスすることができる点は否定しないけど、やはりものだからこその良さもあるのだと思う。デジタル化により便利になることは全く否定しない。さらにその次にどういうものが来るのかという考えが聞きたかったのはないものワガママすぎか。 \n\n以下、自分用メモ <!--more-->\n\n> 授業中にPCでとったノートと、授業を録音したものとを時刻同期させることができる。こうしておくと、ノートの一ヶ所をクリックすれば、授業のその部分を後から聴くことができる、というわけだ。(p.22) すでに商用のシステムがあるみたい。 \n\n> 情報を記録することについては、技術の流れは普及と浸透の方向に止めどもなく向かっている。つまり、価格も利便性ももはや、何を記録するかとか、記録自体をすべきかどうかを決める際の要因にならない世界に向かっているのだ。実際にこれから訪れようとしているのは、ある種の情報をある時間帯や場所で記録しないという意識的な決断(もしくは法制)を必要とする世界であり、現在に至るまでとは逆の世界だ。(p.22) \n\n> ブッシュは「索引ではなく、連想による選択を機械化できるかもしれない」という期待を抱いていた。そのために提唱したのが「検索経路」の開発だった。検索経路があれば、ある文書を他の文書へと次々に関連付けていき、後であらためてたどりなおすこともできる。(p.65) 検索の概念の説明のコンテキストで。これこそセマンティックWebでやりたかったことだったんじゃないだろうか、と自分に問いかける。 \n\n> エバーノートやリコール、ワンノート、グーグルのウェブヒストリー、OS上のデスクトップ検索をサポートする機能 (p.68)著者があげたライフログの初期型製品の一部 \n\n> 適切なメタデータと完全な索引機能を備えたデータベース設計のおかげで、マイライフビッツで処理できるようになったことの一例を紹介してみたい。僕がバイオテクノロジー業界の起業家の名前を思い出そうとしている、と仮定する。その人物については、何年か前にウェブ上で記事を読んだことがある。本人の名前も会社名も、一般的な検索に必要な具体的な事項もなにも思い出せない。覚えていることは、ウェブ上でその日との記事を読んだことだけ。バイオテクノロジーについて書いてあった。二年から四年前のことだ。そのときはオフィスにいて、ジム・ゲメルと電話でかなり長話をしている最中だった。そういえば十分以上しゃべっていたかもしれない。これらは検索条件としてはかなり曖昧だが、、マイライフビッツが、保存されているウェブページを細かく分析して、絞り込みを重ねていくには十分だ。またたく間に、探していたタイトルが出てくる。(p.76) 今もなお、ブラウザだけの履歴をがんばって撮っている研究をしている人に読ませてあげたい。 \n\n> 人の名前を思い出せないことに不安や苛立ちを覚えるのは誰もが経験することである。僕はよく自分がはっきりと覚えていることを手がかりに、マイライフビッツで、名前を突き止める。よく自分がはっきりと覚えていることを手がかりに、マイライフビッツで、名前を突き止める。先日、コンピューター歴史博物館に力を貸してくれようとしていた人物の名前を思い出そうとした。1983年のことだ。彼が勤めていた会社の名前は思い出した。その年に彼が博物館での講演に出席したのではないかと考えた。出席者リストに名前があがるのではないか。リストのコピーなら何年も箱にほおり込みっぱなしにしていたけれど、スキャンしたはずだ。・・・ビンゴ!たいてい電子記憶になっているとわかっていれば、いつも一分か二分以内で見つけられる。(p.93) \n\n> 過去を封印する行為として、衝動的に削除キーを押すのは良くないと思う。ダニエル・L・シャクターはこう言う。「自分がもっとも忘れたい経験に向き合い、他人に知らせ、まとめることが、[不必要な再生に対抗する]もっとも効果的な対処法となるのだ」 (p.108) 忘れたい記憶と向き合う方法 \n\n> 手元の作業との関連性が特に高まる。ファイリング・キャビネットではなく、一種の個人専属アシスタントになるのだ。たとえば、マサチューセッツ工科大学のブラッドリー・ローデスのチームが開発した「リメンブランス・エージェント」がそうだ。まだ実験段階のソフトウェアだが、入力作業をモニターし、関連性がある電子メールや文書を思い出させてくれる。たとえば、電子メールを書いていて、「アンヴィル・プロジェクト」と入力したとしよう。すると、このソフトウェアが「アンヴィル・プロジェクト」の単語を含む電子メールとドキュメントを画面横に表示してくれるので、あとはクリックして開くだけ...ソフトウェアがアシスタントなら、声を掛けるまでもなく、「指先に情報を」の状態にしてくれるというわけだ。(p.129)", ["イノベーション"]],
["発想する会社！", "http://www.amazon.co.jp/dp/415208426X", "Tom Kelley\, Jonathan Littman/早川書房", "the_art_of_innovation", "Tue Mar 12 18:53:53 +0900 2010", "4", "IDEOという会社のイノベーションの方法を書いている。デザイン系の会社らしく本がカラーで絵がきれい。これだけで気持ちよく読むことができる。結局のところ、人の才能を含んだ職場の環境が大事だということを言っているのだと思う。そして職場で働く人々に対する仲間意識。この本を読んで次のような疑問を持つ。いつから上司を面倒な存在だと思い始めるのだろう。どうして、そう思うのだろう。お互いのコミュニケーションを妨げているものは何なのだろう。なぜ目標を共有できないのだろう。本当に上司は目標を達成したいのかと疑問に思うのはなぜだろう。本当に目標を達成したいと思える目標なのだろうか。誰がその目標をどうして決めたのだろう。なぜその目標に共感できないのだろう。始める前からいいものなんて分からないのに、なぜ始めたらそれを成功したことにしなければならないのだろう。 \n\n以下、自分用メモ<!--more-->\n\n> <バリア> \n\n> * 階層ベース\n    * イノベーションと組織は水と油のようなものだ。組織には障害物が多すぎる。組織のトップが出したアイデアを強要したり縦の組織構造を厳格に守ったりしていると、新しいプロジェクトは押しつぶされてしまいがちである。 \n* 官僚制\n    * プロジェクトの開始時にかならず定形の用紙に書き込んだり、弁護士に相談したりしなければならないとしたら新しいことを試みる回数がたちまち減ってしまう。 \n* 個性がない \n    * 会社のことを誰も気づかわず、考えてもいないように見える会社がある。波風さえ立てなければ思ったとおりに出世の道をゆっくり昇っていかれる会社、あるいは無難に行動するのが最もかしこいやり方であるような会社だ。 \n* 整頓 \n    * デスクを綺麗にしておく決まりや、自分のスペースを好きなように変えさせない厳しい規則には用心しよう。「きちんとした」組織構造さえ、イノベーションを抑圧することがある。制約事項ばかり増やしていたら、プロジェクト・チームが「枠組みを越えて考える」ことができなくなっても当然だ。 \n* 専門家 \n    * 専門知識は素晴らしいものだが、それを新しく学ぶことをやめてしまうまでのことだ。たとえば、専門家を自認する人たちには、人の話に耳を傾けるよりも自分の話をする人が多い。専門家は「そんなやりかたはしない」と言って、迂闊にイノベーションをはばんでしまうことがある。 \n\n> <橋>\n\n> * 利益ベース \n    * どこからでたアイデアであっても企業に採用する意志が本当にあるならば、イノベーションはすくすくと成長する。そればかりか、社員が自分の考えをより自由に表明するようになる。 \n* 自治性 \n    * あなたが自らの運命の支配者なら、自信を持ってリスクをおかすだろう。ときにはつまずくこともあるだろうが、新しい成功に向かって手を伸ばしつづけることにもなる。 \n* 気兼ねがない \n    * 友達や家族のように感じられる間柄なら、たまに過ちをおかしても理解してもらえる。よい組織は居心地がよく、たがいにからかいあえる・・・上司にたいしてさえも。みな仲間だからだ。 \n* 乱雑 \n    * 私のオフィスは散らかっているかもしれないが、これはまぎれもなく私自身のものであり、何時間も過ごす私のホームベースである。ニューヨークは、こうした刺激にみちた混沌のすばらしい象徴だ。さまざまな文化や考え方や経験を集め、人々の間に大きなエネルギーとクリエイティビティを生みだしている。 \n* 何でも屋 \n    * 何でも屋は終始、物事や考えを微調整して、仕事や自分自身を改善しようとする。明日は少し違うことをやってみることになるとわかっているので、現状維持など考えもしない。プロジェクトを立ち上げ、それを動かしつづけることが非常に得意だ。(p.202の表) 自分たちは<バリア>派か<橋>派か。 \n\n> サウスウェストでは他社よりも物事が速く進むが、これは従業員が自分には職務説明書にかかれている仕事しかできないなどと考えていないからだ。業務間の隔たりは狭まっている。誰もがチームとして行動している。客室乗務員は(ときにはパイロットまでが)、身の回りをきちんと片づけてから飛行機を降りる。必要ならば、チケットの係員も荷物を運ぶ。重要なのは物事を解決することであって、失敗しそうな誰かを指し示すことではない。(p.262) 「重要なのは物事を解決することであって、失敗しそうな誰かを指し示すことではない。」繰り返し。", ["イノベーション", "IDEO"]],
["誰のためのデザイン?", "http://www.amazon.co.jp/dp/478850362X", "D.A. ノーマン/新曜社", "psychology_of_everyday_things", "Tue Mar 1 18:51:42 +0900 2010", "3", "読もう読もうと思っていてようやくこの名著(オリジナル初版は1988年!)を読む。UIの本質はDon't make me think(ユーザに考えさせない)かと思っていたけど、それの他に自分の行為を適切にフィードバックする(ユーザに何が起きているかを表示する)ことも重要ということなんだということを学んだ。と思ったらずばりp.308に書かれていた。内容的には、いろいろなところでこの本の影響を受けた文章を読んでいたせいか、目新しいものはなかった。自分のUIに対する考えが、この本に書いてあることに沿って理解できていることを確かめることができてよかった。 \n\nシステムはあくまで、ユーザがしたいことをさせるためのものであるので、それ自体を感じさせてはいけないのだということを肝に銘じたい。(cf. p.303のメモ) \n\n“行動の仕方を思い出すためにメンタルモデルを使うということは、すばやくなめらかに実効しなければならないような課題に関して言えば最適ではないということである。”(p.114)という文章を読んで、自分がGUIが嫌いなのはスピードが遅いからだと再認識した。ファイルを見たいときに、ファイルを選択する操作に思考を要したくないのだ。シェルの補完機能を使って、自分の考え(ファイルの場所)を直ちに操作したいのだ。クリックとその結果のフォルダ表示を確認する操作で、その間にわずかながらでも間が空くのが嫌なのだ。(メンタルモデルは物事に意味をつけることができるもの) \n\nCUI\, GUI\, TUIを“外界にある知識”と“頭の中の知識”の表(p.129)に対応 + αの項目を書いてみる。 \n\n特徴|CUI|GUI|TUI \n検索可能性|×(悪い)|○(良い)|○(良い) \n学習|×(必要)|○(不要)|○(不要) \n効率|○(良い)|×(悪い)|○(良い) \n学習期間|×(長い)|○(短い)|○(短い) \n美しさ(個人の感想です!)|○(美しい)!|×(醜い)!|△(悪くない)? \n汎用性|○|○|× \n\nCUIは“頭の中の知識”を使うものでGUIは“外界にある知識”を使うもの。TUI(タンジブル・UI)はいいとこどりに見えるけど、自分の好き嫌いは美しさによって決まるものだということもこれで分かった。というか、考え方が逆か。美しさは(他の要素を考慮した結果である)自分の好き嫌いで決まるというところか。 \n\n以下、自分用メモ<!--more-->\n\n> “外界にある知識”と“頭の中の知識”の特徴(CSV形式) \n\n 検索可能性| 目に見えたり耳で聞けるならばいつでも検索可能である。| 直ちには検索できない。記憶を検索したり思い出すことが必要となる。 \n 学習| 学習は必要でない。解釈することが学習の代わりになる。外界にある情報をどれだけ簡単に解釈できるかは、っそれがどれだけ自然な対応づけと制約を活用しているかに依存する。| かなりの学習が必要になることがある。その対象の構造に何らかの意味があれば、学習はいくらか簡単になる。(あるいは、よいメンタルモデルがあるのでもよい。) \n 効率| 外部の情報を見つけたり解釈したりしなければならないので、時間がかかりがちである。| かなり効率的であることもある。 \n初めての場面での使いやすさ美しさ| 使いやすい。| 使いにくい。 \n美しさ| 美しくもなく、洗練されてもいないということになりがちである。多量の情報を取り扱わなければならないときは特にそうである。雑然としたものになることもある。結局のところ、この美しさはデザイナーの力量にかかっている。| 何も目に見えるようにしておく必要が無いので、デザイナーの自由度は高い。美しさという観点からすると良いものになることもある。(p.129) \n\n> 直接操作システムを使っているときには、文書を編集しているときでも、絵を描いているときでも、ゲームを作ったりそれで遊んだりしているときでも、私はコンピュータを使っているのではなく、まさにその作業をしているという感じをもっている。そこでは事実上コンピュータは見えなくなっているのである。この点は強調してもしすぎることはない。コンピュータシステムを見えなくすること。この原則は直接的であるか間接的であるにかかわらず、どんなシステムとのインタラクションの場合でも成立する。(p.303) つまるところこの気持ちなんだと思う。誰もコンピュータを使いたくて使っているわけではなくて、何かをしたいからコンピュータを使っている。 \n\n> 本書(POET: The Psychology of Everyday Things)が強調しているのはユーザ中心のデザインをしようということである。これは、ユーザが何を必要としていて何に興味をもっているかということを基本におく考えた方で、製品を使いやすくりかいしやすいものにするという点に重点がある。本章では、これまでに述べてきた原則のうち主なものを要約するとともに、その意味するところについて議論し、同時に毎日使う道具のデザインに対していくつかの提案をする。 \nまず、デザインは次のようでなくてはならない。 \n\n> * いついかなるときにも、その時点でどんな行為をすることが出来るのかを簡単に分かるようにしておくこと。(制約を利用する) \n* 対象を目に見えるようにすること。システムの概念モデルや、他にはどんな行為を行うことができるか、そして、行為の結果なども目に見えるようにすること。 \n* システムの現在の状態を評価しやすくしておくこと。 \n* 意図とその実現に必要な行為の対応関係、行為とその結果起こることとの対応関係、目に見える情報とシステムの状態の解釈の対応関係などにおいて、自然な対応づけを尊重し、それに従うこと。 \n別の言い方をすれば、(1)ユーザが何をしたらよいかわかるようにしておくこと、(2)何が起きているのかをユーザにわかるようにしておくこと、この二つを確実に守るということである。\nデザインにおいては、人や外界が自然に備えている特徴を利用するべきである。そのためには、自然な関係や自然な制約を利用しなければならない。できれば、教示やラベルが無くても使えるようでなければならない。かりに教示や訓練が必要だとしても一度で済むようにすべきで、それも相手が「もちろんそうします」とか「よくわかりました」と言えるような説明であるべきだろう。もしそのデザインに理由があり、全てのものが適切な場所にあり、それ自身が果たすべき機能を果たしていて、行為の結果が目に見えるものであるならば、簡単な説明をするだけで十分なはずだ。説明してみたのに相手が考え込んでしまったり「そんなの覚えられませんよ」と答えるようならば、そのデザインは失敗なのだ。(p.308) \n\n> 難しい作業を単純なものにするための七つの原則 \n\n> 1. 外界にある知識と頭の中にある知識の両者を利用する。 \n2. 作業の構造を単純化する。 \n3. 対象を目に見えるようにして、実行のへだたりと評価のへだたりに橋をかける。 \n4. 対応づけを正しくする。 \n5. 自然の制約や人工的な制約などの制約の力を活用する。 \n6. エラーに備えたデザインをする。 \n7. 以上のすべてがうまくいかないときには標準化をする。(p.309) \n\n> なんらかの技術的な進歩があったとすれば、作業をする際に頭を悩ませることは少なくなる。その一方で、作業を自分でコントロールしたりそれを楽しんだりする余地も残っているのであれば、一般的にどんな進歩であろうと私は歓迎したい。そうなっていれば、作業の本質的な部分、すなわち覚えておかなければならないことや、そもそも何のためにこの計算や音楽演奏をしているのかということに頭を使えるはずだ。私は重要なことに頭を使いたいのであって、細かい仕組みに浪費したいのではない。(p.318) 自分の携帯電話番号すら覚えたくないという自分の考えをピタリと言い表していてくれてうれしい。", ["UI", "Norman"]],
["プログラミングHaskell", "http://www.amazon.co.jp/dp/4274067815/", "Graham Hutton/オーム社", "programming_in_haskell", "Tue Feb 2 18:50:17 +0900 2010", "4", "Hakellのあこがれは、カテゴリ(圏論)の理解へのあこがれだった。ソフトウェア科学のための論理学(岩波講座)という本でカテゴリを挫折して依頼、いつかは自分も理解したいと思っていた。がんばって理解しようとしてもがいた感覚ではカテゴリとは関数を値とするような世界の記述方法なんだろうって感覚だった。そして、それがHaskellできそうな気がすると思い始めたとき、これを使いこなせればカテゴリも理解しやすくなっているのではないかと淡い期待を抱いた。 \n\nHaskellを知った時期は結構早かった気がする(1998年くらい?)。後輩が研究対象にしていて熱狂的なファンになったのを横目にそのすごさがいまいち分からなかった。遅延評価ってそんなにいいのくらい。使いづらいじゃん、みたいな。で、ブームになりかけた頃に日本語の本が出たので買って読んでみたのだけど、かなりいまいちの本でどうも触手が動かなかった。 \nで、気も熟してこの本。薄いのに必要最小限でしっかりと説明している。自分みたいにチョロッと読んで分かった気になりたい人にはありがたい。1日であっと言う間に読んでしまった。当たり前だけどこれでプログラムが書けるようになったわけでは全く無いけど。 \n\n1章から7章までは他の関数型言語を学んだ人ならすんなり入れると思う。そうでない人にも優れた関数型言語の入門書だと思う。そしてモナド、モナドと身構えていると、さらりと書かれていて納得させてくれる。この本当はまったく分かっていないけど分かった気にさせてくれるところがうれしい。遅延評価のところもわかりやすく書かれているし、関数が評価されるということを例えばmultiから*へと自然に教えてくれるのもやさしいと思う。プログラムの検証は普通の本のように論理体系を作ってそこでセコセコとやって最終的にはHaskellの中で検証するのかと思ったのだけど、流石にそこまではやらず、人間が手を動かしながらやっていた。それでも、検証の技術を使って(というか定義をうまく使って)++(append)を削除して効率的なプログラムを作るというのは新鮮だった。 \n\nSchemeをやっていた時に、うまく抽象化できる部分を見つけて悦に浸っていた瞬間を数多く体験できそうな良い言語だと思った。 \n普通の言葉で書き直すと、高階関数を使ったプログラミングがしやすいということ。例えば、文字列中の空白を取り除くプログラムを書けと言われた時どうするだろう。自分なら、文字列中の文字を一文字ずつ走査し空白があれば取り除くプログラムを書く。しかし、この本ではさらりと、filter(≠\, ' ') \"abc def ghi\"などと書く。 \nもちろんRubyでもJavaでもCでもこのようなプログラムは出来る(FORTRANだって高階関数の機能はある)。でも、できることとそう考えるかということは違う。この辺はプログラミング言語とチューリング完全の議論で腐るほど議論尽くされている。終止符を打つ最終手段は、Paul Grahamの“普通のやつらの上を行け” http://practical-scheme.net/trans/beating-the-averages-j.html 。 \n\nプログラマにとって、実装をどうするかという観点ではなくて、本質はどうなのかということを問われる楽しいプログラミング言語だ。プログラミングが楽しくなれそう。自分の能力が問われる気がする。 \nどのプログラミング言語が好きかと聞かれるとSchemeと答えているのだけど、その理由はSchemeでプログラムしていると楽しいから、と抽象的な答えにとどまってしまっていた。たぶん、その理由がこの辺りにあるような気がする。自分が賢くなったと勘違いできる感覚がうれしいのだと思う。 \n\nちなみにこんなに偉そうな言を書いておいて1行もソースコードをまだ書いてない。ports(snow leopard)でghcとhugs98が簡単に入らないなんて、と言い訳。演習問題をコツコツ解きたい。 \n\nまとめると、プログラムをしたくなる良い本でした。とりあえずHaskellで3 not problem(3個の入力の否定を2つのnotとその他の演算子で実現する問題)を(力ずくで)解く!と宣言して(自分の自意識過剰を当てにして)続きのポインタを無理やり持たせてみる。", ["プログラマ", "haskell"]],
["ビューティフルアーキテクチャ", "http://www.amazon.co.jp/dp/4873114306", "Diomidis Spinellis\, Georgios Gousios / オライリージャパン", "beautiful_architecture", "Tue Feb 17 18:50:17 +0900 2010", "3", "最初の方は正直退屈だったのだけど、後半は学生時代の研究と重なるVM系とプログラム言語もありお腹一杯楽しめました。 \n\nVMはメタにつぐメタで何が何だか(分かるけど)。JVMでJVMを作る点やJVMでx86エミュレートなどやりたい放題。これが実用的レベルなんだからすごいというしかない。 \n\n一番おもしろかったのは、オブジェクト指向言語(特にEiffel)が関数型言語に真っ向から対決を挑んでいる章は見応えがありました。これらは直交する概念じゃないじゃん(e.g. OCamlとか)と思っていたのだけど、読んでいくうちになるほどと唸らされることばかり。毎回毎回状態を新しくコピーするのが計算として直感的とは思えず、ステートを上書きしていく代入こそが直感的だという所とか。昔、“オブジェクト指向言語のはなし”という本を読んでEiffel美しいと思ったのだけど、よく考えられているなあと改めて思いました。すごいのは、真っ向から批判しているHaskellの大御所 Simon Peyton Jonesとかにこの文書について意見を募っている所(建設的意見を返す彼もさらにすごい)。こういう姿勢が重要だよなあと感心することしきり。ただ、関数型言語も、オブジェクト指向も良しとする所は同じなのだから、基盤となる所が異なるだけで、最終的には同じような所に行き着くんだろうなと思いました。どちらにも長所・短所はあるからね。", ["プログラマ", "oreilly"]],
["カッコウはコンピュータに卵を産む", "http://www.amazon.co.jp/dp/4794204302", "クリフォード・ストール / 草思社", "tracking_a_spy", "Tue Feb 8 18:50:17 +0900 2010", "3", "psのオプションでハッカーがバークレイの人ではないことを見抜く、そんな紹介文に心踊らせ買った本。題名は自分がハックしたコンピュータを自由に使えるようにプログラムを作り置きそこから新たなハック先へと飛び立つことを表している。 \n\n計算機に侵入された管理者が、その犯人を追っていく姿を詳しく書いた本。ハッカーと言っても天才的でもない愚直に開いているセキュリティホールを狙う生身の人間であることを生々しく書いている。もちろん、それを追いかける人々や社会も生身の人間である。実生活やなかなか腰を上げてくれない政府機関などリアル(というか実話だけど)。読みやすい文章も手伝い読み物としておもしろかった。\n\n自分が計算機を使い始めた時もその文化は自由だった。鍵の無い家で窃盗をすることで、その街中に鍵をかけさせることになり結果強固な社会を作り上げた泥棒は果たして褒められる人なのだろうか。住みづらい世の中を作たのは誰のせいなのか。本文中であったこのような指摘は響いた。", ["プログラマの読み物"]],
["フリー", "http://www.amazon.co.jp/dp/4140814047", "クリス・アンダーソン/日本放送出版協会", "free", "Tue Jan 15 18:48:44 +0900 2010", "4", "あらゆるソフトウェアはいずれは無料になるものだと思っていたし、電話代も無料になるべきものだと思っていた。ソフトウェアについては、代金を支払う価値のあるものは、多くの人が使いたいと思い、そのことはオープンソースで開発するにふさわしい価値があることに通じるから。そして、時間が立てば、多くの人の目のチェックを経ているから、オープンソースの方が商用版より良いものになる(普通のSIerというか顧客はこの時間を待てないので商用版が生き残れる。逆に生き残るためにはオープンソースにはないくらいの良さを出さなければならない)。電話料金も同じで、あって当たり前のものにお金を払うインセンティブは働かない。さらにその上で何が出来るかが重要になってくるのだと思う(ベンチャーはそこを狙ってくる)。実際固定電話は無料も同然だ。 \n\nという感じで、少しでもサービスの無料化について考えたことがある人には、オススメの本だと思う。自分より賢い人が深く考えてくれた内容を教えてくれるのだから。 \n\nこの本を読むきっかけは講演で話題に挙がったことと、その後に立ち読みした部分(cf. p.158のメモ)が良かったからだった。自分(というか若い人)にしてみれば当たり前の考えを、こういう権威ある著者に言ってもらえるとありがたかった(文章が上から目線ぽいのは意図していないです)。企業の研究者として、どこで利益を出るかについて考えることがあるのだけど、それよりもまずは良いものを作ることが重要という考えに改めて自信を持った。誰であれ、それがお金を払う唯一の理由だから。逆に言えば、それが無いのであれば誰もお金を払わないということだ。 \n\n新しいものを考えるときに現在貴重なものが潤沢に使えるようになったらどうなるかを考えるのも良い方法だと思った(cf. p.237のメモ)。よく無限のCPU\, メモリ\, 回線速度が実現されたときに何がしたいかということを考えようとするのだけどうまくいかないのは範囲が広すぎて抽象的すぎるからで、もう少し具体的なものを考えて思考した方が良いと思った。このことは、p.276からの“潤沢さ想像する”でズバリ書かれていた。SFの暗黙のルールで物理法則を破るのは一つか二つまで。ルールが変わったときに人間がどう振る舞うのかを楽しむのがSFとのこと。 \n\n自然は命をムダにするという箇所(p.254)で魚が卵を何十万匹と生んで生き残るだけ強いものをより分けるということが書かれていた。新しいサービスもそうであるべきだろう。とりあえずやってみるという環境をもっと作るべきで、そのために評価の基準を計画ではなく結果を重視すべきなのだと思った。雑誌はページに制限があり一度印刷してしまえば後戻りできないので一つの話題が貴重だが、オンライン版はリソースは無限で修正もできるし(p.261)、「企業文化は「失敗するな」から「早めに失敗しろ」に変わるのだ」(p.322)と著者も言っている。サービスは何回でも失敗できるし、やりながらでないとその失敗も見えてこない。(だから自分でプログラミングすべきなのだと思っている。絵を描かかない人で偉大な絵を残した画家がいただろうか。グーグルのサービスはプログラマが作っている。) \n\n社内のメール事情がp.252に同じことが書いてあった。既にほとんど全員がこの原因に気づいているのに(おそらくサービスプロバイダ側も)実際にこうならないのは(もちろん自分も含め)一人一人の力が役に立たないと思い込んでいるからだろうと反省。 \n\n以下、自分用メモ。<!--more--> \n\n> 典型的なオンラインサイトには5パーセント・ルールがある。つまり、5パーセントの有料ユーザーが残りの無料ユーザーを支えているのだ。(p.39 フリーの一形態であるフリーミアムの説明の中で) \n\n> 中国の一部の医師は、健康ならば報酬がもらえ、病気になるともらえない。デンマークのあるスポーツジムは会員が少なくとも週に一度来店すれば、会費が無料になり、そうでなければその月の会費を全額納める必要がある。その心理的効果は絶大で、毎週通うことで自信がついてジムが好きになる。行きもしないジムに会費を払うという状況がなくなり、もっと通おうという気持ちを強くする。電話会議サービスを提供する会社は利用者からではなく、電話会社から料金をもらっている。ユーザに遠距離電話をかける機会を作らせることでそのアフェリエイトをもらっている。(p.47 「さかさまにできるビジネスモデル」の例の適当なまとめ。お金の流れを逆にして、モノやサービスを無料にしたり、他の会社が料金をとるものに料金を支払ったりする。) \n\n> アメリカでオンラインによる靴販売を行うザッポス[Zappos]は、さらに先を行っている。顧客への送料が無料なだけでなく、顧客から返品するときも無料としたのだ。オンラインで靴を買うのは、その靴が自分に会うかどうか分からないという心理的障壁があるが、ザッポスはそのサービスによって障壁を取り除こうとした。驚くことにザッポスが顧客に望むのは、自宅で試すために大量の靴を取り寄せることだ。気に入った靴があれば買って、残りは返品し、買うものの代金だけを支払えばよい。配送コストは靴の価格に組み込まれているので、激安価格ではないが、多くの消費者はその便利さに免じてその価格を支払っている。(p.88 何かを無料にすることでサービスに対する考え方ががらりと変わる例) \n\n> 安くなることを予測する。真空管が1.05$だったので、当時$100の製造コストだったトランジスタを、新しい工場で作るその価格を$1.05にした。生産量が増えるまで待つのではなく、今すぐ下げることで90%のシェアを獲得できた。(p.104を適当にまとめ。今日のコストをもとにコストを決めるのではなく、明日に要するであろうコストから価格を決める例) \n\n> 生産において物質の占める割合がとても小さい場合には、生産量を増やすにあたって物質的問題はあまり障害にならない。半導体は物質経済の崩壊を示している。 \nつまりアイデアは事実上、コストを要せず無制限に伝わっていくのだ。(p.110 車とデジタルサービスの違い) \n\n> 新しいサービスはオタクの妄想のような問いかけから生まれる。「これはクールだろうか?」「みんなはほしがるかな?」「このやり方は僕らのテクノロジーをうまく使えるだろうか?」。彼らは「これは儲かるか?」という平凡な質問から始めたりはしない。 \n変だろうか?GMやGEにとってはそうだろうが、純粋なデジタル世界にいる企業にとっては、そのアプローチは全く筋が通っている。ビジネスモデルを持つ前に、まずたくさんの観客を集めることから始めるのは、1990年代後半のITバブルの時代には無茶なことだった。なぜなら、そのためにはベンチャー・キャピタルの膨大な資産とサン・マイクロシステムズのサーバーを並べたラックが必要となるからだ。ところが今は事情が違う。ウェブで起業した会社は、グーグルが使っているのと同種の巨大サーバー施設を使うことができ、オンライン上のサービスを驚くほど安く提供できるのだ。アマゾンのEC2といったホスティング・サービスのおかげで起業家は物理的インフラを何も持たなくてもクレジットカード一枚あれば、何百万人というユーザーにサービスを提供できるようになっている。 \nそのため、起業家は大きな金銭的リスクを負うことなく、また、どのようにしてお金を稼ぐのかはっきりわかっていなくても、大きな望みを抱いて小さく始められるのだ。Yコンビネーター社は小規模企業専門のベンチャー・キャピタルだが、その共同創業者のポール・グラハムは、企業を目指すものにいつも単純なアドバイスをするという。「人々がほしがるものをつくりなさい」。(p.158) \n\n> ほとんどのウェブアプリケーションは、メディアのビジネスモデルを真似て収益化(マネタイズ)されるでしょう。私はバナー広告のことを言っているのではありません。あなたのサービスに注目しているユーザーさえいればその注目を利用しようと企業や個人がお金を払ってくれる、色々なモデルのことを言っているのです(p.191) \n\n> 競争市場においては、価格は限界費用まで下落する(p.227 ベルトラン競争を簡単に述べたもの) \n\n> 私たちはムダを避けるように教えられてきたが、ときにはムダを追求すべき場合もあるのだ(稀少なものが潤沢になるとき、市場はその扱いを変える。安いコモディティを改良して、より価値のあるものにしようとするのだ)。 (p.237 アラン・ケイがコンピュータ資源が貴重な時にGUIのウィンドウシステムを作ったことがこの前のどこかに書いてあった) \n\n> お金は持っていないと買えないものがあるから価値があった。しかし、デジタルの世界ではほとんどものもが無料で手に入るのでお金に価値はない。そこではその代わりに「注目経済」と「評判経済」と呼ばれるものが浮上する。これらは、httpのリンクで簡単に数量化できる。実際にこの価値はグーグルのページランクで使われている。グーグルの検索結果が評判を扱う金本位制になっている。ページランクのアルゴリズムの調整がインフレを防いでおり、FRB(米連邦準備制度理事会)議長の仕事もこれとそれほど変わらないはずだ。(p.239からの内容の適当なまとめ) \n\n> 私の会社ではときおり、社員は「共用フォルダから不要なファイルを削除する」時期になりましたという電子メールがIT部門から送られてくる。これは、会社のコンピュータの記憶装置の容量が満杯になったことをIT流に表現したものだ。私たちは善良な企業市民なので、みんな熱心にサーバー上のフォルダを見て、各ファイルが本当に必要なのかどうかを判断し、無くてもいいものは削除する。たぶん皆さんも同じことをやっているのではないだろうか。 \nこんなことを何年も続けてきたある日、私は我が社のIT部門はどれだけの記憶容量を持っているのかと疑問に思った。皆さんにヒントをお知らせすると、その時点で記憶容量1テラバイト(1\,000ギガバイト)当たりのコストは約130ドルだった。また、この少し前に、私は自宅用にデル社の標準的なデスクトップ・コンピュータを買っていた。子供がゲームをしているそれは1テラバイトのハードディスクを内臓している。 \nということは、私の会社全体ならどのくらいになるだろうか。実は全く少なかった。わずか500ギガバイト(1/2テラバイト)だ。うちの子供は私の会社全体の二倍の記憶容量を持っていたわけだ。 \nどうしてこんなことが起きたのだろう。答えは簡単だ。どういうわけか、記憶装置は高価なものだと私たちが信じ込んでいたのだ。実際には、とるに足りないほど安くなっていたというのに。私たちは、ハードディスクの容量という潤沢なものを稀少なもののように扱い、社員時間という稀少なものを潤沢なもののように扱っていた。まったく逆にしていたのだ(急いで付け加えておこう。会社はすぐに大量の記憶容量を追加し、くだんのメールは二度と送られなくなった)。 (p.252) \n\n 稀少さと潤沢さのモデルの違いの表(p.263 本文では雑誌とオンライン記事の違いを例に挙げていた。実際はどちらがというわけではなくハイブリッドと言っていた) \n\n| 稀少| 潤沢 \nルール| 許されているもの以外はすべて禁止される| 禁止されているもの以外は何でも許される \n社会モデル| 父権主義(何が最良かは私たちが知っている)| 平等主義(何が最良かはあなたたちが知っている) \n利益プラン| ビジネスモデル| これから考える \n意思決定プロセス| トップダウン| ボトムアップ \nマネジメント方法| 指揮統制| 制御しない \n\n> 無料のルール - 潤沢さに根ざした思考法の10原則(p.322 説明文は適当にまとめたものもある) \n\n> 1. デジタルのものは、遅かれ早かれ無料になる \n2. アトムも無料になりたがるが、力強い足取りではない \n3. フリーは止まらない \n4. フリーからもお金儲けはできる \n時間節約、リスク回避、ステイタスなど \n5. 市場を再評価する \n航空チケット販売会社のライアンエア社は、レンタカー会社のキックバックなどが得られる旅行ビジネス会社に変更 \n6. ゼロにする \nコストが0に向かっているのであれば、いつかはそうなるので、今真っ先にやろう \n7. 遅かれ早かれフリーと競い合うことになる \n8. ムダを受け入れよう \nボイスメッセージの制限やディスク容量の管理をやめよう \n9. フリーは別のものの価値を高める \n潤沢さは新たな稀少さを生みだす。100年前には娯楽は稀少で、時間が潤沢だったが、今はその逆だ。アルものやサービスが無料になると、価値は一つ高次のレイヤーに移動する。そこに行こう。 \n10. 稀少なものではなく潤沢なものを管理しよう \n資源が稀少な世界では、資源は高価になるので慎重に使う必要がある。そのためには、高くつく過ちを避けるために、すべてを管理できるような従来型のトップダウンのマネジメントが適している。一方、資源が安い世界では同じ方法で管理する必要はない。ビジネスの機能がデジタルになると各ビジネスのリスクは小さくなるので、母艦が沈む危険を考えずに独立して多くのビジネスができるようになる。企業文化は「失敗するな」から「早めに失敗しろ」に変わるのだ。", ["イノベーション"]],
["ソフトウェアアーキテクトが知るべき97のこと", "http://www.amazon.co.jp/dp/4873114292", "リチャード モンソンヘーフェル / オライリージャパン", "97_things_every_software_architect_should_know", "Tue Oct 5 18:50:17 +0900 2009", "3", "ひさびさの技術書。薄っぺらいのはリハビリという意味でありがたい。一つ一つもblogを読む感覚で軽く読める。アーキテクトでは全く無いので、こんなもんかとスラスラと読む。内容はあまり覚えていないのだけど、唯一ためになったのは、ギリギリになるまで決断を遅らせるということかな。情報がない時点で早急に決めるのではなく、決めなければいけない時点には色々と情報もあるでしょうということで。海外の人に比べて、日本人の書いたものは一部を除いて比較的小難しい抽象論に終始している印象を受ける。自分の理解の浅さを棚にあげておいて言うと、わかりやすく言いたいことを伝えるという技術は劣っている気がした。", ["プログラマ", "oreilly"]],
["ハッカーズ", "http://www.amazon.co.jp/dp/487593100X", "スティーブン・レビー / 工学社", "hackers", "Tue Jul 16 18:50:17 +0900 2009", "3", "まさにハッカーたちの物語。3部作で構成され、それぞれハッカーを形付けた人たち、PCを作った人たち、PCのゲームを作った人たちの話。 \n\nおもしろい。夢中になって読んだ。という割には時間がかかった。歴史小説が好きな人はこういう気持なんだろうかと思った(違うと思うけど)。 \n\nハッカーが大切にしているものが分かる。自分たちの遊びたい、便利にしたいという欲求を邪魔するもの(物理的な鍵、パスワード、ソフトウェアのコピーガード)などなどをことごとく打ち破る。素直に、自分の欲求に従っているだけなのだろう。技術的なハードルが高いほど燃えるのも彼らの性か。 \n\nミニコンも授業で習った頃はミニでは全くなかった自分にとって、PCがパーソナルコンピュータもしくはマイクロコンピュータと言われた理由が良く分かった。 \n\nLispの父マッカーシーの人となりが少しだけというかおっさんキャラで出てきていたのが印象的だった。そう見られてたんだろうなと思い面白かった。研究室の教授がLispを学びに行ったのはスタンフォードに行った後だったと思う。\n\nハッカーたちのゲーム会社がいつのまにか嫌っていたはずのガチガチのIBMのような会社になろうとしたり。会社の規模と成長率を考えるとそうなるのだけど。IBM→Microsoft→Google→と歩んで行く道をここにも見て寂しい限り。 \n\nK&Rがいつ「そこら辺に捨ててあったPDPを使ってUnixを...」の下りが出てくるかと思ってたし、RMSもチョイ役だった。それでも、ジョブズよりもウォズニャックが出てくる正当なハッカーの本だと思う。この本を読んだらプログラムを書きたくなること請け合い。", ["プログラマの読み物"]],
["ライト、ついてますか", "http://www.amazon.co.jp/dp/4320023684", "ドナルド・C・ゴース\, G.M.ワインバーグ / 共立出版", "are_you_lights_on", "Tue Jul 9 18:50:17 +0900 2009", "2", "もうワインバーグはいいやと思っていたのだけど、本屋で見たら、薄くて軽そうな内容だったので、小説でも読む感覚で買ってみた。思いのほか軽すぎて1日持たなかったけど。\n\n寓話的な童話的な話で、本当の問題は何かを考えることを繰り返し述べている。\n\nイノベーションの神話に書いてあったアインシュタインの「問題を20日で解決しなければならないとしたら、私は19日かけてその問題を定義する」という文章を思い出した。 \n\n問題: トンネルでつけたライトの消し忘れでバッテリーが上がる故障に手を焼いて、看板に書いた文字は何か。(“ライトを消せ”は夜に不適合) \n\n以下、自分用メモ \n\n> 近頃、ピーターの法則というものが知られるようになった。それによれば、官僚は組織の中で、その無能の水準に達するまで昇進するという。またもっと最近には、ポールの法則というのもあらわれた。それによれば、現代の組織の中では、仕事のむずかしさはすべての官僚の有能さの水準を越える点まで増大するという。(p.112)これですべての官僚は無能だという説明がつく。 \n\n> 世界には2種類の人間がいる。仕事をする連中とほかの連中に仕事をさせる連中だ。仕事させやから遠ざかっていれば大丈夫。(p.123)", ["コンサルタント", "ワインバーグ"]],
["スーパーエンジニアへの道", "http://www.amazon.co.jp/dp/4320025636", "G.M. ワインバーグ/共立出版", "becoming_a_technical_leader", "Tue Jul 2 18:42:16 +0900 2009", "3", "ワインバーグ第2段。 \n\n技術者が管理者になってしまう時にどう折り合いをつけるのかについて知りたくて読もうと思った。しかし、残念ながら欲しい内容は載っていなかった。ただしこの本が悪いのではなくて、自分のケースに当てはまらなかっただけだ。この本では、マネージャーとリーダーとは異なり、リーダーシップは役職に関係なくどんな場面でも発揮できると述べている。 \n\n人間を機械扱いしてしまう誤り(cf. p.198のメモ)や、リーダーはなぜ自分で仕事をしてはいけないのか(cf. p.199のメモ)など胸が痛くなる文章が多かった。 \n\n重要なのは、自分を知る必要があるということ。他人にどう見られているかを含め自分を知らなければ、他人に影響を与えることなんてできるはずがない。 \n\nでもとにかく、この本の最大のミスは、訳者が変な本のタイトルをつけたことだ(原題は、Becoming a Technical Leader)。 \n\n以下、自分用メモ。<!--more--> \n\n> 結局のところ、リーダーとは他人が設定した進路を歩むことに満足しない人のことではないだろうか。(p.5) 7つの習慣に、リーダーとはジャングルの道を開拓する人とあったが、この文章には何かドキリとさせられた。 \n\n> リーダーシップはまた、変化を阻害するもとともなる。もしある変化を起こらせないようにしたいと思うなら、環境に対して次の三つのことのうちのどれかを、する必要がある。 \n\n> * M(Motivation) -- 動機を殺す 人々に、変化を起こしても評価されないと感じさせる。彼らが自分で何かをする必要を感じないようにするために、あらゆる手を打つ。人々がそれをすること自体を楽しむような事柄は、何にあれ推奨しないようにする。 \n* O(Organization) -- 混乱を育てる 協力することなど考えられないほどきつい競争が生じることを推奨する。資源は必要最小限よりほんの少したりない量に保持する。広く役立つ情報が広がらないように抑制するか、または意味のない言葉または紙のなだれの中に埋もれさせる。\n* I(Idea) -- アイディアの流れを抑制する 耳を傾ける代わりに批判することが可能な場合には、つねにそうする。自分のアイディアを最初に、しかももっとも声高に与える。提案したものを罰する。人々が共同作業しないようにする。そして何よりも、笑いを禁ずる。(p.19) こんな上司を数多く見てきた。 \n\n> 問題の全体像を把握することは必要だが、全体像はしばしば肝要な細部が一箇所どう違うかで変わってくるものだ。問題解決型のリーダーはこのことを認識していて、そういう細部に注意を払う。これに対してハッカーは、うまく動きそうに見える解決策を思いついたとたんに退屈して、何かほかのことに突進したがるものである。もっともだめなタイプのハッカーに取っては、その解決策の末端利用者は迷惑な存在以外の何者でもない。 (p.26) 自分に取っては反省させられる文章。これを回避する方法は自分で問題をつくるか、もしくは自分が問題解決したときに恩恵を得られる当事者になることだと思う。 \n\n> 自分自身に対する気づきが欠けていると、人は自分の誤りに気づかず、したがってそれをとらえてすばらしいものに変換する、ということができない。自分は最高の知性を持っている、と信じ込んでいる人は、他人の仕事を引き写そうという気を起こすことがないから、創造的な盗みの恩恵にあずかることができない。またすべての問題には一つただ一つの正解があると「知って」いる人は、アイディアを組み合わせることなんかばかばかしいと考えるので、結合を利用することはできない。(p.89) \n\n> 大切なのはできごとではない。できごとに対するわれわれの反応なのだ。(p.97) \n\n> 強い技術的素養を持っている人は、どんな仕事であれやりたくない仕事から、それを技術的な仕事に変換することによって逃れることができる。 \n仕事から逃げるためのこの方法を使われないようにするためには、リーダーは彼らがやっていることをつかまえて、ストップさせることができるだけの明敏さを持っていることが必要である。 (p.123) アハ。自分、よく逃げます。 \n\n>  自分でやりたいかどうかを選んでいることを自覚するために \n\n> * 「私はいつも、みんなを助けねばならない」を \n* 「私はほかの人を、 \n* 彼らが明確に助力を求めた場合や、 \n* 私が彼らを助けるための技能を持っている場合や、 \n* 私が彼らを助けるための資源を持っている場合や、 \n* 私が彼らを助けるという任務に適している場合や、 \n* 私が彼らを助けようと思う場合や、 \n* 私が助け損なったときにその失敗を許容できる場合には \n* 助けることができる」と考えると良い。(p.149から適当にまとめ) \n\n> 成熟した人とは、成年に達していて、自分自身と他人と自分が今置かれている環境に関する正確な認識に基づいて選択と決断をすることができ、それらの選択や決断が自分がしたことだということを承認することができ、それらがもたらす結果についての責任を受け入れる人のことである。(p.163) \n\n> 私は技術関係者の間からリーダーとして有望な人を見つけてくれ、と頼まれるたびに、この力の変換の概念を利用している。私はまず人格的な力に着目する。それはほとんど何にでも変換できる。その次に私は、力の変換をした経験を見る。それは、自分で使うために力を手に入れるという形から、ほかの人々に使わせるためにそうするという形に変換可能だからである。そういったことは、身につけるのに時間のかかることだが、人はそれを任命によるリーダーの列に加わったその日から必要とするのだ。それは教えることがむずかしい。スターたちの中にも、その使い方を決しておぼえられない人たちがある。(p.183) リーダーになると技術以外の政治的な力(組織をつくる力)が必要になるという話題からの文脈で。 \n\n> * 「...上司は、あなたは点数をためているんだ、といったの。そのあと二年間、私何百万点かためたと思うわ...」 \n* 「で、それを何に変換したの?」 \n* 「何にも。点数は変換が利かないの。...」\n*  ... \n* 「あら、私はマイナス点ってものの実在は信じているわよ。」(p.182) \n 読者は上司に対して、どれだけの点数をためているか。その点数で何が買えると思っているか。いつそれを行使するつもりか。(p.184) \n\n> ほかの連中にあれをやれこれ、これをやれという権利を持つのは誰か。 \nこの偉いさんゲームには、「無難にやれるためになら何でもしろ」という以外には何のルールはない。ある人々はほかの人々に罪悪感を抱かせたり、彼らの自尊心を粉々に打ち砕いたりする、というような手を使う。また強い人に擦り寄って、彼らの「やれという権利」をこすり取ろうとする人もある。「私は無力なんだから、あなたは世話をする義務があるのよ」戦略を使う人もあれば、「私は頭がいい(または年長だ、経験が深い、男だ、白人だ、金持ちだ、など)のだから、あなたは私の言うことを聞くべきだ」戦略を使う人もある。また「私は何をやりだすかわからない方だから、私に命令するときっと後悔するわよ」戦略というのもある。... \n...人々は偉いさんゲームをするのにあまりにも忙しく、その組織の本来の目的に合ったことをする暇がないものだ。(p.197) \n\n> もし読者がプログラマなら、読者は自分の命令が必ず実行される、ということに慣れっこになっているはずだ。 \n...機械と違って人間は、STOP命令に様々な解釈を下すことができる。そしてそれは、ファイルが保存してもらえたときはうれしいことだし、なかなかSTOPしてくれなかったときはいらいらする、ということになる。偉いさんゲームをしている人は、誰かが自分の命令を理解した上でやってくれるという幸運を当然視している。一方彼らは、命令が誤解されたときのいらいらを理解しない。そのため彼らは、ほかの人たちが偉いさんゲームで自分を負かそうとしている、という風に感じる。(p.198) \n\n> 手順書やメモを書くことによって組織しようと忙しくしているリーダーは、じきそれらに従うはずの人々との接触を失うことになる。(p.198) \n\n> 技術革新型の問題解決者の中には、それをさらにもっとずっと推し進めて、偉いさんゲームをする人々に対して軽蔑の念を持つ人もある。そういった独立心の強い人々は、命令を受けることを彼らの独創的な精神にとって有害と見なし、自分が十分革新的であれば、偉いさんゲームなどしないですむと考える。そういう人に出会うと、偉いさんゲームをやっている人は盲目的な怒りにとらわれる。その怒りは、私が自分の打数を数えるのはいやだといったとき、私のゴルフ仲間が示す怒りとよく似ている。(p.199) \n\n> 大きな障害が生じるのは、ほかの人が何かの作業をしていて困難に突き当たったということに、技術革新型のリーダーが気づいたときである。その理由がコミュニケーションが下手だからか、技能が不十分だからか、動機付けがたりたいためか、それとも仕事のやり方に関する見解の相違のためかに関わらず、技術革新型のリーダーは、最初にして最強の衝動として介入して仕事をやってやりたい、という気持ちを持つ。なぜか。実は自分なら、恐らくもっとうまくやれるからだ。そういった場合には、自分自身の過去の問題解決者としての成功こそ、ほかの人々を問題解決のために組織する上での最大の障害となる。 \nなぜその種の介入が、それほど大きな障害となるのか。問題解決型リーダーシップの目的は、必要な手段はどんなものでもいいから活用して、問題を解決してやることではないのか。この見かたにひそむ虚偽は、「仕事」という言葉の解釈にある。通常、リーダーの仕事は、単一の問題を解くことではなく、多くの問題が、しかも現在のみならず将来にまでまたがって解かれてゆく環境を作り出すことなのだ。(p.199) \n\n> リーダーの基本姿勢は、個々人が問題を解き、決定をくだし、それらの決定を実施に移すのではなく、むしろ全員が問題を解き、決定をくだし、それらの決定を実施に移すことができるような環境を作り出すことに向けられる。 \nこのモデルでは、組織作りとは厳格な規則を作り上げることではない。組織作りとは命令することでも命令を受けることでもない。仕事を片付けることである。(p.202) \n\n> リーダーシップは、生まれつきもつものではない。練習により身につく。(19章と20章の適当なまとめ) \n\n> 人はもし自分自身を他人が見るように見ることができないようだったら、大したリーダーにはなれない。(p.273)", ["チーム", "ワインバーグ"]],
["コンサルタントの秘密", "http://www.amazon.co.jp/dp/4320025377/", "G.M.ワインバーグ/共立出版", "secrets_of_consulting", "Tue Jun 27 18:40:29 +0900 2009", "3", "自分はSEではないし、ましてやコンサルタントではない、と思い読もうとしなかった本。他の人に勧められたのであっさり読む。他の人の勧められれば、幅を広げるためにも読もうと思っている。そして、事実今までにない考えに触れられることが多い。この本もそうだった。 \n\nコンサルタントはうさんくさい職業の代名詞だと思っている。人に儲かると言うのであれば、なぜそれを自分でやらないのか(電話のセールスにも言いたいけど話を聞く前に電話を切ってしまう)。まあ、とにかくコンサルタントについて知識が全くない自分にとって、どういうことをする人なのかが少し分かるような気がした。 \n\nコンサルタントは顧客の問題を解くことを助ける(コンサルタントが問題を解くのではない)。当たり前だが、解く問題や解き方については顧客の方が詳しい。しかし、それでも上手くいかないのだからコンサルタントを雇う。だから、コンサルタントは正攻法ではなく、今まで顧客が気づいていなかった事実を示す。考え方や視点を変えるような質問などを与えることで、問題を他の角度から考えさせるのだと思う。“そんなことは、最初から分かっていたよ”と顧客が満足そうに言っていれば、良いコンサルタントなのだと思う。コンサルタントの顧客の“自分で問題があると認めたくないが、その問題は解きたい”という立場は、確かに想像できておもしろい。これらの考え方は、コンサルタントと顧客の関係に留まらず、上司や同僚の立場にも使えると思う。要は、自分が使える人かどうかは、相手にとって役に立つかどうかで決まるという考え。そして、これは(自分でよくやっておきながら)よく忘れてしまう。 \n\n法則について体験的な事例を示し説明しており帰納的に述べることによって説得力をもたせている。あまり興味がない分野の本でもスラスラと読めたのはこの面白さのおかげだと思う。 \n\nコンサルタントになりたいわけではないのだけど、行き詰まった時に発想を色々と変えられると便利そうだということは思った。", ["コンサルタント", "ワインバーグ"]],
["道は開ける", "http://www.amazon.co.jp/dp/4422100521", "デール カーネギー / 創元社", "how_to_stop_worrying", "Tue Jun 24 18:40:29 +0900 2009", "2", "人を動かすを読んで調子に乗って買ってみた。悩みについて書いてあるのだけど、最初少し読んで、そういえば自分は悩んでないことに気づいた。アハ。\n\nこの本は、冷静に悩みと向き合うことが重要と言っているのであろう。悩みは何か、その原因は、対策は、いつやるかを考えろと言っている。\n\n自分の悩みは意外と少ない。これらのことが自然に出来ているのかもしれない。その他に心がけていることとして(確か7つの習慣にあった気がするけど)、アンタッチャブルなこと(自分がいくら気を揉んでも何ともならないこと)は気にしない、ということがある。電車が遅れたら本を読む時間が増えたと喜ぶのが良い人生を過ごす秘訣だと思う。\n\n以下、自分用メモ<!--more-->\n\n> 私たちの欠点は、無知ではなく無為なのである(p.17)無為=何もしないでぶらぶらとすること \n\n> 盲目であることが悲惨なのではなく、盲目状態に耐えられないことが悲惨であるだけだ(p.133)\n\n> あなたは、あなた自身で考えているとおりのあなたではない。だが、あなたの考えていることは、あなたそのものだ。(p.166) “われわれの人生とは、われわれの思考がつくり上げるものにほかならない”を表現した文。 \n\n> 幸福に酔いしれているようにふるまいながら、同時に浮かぬ顔で沈み込んでいることは肉体的に不可能だということだ(p.179) 行動により感情を支配する方法\n\n> バラを献じたる手に余香あり(p.259) 他人に良いことをすると自分も気持ちよくなる \n\n> 精神的作業だけでは人間は疲れない(p.322) 同時に疲労の大部分は精神的原因からきている。たしかにプログラミングの時は疲れずに、ドキュメント作成の時は疲れる。", ["自己啓発"]],
["明日は誰のものか", "http://www.amazon.co.jp/dp/4270000716", "クレイトン・M・クリステンセン / ランダムハウス講談社", "seeing_whats_next", "Tue Jun 21 18:40:29 +0900 2009", "2", "イノベーションのジレンマ、イノベーションへの解に続く第3段。今までの理論を使って、今起きているイノベーションがどのような道をたどるかの予測を可能にしようという意欲作。とは言っても、読者にそのような力が付くかと言われると疑問が残る。本書の中でも言われていたけど、実際に分からないことが起こるのが世の中の常であり、それを予測することはできない。ただ、実際に起きたことに対してこの理論を適用することで説明が付くことがある、ということを示しているにすぎない。それでも、教育、航空、半導体、ヘルスケア、国家、通信といった多様の業種に当てはめてこれらを説明することによって、その適用力の幅広さを示している。単に、読み物としてもおもしろかった。 \n\n結局、当たり前だが、未来のことは予想できない。どこかの文章で読んだのだが、自分がベンチャーキャピタルをやっているとして、スタンフォード出の賢そうだが小生意気な若者二人がこれが新しい検索エンジンだと主張されたときに出資できるかということだ。すでにYahoo!やAltaVistaなどの大手が莫大な費用をつぎこんでおり、あろうことか彼らには収益の方法は全く考えていないということだ。未来を予測して出資できる人がどれくらいいるだろうか。 \n\nこの本を読んで、新しいサービスを考えるときの参考になったことが最大の収穫だった。今まで新しいサービスを考えるときに「既存の不便な所を探す」アプローチをとっていた。しかし、これは生き残りのアプローチであり、既存のサービスを改善する、すなわち既存サービスを持っている企業には適当だが、全く新しいサービスを作り出す人にとっては(既存サービスがないのだから)適切ではない。そうではなく「すでにある技術を使っていないのはなぜか」を考えるということが良い方法と感じた。なぜなら、この問題を見つけそれを解決することにより非消費者をターゲットとした新しいサービスを実現することが出来る。これが破壊的なイノベーションになる。例えば、トランジスタラジオは既存の真空管ラジオより音質は悪いが、若者に親が嫌がる音が大きい音楽を好きな所で聞ける自由を手に入れさせた点で大きく飛躍した。既存サービスより性能が低くても非生産者がよろこんで使い始めるような特徴を持ったサービスを考えていきたい。", ["イノベーション", "Chrisstensen"]],
["プログラマーのジレンマ", "http://www.amazon.co.jp/dp/4822283801", "スコット・ローゼンバーグ / 日経BP社", "dreaming_in_code", "Tue Jun 7 18:40:29 +0900 2009", "3", "この本を知ったのはJoelのコラムだった。日本語訳が出たのを知って買ってみた。\nhttp://local.joelonsoftware.com/wiki/%E3%83%93%E3%83%83%E3%82%B0%E3%83%94%E3%82%AF%E3%83%81%E3%83%A3%E3%83%BC \n\n何百万ドルの資金を投入し、優秀な技術者を集めて、3年の月日を費やしても、ソフトウェア(1.0版)をリリース出来なかった内情が書かれている、というふれこみだった。 \n\n多くの共通経験がある自分には興味深く読めた。フルタイムのオープンソースの参加し, P2Pに夢を見て、各問題に対してワーキンググループを設置し、ドックフードを食べた(自分たちのプロダクトを自分たちで使う)。 \n\nしかし、内容自体は期待はずれだった。プロジェクトが遅れる原因がおもしろくなかった。ソフトウェア開発者なら誰もが想像できるあたり前のことだったからだ(そのことを説明している点が一番大きな存在意義なのかもしれないし、そして本当に何回も同じ過ちを犯すのだ)。所々で脱線話として登場するコンピューターサイエンスの大御所の話も知っているものが多かった。その内容も、一般の人向けなので仕方がないが、核心を突いていないように思える箇所が多くあった。\n\nそれでも短期間で読んでしまったのは小説よりはおもしろかったことの証拠なのかもしれない。", ["プログラマの読み物"]],
["人を動かす", "http://www.amazon.co.jp/dp/4422100513", "Dale Carnegie/創元社", "how_to_win_friends", "Tue Jun 6 18:31:36 +0900 2009", "4", "下のメモの“父は忘れる”を読んで衝動買いしたけど、良い本だった。 \n\n**感想 その1**\n\nもう少しお互いを信頼することでどんなに仕事がしやすくなるだろう。互いの気持ちを尊重し、ミスした相手を励まし合い、共通の目標に向かって仕事をする。この本には、それを実現するためのヒントが書かれている。一言でその根底を言えば、“自分ではなく相手のために”。環境が悪いからではなく、自分がその環境を作る。その他にも一言で言ってしまえば当たり前の原則を、優れた例をいくつも持ち出して、本当に重要であることを納得させてくれる、優れた本だ。 \n\n**感想 その2** \n\nこの本は、部下の仕事が信頼できずにマイクロマネージメントする人、人のミスに対して“何でこんなミスをしたのか”を怒りから問うような人や、議論に勝ったり怒鳴ることで人を動かそうとする人に読んでほしい。それにより、上司に怒られないように、もしくはミスをしないことを重要視する仕事になり、本人の能力を活かしきれない環境を作り出していることに気づくべきだ。われわれはミスを必ずするが愚かではない。この本は、人が信頼されてこそ、また自分で仕事をしている実感を持ってこそ、最大の能力を発揮することができることを示している優れた本だ。 \n\n上司を含め他の人にこの本を読んで欲しい時、二つの感想のうちどちらを書くべきか。下の感想を読んで、“自分はおろかな管理者だから読んでみよう”と言う人はいない。本当にさせたい時は、相手の立場にたって物事を進めようということが、この本に書かれている。 \n\nまた、この本で感心したのは、優れた例を示しながら読者に“本当に重要だ”と納得させている点である。というのは、この本では“人を動かすためにはその人がそう思うようにすることが第一だ”と説いており、まさにそれを実践しているからだ。 \n\n古典的な本であることと“人を動かす”というその仰々しい本のタイトルで避けていたけど、読みやすい文章で豊かな人生を送るための教訓が数多く載せられている良い本だった。 \n\n以下、自分用メモ<!--more-->\n\n> 父は忘れる リヴィングストン・ラーネッド \n\n> 坊や、きいておくれ。おまえは小さな手に頬をのせ、汗ばんだ額に金髪の巻き毛をくっつけて、安らかに眠っているね。お父さんは、ひとりで、こっそりおまえの部屋にやってきた。今しがたまで、お父さんは書斎で新聞を読んでいたが、急に、息苦しい悔恨の念にせまられた。罪の意識にさいなまれておまえのそばへやってきたのだ。 \n\n> お父さんは考えた。これまでわたしはおまえにずいぶんつらく当たっていたのだ。おまえが学校へ行く支度をしている最中に、タオルで顔をちょっとなでただけだといって、叱った。靴をみがかないからといって、叱りつけた。また、持ちものを床のうえに放り投げたといっては、どなりつけた。 \n\n> 今朝も食事中に小言をいった。食物をこぼすとか、丸のみにするとか、テーブルにひじをつくとか、パンにバターをつけすぎるとかいって叱りつけた。それから、おまえは遊びに出かけるし、お父さんは駅へ行くので、一緒に家を出たが、別れるとき、おまえはふりかえって手をふりながら、「お父さん、行っていらっしゃい！」といった。すると、お父さんは、顔をしかめて、「胸を張りなさい！」といった。 \n\n> 同じようなことがまた夕方にくりかえされた。わたしが帰ってくると、おまえは地面にひざをついて、ビー玉で遊んでいた。ストッキングはひざのところが穴だらけになっていた。お父さんはおまえを家へ追いかえし、友だちの前で恥をかかせた。「靴下は高いのだ。おまえが自分で金をもうけて買うんだったら、もっとたいせつにするはずだ！」ーこれが、お父さんの口から出たことばだから、われながら情けない！ \n\n> それから夜になってお父さんが書斎で新聞を読んでいるとき、おまえは、悲しげな目つきをして、おずおずと部屋にはいってきたね。うるさそうにわたしが目をあげると、おまえは、入口のところで、ためらった。「何の用だ」とわたしがどなると、おまえは何もいわずに、さっとわたしのそばにかけよってきた。両の手をわたしの首に巻きつけて、わたしにキスした。おまえの小さな両腕には、神さまがうえつけてくださった愛情がこもっていた。どんなにないがしろにされても、決して枯れることのない愛情だ。やがて、おまえは、ばたばたと足音をたてて、二階の部屋へ行ってしまった。 \n\n> ところが、坊や、そのすぐあとで、お父さんは突然何ともいえない不安におそわれ、手にしていた新聞を思わず取り落としたのだ。何という習慣に、お父さんは、取りつかれていたのだろう！叱ってばかりいる習慣ーまだほんの子供にすぎないおまえに、お父さんは何ということをしてきたのだろう！決しておまえを愛していないわけではない。お父さんは、まだ年端もゆかないおまえに、むりなことを期待しすぎていたのだ。おまえをおとなと同列に考えていたのだ。 \n\n> おまえのなかには、善良な、立派な、真実なものがいっぱいある。おまえのやさしい心根は、ちょうど山の向こうからひろがってくるあけぼのを見るようだ。おまえがこのお父さんにとびつき、お休みのキスをしたとき、そのことが、お父さんにははっきりわかった。ほかのことは問題ではない。お父さんは、おまえに詫びたくて、こうしてひざまずいているのだ。 \n\n> お父さんとしては、これが、おまえに対するせめてものつぐないだ。昼間こういうことを話しても、おまえにはわかるまい。だが、あすからは、きっと、よいお父さんになってみせる。おまえと仲よしになって、いっしょに喜んだり悲しんだりしよう。小言をいいたくなったら舌をかもう。そして、おまえがまだ子供だということを常に忘れないようにしよう。 \n\n> お父さんはおまえを一人前の人間とみなしていたようだ。こうして、あどけない寝顔を見ていると、やはりおまえはまだ赤ちゃんだ。きのうも、お母さんに抱っこされて、肩にもたれかかっていたではないか。お父さんの注文が多すぎたのだ。(p.29) \n\n> リンカーンはあるとき、同僚とけんかばかりしている青年将校をたしなめたことがある。 \n「自己の向上を心がけているものは、けんかなどするひまがないはずだ。おまけに、けんかの結果、不機嫌になったり自制心を失ったりすることを思えば、いよいよけんかはできなくなる。こちらに五分の理しかない場合には、どんなに重大なことでも、相手にゆずるべきだ。百パーセントこちらが正しいと思われる場合でも、小さいことならゆずったほうがいい。細道で犬に出会ったら、権利を主張してかみつかれるよりも、犬に道をゆずったほうが賢明だ。たとえ犬を殺したとて、噛まれた傷はなおらない。(p.164) \n\n> “意見の不一致を歓迎せよ”ー「ふたりの人間がいて、いつも意見が一致するなら、そのうちのひとりはいなくてもいい人間だ」ということばを銘記すべきだ。思いおよばなかった点を指摘してくれる人がいたら感謝しなければならない。この指摘は、重大な失敗をあらかじめ防ぐきっかけをつくってくれているのだ。 \n“最初に頭をもたげる自己防衛本能に押し流されてはならない”ー不快な状況に直面したとき、まずあらわれてくるのは、自分の立場を守ろうとする本能だ。気をつけねばならない。冷静にかまえ、最初の反応を警戒する必要がある。あなたの最悪の人がらが突出し、最善の人がらが隠れてしまうかもしれないのだ。 \n“腹を立ててはいけない”ー何に腹を立てるか、それで人間の大きさが決まってくる。(p.164) \n\n> 「われわれは、あまりたいした抵抗を感じないで自分の考え方を変える場合がよくある。ところが、人から誤りを指摘されると、腹を立てて、意地を張る。われわれは実にいいかげんな動機から、いろいろな信念を持つようになる。だが、その信念をだれかが変えさせようとすると、われわれは、がむしゃらに反対する。この場合、われわれが重視しているのは、明らかに、信念そのものではなく、危機にひんした自尊心なのである... <snip> ...われわれは、真実と思いなれてきたものをいつまでも信じていたいのだ。その信念をゆるがすようなものがあらわれれば、憤慨する。そして、何とか口実を見つけ出してもとの信念にしがみつこうとする。結局われわれのいわゆる議論は、たいていの場合、自分の信念に固執するための論拠を見いだす努力に終始することになる。」(p.172) \n\n> 二千五百年前に、中国の賢人老子が、現代にも通用することばを残している。 \n「河や海が数知れぬ渓流のそそぐ所となるのは、身を低きに置くからである。そのゆえに、河や海はもろもろの渓流に君臨することができる。同様に、賢者は、人の上に立たんと欲すれば、人の下に身を置き、人の前に立たんと欲すれば、人のうしろに身を置く。かくして、賢者は人の上に立てども、人はその重みを感じることなく、人の前に立てども、人の心は傷つくことがない」。(p.228) \n\n> 相手はまちがっているかも知れないが、彼自身は、自分が間違っているとは決して思っていないのである。だから、相手を非難してもはじまらない。非難は、どんなばか者でもできる理解することにつとめねばならない。賢明な人間は、相手を理解しようとつとめる。(p.229) \n\n> 「みずからかえりみて、自分に対する強烈な関心と、自分以外のものに対するいいかげんな関心とを比較し、つぎに、その点については、人間はみな同じであることを考えれば、あらゆる職業に必要な原則を把握することができる。すなわち、人を扱う秘策は、相手の立場に同情し、それをよく理解することだ」。(p.230) \n\n> ハーツバーグは工場労働者から会社重役にいたるあらゆる階層の人たち数千人の仕事に対する態度を研究した。仕事への意欲をもっとも強くかき立てる要件として、この行動科学者が発見したのは何であったか？金？良い労働条件？諸手当？いずれも否。最大の要件は、仕事そのものだったのである。仕事がおもしろければ、誰でも仕事をしたがり、立派にやりとげようと意欲を燃やす。(p.264) \n\n> まず相手をほめておくのは、歯科医がまず局部麻酔をするのによく似ている。もちろん、後でガリガリやられるが、麻酔はその痛みを消してくれる。(p.274) \n\n> 人を批判する際、まずほめておいて、つぎに“しかし”ということばをはさんで、批判的なことをいいはじめる人が多い。たとえば、子供に勉強させようとする場合、つぎのようにいう。 \n「ジョニー、お父さんもお母さんも、お前の今学期の成績があがって、本当に鼻が高いよ。しかし、代数をもっと勉強していたら、成績はもっとあがっていたと思うよ」。 \nこの場合“しかし”というひとことが耳にはいるまでジョニーは激励されて気をよくしていただろう。ところが、“しかし”ということばを聞いたとたん、今の褒め言葉がはたして本心だったのかどうか疑いたくなる。結局は批判するための前置きにすぎなかったように思えてくる。信頼感がにぶり、勉強にたいするジョニーの態度を変えようとするねらいも失敗に終わる。 \nこの失敗は“しかし”ということばを、“そして”に変えると、すぐに成功に転じる。 \n「ジョニー、お父さんもお母さんも、お前の今学期の成績があがって、本当に鼻が高いよ。そして、来学期も同じように勉強をつづければ、代数だって、ほかの科目と同じように成績があがると思うよ」。 \nこういえば、ジョニーは、ほめことばのあとに批判がつづかないので、素直に耳をかたむけるだろう。これで、ジョニーに変えさせようとした問題点が遠まわしに知らされたことになり、その結果、彼は期待にこたえようと努力するだろう。(p.276) \n\n> ヤングはだれに向かっても決して命令的なことはいわなかったそうだ。命令ではなく、暗示を与えるのだ。「あれをせよ」「そうしてはいけない」などとは決していわなかった。「こう考えたらどうだろう」「これでうまく行くだろうか」などといったぐあいに相手の意見を求めた。手紙を後述して書かせたあと、彼は「これでどう思うかね」とたずねていた。彼の部下が書いた手紙に目を通して「このところは、こういういい方をすれば、もっとよくなるかもしれないが、どうだろう」ということもよくあった。彼はいつも自主的に仕事をやらせる機会を与えたのだ。決して命令はせず、自主的にやらせる。そして、失敗によって学ばせた。 \nこういうやり方をすると、相手は自分のあやまちが直しやすくなる。また、相手の自尊心を傷つけず、重要感を与えてやることにもなり、反感のかわりに協力の気持を起させる。(p.286) \n\n> わたしは手短に報告し、自分に手落ちがあったので、次の会議までにもう一度調査するむねを説明しました。わたしは腰をおろし、部長の怒りのことばを待ち受けました。 \nところが、部長は、わたしの労をねぎらい、新しい企画には、ミスはつきものだといい、再調査が正確で有意義なものになることを確信すると述べました。部長は私を信じており、私がベストをつくして、なお失敗したのは、能力不足ではなく、経験不足からだと、全員の前でいってくれたのです。 \n会議が終って、わたしは、二度と部長の期待にそむくまいと心に誓いながら、胸を張って部屋を出ました(p.293) \n\n> 人を動かす3原則: 盗人にも五分の理を認める/重要感を持たせる/人の立場に身を置く \n\n> 人に好かれる6原則: 誠実な関心を寄せる/笑顔を忘れない/名前を覚える/聞き手にまわる/関心のありかを見ぬく/心からほめる \n\n> 人を説得する12原則: 議論をさける/誤りを指摘しない/誤りを認める/おだやかに話す/“イエス”と答えられる問題を選ぶ/しゃべらせる/思いつかせる/人の身になる/同情を持つ/美しい心情に呼びかける/演出を考える/対抗意識を刺激する \n\n> 人を変える9原則:まずほめる/遠まわしに注意を与える/自分のあやまちを話す/命令をしない/顔をつぶさない/わずかなことでもほめる/期待をかける/激励する/喜んで協力させる \n\n> 幸福な家庭をつくる7原則: 口やかましくいわない/長所を認める/あら探しをしない/ほめる/ささやかな心づくしを怠らない/礼儀を守る/正しい性の知識を持つ", ["自己啓発"]],
["Subject To Change", "http://www.amazon.co.jp/dp/4873113857", "Peter Merholz\, Brandon Schauer\, David Verba\, Todd Wilkens / オライリージャパン", "subject_to_change", "Tue Oct 27 18:29:16 +0900 2008", "3", "単なるmp3プレイヤーを作るのではなく、iPodという優れたサービスを作るための考え方みたいなものが書かれていると認識。その考えを一言で言えば、“製品ではなく顧客の体験を重視せよ”であり、コトラーの言葉を借りれば、“ドリルを買う人は、実のところドリルで開ける穴を買うのである”か。まずはこの重要性に気づこうというレベルかな。重要ではないと思う人は下のURLのp.100の図6-2を見ると良い。362社にアンケートし、95%が自社を「顧客中心」であると回答し、80%が「優れた体験」を提供していると回答しているが、その企業の顧客が実際にそう感じている割合はわずか8%だった。iPod並みの感動をそう経験しないことからもこの数字は妥当だと思う。 \n\n本屋で立ち読みした時は、“これは”と思って衝動買いしたのだけど、そんなに良くはなかった。逆にイノベーションの神話の完成度の高さを再認識した。気になったのは、一般的で抽象的な言葉が多く並んだ文章が続いたところ。自分の頭の悪さを棚に置けば、すぐれた本は納得させる具体例を用いながらその意味や重要性を説明するが、普段接しない言葉の抽象論が続く箇所があり、ちょっとついていけなかった。\n\nもちろん、悪い本ではない。上に示したのは一部であり、ほとんどの内容は歴史的な実例を用いて丁寧に記述されている。\n\n珍しく、レビュー風に書いたのは、あまり“これは”と思うことがなかったことの表れか。訳者後書きの2～3ページが、この本の内容をすべて言い表していると感じた。Google Book Searchには残念ながら含まれず。 \nhttp://books.google.co.jp/books?id=d8aVVprXuA0C&printsec=frontcover#PPP1,M1 ", ["イノベーション", "oreilly"]],
["イノベーションへの解", "http://www.amazon.co.jp/dp/4798104930", "クレイトン・クリステンセン\, マイケル・レイナー/翔泳社", "innovetors_solution", "Tue May 8 18:29:16 +0900 2009", "4", "名著「イノベーションのジレンマ」の続編。前作は顧客主義を徹底している良い会社ほど破壊的イノベーションに負けてしまうジレンマを書いていたが、本作はどうすれば破壊的イノベーションを生み出し持続的な会社のの成長を実現できるかを書いている。 \n\n相変わらず豊富な事例や説得力のある文章で、丁寧に説得させられる。フムリと思えることが数多くあり有用だった。なによりも、自分の研究開発の仕事について、考える機会や視点を多く提供してもらったことが一番役に立った。 \n\n前作に比べて、マーケティングや研究開発分野に特化しておらず、会社経営全体にわたって記述がなされていた。例えば、コア・コンピタンスに対する考え(cf. p.196\, 201のメモ)や人材に関する考え(cf. p.218\, 220\, 242のメモ)など。その記述も良い理論に基づくものであり、この手の本を読んだことのない自分にとっては為になる部分が多かった。また、著者の考えに共感することが多かった。 \n\n意外だったのは自分の部署が破壊的イノベーションを生み出すのにそんなに悪い環境ではないこと。逆に言えば生み出せていないのは自分の力不足だということを直視させられた。 \n\nもっと早く読むべきだったと思える良い本だった。 \n\n以下、自分用メモ<!--more-->\n\n> どの大企業でも、経営陣の証人を得るために加工されパッケージされたアイデアの集合は、底辺に溢れているアイデアの母集団とはまるで違う。(p.19 中間管理職のアイデアの選別、形成方法。中間管理職がその上司のために市場の規模や信頼性のある裏付けされたデータを求められるため。通常このような市場は今日ではまだ小さい。)\n\n> 正しく分類する\n(p.23 一度成功した理論をどこでも使おうとするマネージャへの戒め。どの状況でこの理論がつかえ、どの状況でこの理論が使えないのかを知る必要がある。)\n\n> p.42 「破壊の実例」の適当なまとめ\n破壊のイノベーターはコスト競争が厳しい市場にコスト優位性を持って攻める。従来の企業は利益率が低いその市場を喜んで捨て、より高い所へ行く。この判断は合理的である。これを続けていくとシェアがいつの間にか無くなる。一方イノベーターも、自分達だけがその市場のプレイヤーになると、価格が破壊され、既存起業と争っていたときほど利益率は得られなくなる。\n\n> 1960年代、70年代、そして80年代における日本経済の奇跡の原動力が、破壊的イノベーションだったということだ。日本の破壊者たち--ソニー、トヨタ、新日本製鐵、キヤノン、セイコー、ホンダなど--も他の破壊者と同様、ハイエンドにまで上り詰め、今やそれぞれの市場で世界最高品質の製品を製造している。そして日本の巨大企業も、自分たちが破壊した欧米起業と同様、今や成長の余地がない、市場のハイエンドで行き詰まっているのだ。米国の大手企業がハイエンドに釘付けになっても、これまで米国経済が長期に渡って停滞したことがない理由は、人々が大手企業を止めて、ベンチャー投資資金を得て下位市場へ移り、新たな破壊的成長の波を生み出すことができたからだ。それに引き換え日本経済は、これを可能にする労働市場の流動性やベンチャー・キャピタルの基盤を欠いている。そんなわけで、日本は破壊ゲームを一度行って莫大な利益を得たものの、今や行き詰まっているのである。日本のマクロ経済の停滞には、ミクロ経済的な原因があるように思われる。\n(p.62 日本が経済的に行き詰まっている理由。Webなどで最近出てきている日本のベンチャーにがんばってもらいたい。まだ日本レベルだけど。)\n\n> そのアイデアが新市場型破壊の戦略になり得るか。次の質問のうち少なくても一つ、一般的には両方答えがイエスでなければならない。\n\n> * これまで金や道具、スキルがないという理由で、これをまったく行わずにいたか、料金を支払って高い技能を持つ専門家にやってもらわなければならなかった人が大勢いるか？\n* 顧客はこの製品やサービスを利用するために、不便な場所にあるセンターに行かなければならないか？\n\n> ローエンド型破壊の可能性の質問。次の二つの条件が満たされるなら、そのアイデアには可能性がある。\n\n> * 市場のローエンドには、価格が低ければ、性能で劣る(が十分良い)製品でも喜んで購入する顧客がいるか？\n* こうしたローエンドの「過保護された」顧客を勝ち取るために必要な低価格でも、魅力的な利益を得られるようなビジネスモデルを構築することができるか？\n(p. 64 アイデアを破壊的戦略として形成するための三つのリトマス試験の二つ)\n\n> p.89 「顧客が求める製品とは」の適当なまとめ\n顧客が求める製品とは従来の年齢などの属性に基づく市場分析ではなく、「何を片づけたいか」という状況に基づく分析をすべきである。それにより、例えばブラックベリーでは、パームのスケジュール帳やカメラ機能を付け足してアーミーナイフ化させるのではなく、新しいゲームの追加などにより「退屈な時間を和らげる」という状況の「なにもしない」などのライバルに勝つ可能性を与えてくれる。\n\n> 顧客にそれまで関心のなかった用事を優先することを求めるアイデアには、成功の見込みはほとんどない。顧客は新製品が手に入るようになったからといって、用事の方を変えることは絶対にないのだ。逆に、顧客が既に片づけようとしていた用事をより効果的に手軽にやり遂げるのに役立つ新製品なら、成功するだろう。\n(p.120 e.g. デジカメの赤目補正ソフトの機能やアルバム管理機能は、結局使われていない)\n\n> p.125 「自社製品にとって最高の顧客とは」の適当なまとめ\n自社製品にとって最高の顧客とは性能が既存のものより低くても喜んでくれる人。すなわち、今まで何も持っていなかった人。(e.g. ソニーのトランジスタラジオは購入な真空管ラジオに手が出なかった人に喜びを与えた)\n\n> p.141 既存企業が破壊的イノベーションに追随する方法\n破壊的イノベーションを上層部から脅威として取り組みの確約を得た後で、これを機会として捉えるため独立した組織部門に事業化の責任を課す。\n\n> p.153 どのような時に仕様をオープンにしてどのような時に仕様をクローズにするのか\n顧客が既存の技術に対して性能が十分であればオープンにしてコストを下げ、そうでない場合クローズにして性能を上げ差別化を図る。(オープンソースはこれらの議論にうまく乗る気がする)\n\n> p.190 PCの利益の流れ\nMicrosoftとIntelに利益が留まり、メモリ供給のサムスンなどは利益は流れる。アプライド・マテリアルなどDRAMメーカ向け製造装置企業におちた。その差は顧客にとって性能が十分だったか否かだった。(自分達の会社はどこに位置できるか)\n\n> p.196 コア・コンピタンスとROA最大化のデス・スパイラル\n部品供給業者とモジュール型パソコン組立て企業とのやりとり\n「ご承知のように、マザーキーボードは実際、コンピュータの心臓部なんです。御社のためにコンピュータ全体を組立てさせてください。製品組立て業務はどのみち御社のコア・コンピタンスではないのですし、社内で組み立てられるよりずっとお安いようですよ」\n「ふむ、それは素晴らしいアイデアだ」とTCCの経営者は答える。「どっちみち組立て業務は我が社のコア・コンピタンスではないのだし、君たちが製品組立てをやってくれれば、あれだけの製品資産をバランスシートから取り除ける」。\n「わたしどもが御社のコンピュータを組み立てさせていただいている以上、どうして御社が厄介な物流のインバウンド・アウトバウンド業務を処理される必要があるでしょう？業者との交渉やお客様への完成品のお届けはお任せ下さい。サプライ・チェーンの管理はどのみち御社の本当のコア・コンピタンスではないんですから。それに御社が管理されるよりずっとお安くできますよ。」\n「それはいい考えだ。」\n「今度は御社のためにコンピュータの設計をやらせていただけませんか？」\n「それはいい考えだ」\n\n> 競争力は、単に得意だと自負する業務を行うことではなく、むしろ顧客が高く評価する業務を行うことから生まれる。そして、競争基盤が変化しても競争力を保ち続けるためには、過去の栄光をもたらしたものにしがみつく代わりに、新しい物事を学習する意欲と能力を持つことが、絶対的に必要なのである。既存企業にとっての挑戦は、航海の途中で船を建て直すことだ。船から厚板を一枚一枚はぎ取って選外に投げ捨て、誰かがその破片を使って新しい、速いボートをつくるに任せることではないのだ。\np.201\n\n> Seeing What's Next (p.213 著者の次の本)\n\n> p.218 正しい資質を持った人材が適材ではない理由\n企業の候補者選考委員会や採用担当役員は、マネージャー候補者を、正しい資質があるかどうかで分類することが多い。たとえば、「コミュニケーション能力が高い」とか、「結果重視」、「人を扱う能力に長けている」といった表現を用いれば、成功するマネージャーを特定できる、という考え方だ。そして、これまで一度も失敗することなく成功し続けている人材が、これからも成功するはずだと考える。つまり実績があり「ライトスタッフ」(正しい資質)の属性を持った人材が、リスクの高い新事業を首尾良く運営出きるという理屈だ。だが本書の用語で言えば、「ライトスタッフ」の発想は誤った区分につながるのである。\nこれに代わるものとして、状況に基づく理論がある。これは、モーガン・マッコール教授が主張する理論で、適材適所時を図る経営者にとって、はるかに確実な指針となる。マッコールは、人々が新しい任務で成果を上げる手腕であるマネジメント能力と直感が、それまでのキャリアにおける経験で取り組んだ問題が、その学校の提供する『カリキュラム」を構成する。したがって、マネージャーが持っている、または持っていないと期待されるスキルは、さまざまな経験の学校で履修した、またはしなかった「科目」に大きく影響される。\n\n> 新しい任務で成功するために必要なスキルを確実に習得したマネージャーを選ぶには、候補者が過去にどんな問題に取り組んできたかを検討する必要がある。問題解決に成功したかどうかは、それほど重要でない。それよりも問題に取り組むことを通じて、次に同様の問題に直面した時に対処するための、スキルや直感を養ったかどうかの方が大切だ。将来の成功を過去の実績から予測することの問題は、自分の努力とは無関係な理由で成功する場合があることだ。それに人間は、成功より失敗からずっと多くを学ぶ。失敗することと、失敗から立ち直ることは、経験の学校の特に重要な科目だ。処置を誤っても、その過ちから立ち直ることを通じて直感を養えば、次からはうまく地雷源を走破できるようになるというものだ。(p.220)\n\n> 成功のほろ苦い報酬の一つは、起業が大規模になるにつれ、小さな新興市場に参入する能力をすっかり失ってしまうことだ。成功した大企業は、莫大な資源を思い通りにできるようになる。だが彼らには、その資源を未来巨大市場である、今日の小さな破壊的市場に投入することはできない。価値基準がそれを許さないからだ。(p.231)\n\n> p.237 「図7-1 適切な組織構造と運営主体を見つけるための枠組み」の4つの軸\n組織のプロセスと適合性(新しいプロセスが必要/従来のプロセスで対応)\n商品化担当構造の位置(自立的組織が必要/主流組織が担当)\n開発チームの構造(重量級チーム/軽量級チーム/機能的組織)\n組織の価値基準との適合性(適合性が低い(破壊的)/適合性が低い(持続的))\n\n> 潜在能力の高い社員を特定するための人事考課の記入用紙では、もちろん基本的な技術的要件や知的要件は網羅するが、「ライトスタッフ」の属性に基づく順位付けは求めないようにする。かわりに、学習重視の尺度に焦点を絞る。たとえば、「進んで学習する」「意見を受け入れ、それを活かす」「適切な質問をする」「物事を新しい観点から捉える」「過ちから学ぶ」といった尺度だ。優れた学習者の属性が業績という形で現れることも当然あるが、狙いはあくまで新しいスキルを習得する意欲にあふれた社員を特定することだ。 p.242\n\n> 難題に直面したマネージャーが、その問題に適した解決策を適用する方法を怠り、万能型の解決策を求める傾向にあるのは、実に残念なことだ。たとえば1990年代、多くの経営者がこの特定の問題にとって、重量級チームが「正しい答え」だと結論付け、開発担当組織全体であらゆるプロジェクトに重量級チームを用いた。数年後、そのほとんどが、重量級チームはスピードや一体化といったメリットがあるがコストがかかりすぎると判断し、今度は組織全体を再び軽量級モードに戻してしまった。本文で引き合いに出した企業の中にも、こうした問題に悩み、適切な状況で適切な種類のチームを用いる方法をまだ学ぶに至っていないものがある。(p.247)\n\n> もし被企業の成功を導いた本当の要因が、プロセスや価値基準にあるなら、買収側の経営者がなによりやってはいけないのは、この会社を新しい親会社に統合することだ。統合すれば、吸収された企業のプロセスや価値基準の多くが消滅してしまう。吸収された企業は、買収側のビジネスのやり方を強制され、新成長事業の計画も買収企業の判断基準に沿って評価されるようになるからだ。プロセスや価値基準が成功要因なら、より良い戦略は、被買収企業を独立採算制にして、そのプロセスや価値基準に資源を注入することだ。こうすれば、実質的に新たな能力を買収することになる。\nそれにひきかえ、買収の主な根拠が企業の資源にあるなら、親会社への統合は意味がある。つまり実質的には、親会社の既存能力を活用する一つの手段として、買収した人材や製品、技術、顧客を親会社のプロセスに接続することになる。(p.249)\n\n> イノベーションを成功させることが一見困難で予測不能であるように思われる主たる理由は、企業がしばしば有能ではあるが、安定企業特有の問題に取り組むために精密化されたマネジメント・スキルを備えた人材を活用するからだ。このようなマネージャーは、新しい課題には適さないプロセスや価値基準、という枠の中で仕事をすることになる。経営者は、一つのやり方を何でも当てはめることを止めなければならない。課題にあったプロセスや価値基準を持つ組織に有能な人材を配置するよう心を砕くことが、経営者の力点なのだ。(p.255)\n\n> 近代市場最も革新的な企業の一つであるスリーエム(3M)は、中核的な技術基盤を様々な用途市場に適用する能力に長けている。3Mはすべての製品に、比較的高い粗利益率目標を達成することを義務づけており、このおかげで、多数の小規模で高級な製品ニッチに注力し、新製品が大規模な量産ビジネス化することを防ぐことができている。(p.263)\n\n> p.264-266の適当なまとめ\nインテルがDRAMからプロセッサの企業になったのは1ウェハー当たりの粗利益率が高い製品をシステマティックに選んだため。戦略は資源配分プロセスから出てくるものによって決定されるのであり、プロセスの中に入る意図や提案によって決定されるものではない、という例。\n\n> 「創発的戦略を積極的に受け入れる経営者は、すべてがまだ完全に理解されないうちに行動に移ることができる--状況が不変だという幻想にとらわれることなく、変化しつつある現実に対応するために行動することができるのだ。...創発的戦略という概念そのものが、有効なパターンや一貫性を追求しながら、一つひとつ行動を起こして、何が有効かを学習していく、ということを意味するのである」。(p.268)\n\n> p.279 「表8-1 創発的戦略プロセスをマネジメントするための発見志向計画法」の「破壊的イノベーション:発見志向計画法」の部分(持続的イノベーションは概ねこの逆)。\n\n> 1. 目標とする財務成果を打ち出す。\n2. どのような家庭の正しさが証明されれば、この目標が実現されるか？\n3. 重要な仮定の妥当性を検証するために、学習計画を実行する。\n4. 戦略を実行するために投資を行う。\n\n> 「新企業に資金を獲得するにはどれほど見栄えの良い数字を示すべきかを誰もが知っているなら、数字の見栄えをよくするために一度立てた仮定をまた手直しするという、回りくどい茶番を演じる必要がどこにあるだろう？」(p.278)\n\n> われわれが懸念するのは、ベンチャーキャピタルが、MBAの授業で意図的戦略についてしか学んでいない、経験未熟なアナリストで占められるようになると、企業の戦略の正しさを証明するために、一層の厳密さやデータや証拠を要求するようになるかもしれないことだ。彼らは次に、ポートフォリオの中の企業の経営チームに対して、その戦略を忠実に実行するよう圧力をかけるようになる。このような企業が創発的戦略モードに戻るのは、初期投資が無駄になり、創設経営者が更迭され、創発的プロセスを通じて有効な戦略を探るしか選択肢がなくなってからのことだ。(p.281)\n\n> 新市場型破壊の生成期に、細部まで正しい戦略を持つことは不可能に近い。この状況では戦略を実行するのではなく、有効な戦略が生まれ出るようなプロセスを進めなくてはならない。(p.281)\n\n> p.284からの適当なまとめ\n悪い資金のタイプは「成長は気短に急がすが、利益は気長に待つ」もの。利益を待つと損失を容認し、ニーズ(仮説)を確認する機会が遅れるのと同時に、大きなリターンを求める傾向となる。これは、持続的成長タイプのものであり、破壊的イノベーションに必要なタイプではない。\n\n> 計画からの逸脱を修正するのではなく、思いがけない成功を探し求めよ、とは、ピーター・ドラッカーが名著「イノベーションと企業家精神」(ダイヤモンド社、1985年)で示した、最重要原則の一つである。(p.311)\n\n> 上級役員は自分たちが会社を動かしていると思っているが、実際はそうでないことがほとんどだ。\n現実には、組織の最上層の役員は、さまざまな意思決定に、時間的にも空間的にも立ち会うことができない。そのため、持続的イノベーションの状況では、上層部が関心を払わずともうまく機能する意思決定プロセスが、成功のかぎとなる。(p.323 中間管理職が役員に上げる情報を取捨選択するため)\n\n> ウォルマートの2002年の売上はほぼ2200億ドルだった。しかし、同社がディスカウントストアの第一号店を開いてから、年商が今日の金額に換算して10億ドルを越えるまでには、12年もかかっている。破壊的事業が起動に乗り規模が大きくなるまでには、長い助走路が必要だ。だからこそ、財務報告書が頭打ちを示唆する以前に(破壊的イノベーションを)開始しなければならない。(p.336)\n\n> p.344 「イノベーションへの解」を求める経営者への助言\n\n> 1. 実績ある競合企業に魅力的に映るような顧客や市場をターゲットとする戦略は、絶対に通してはならない。実績ある競合企業が喜んで無視するか背を向けるような破壊の足がかりを発見するまで、部下に一からやり直しを命じること。非対称的なモチベーションを生み出せれば、競合企業があなたの勝利に手を貸してくれる。これはやる気満々の競合企業との血みどろの持続的闘争で実績を築いてきた経営者にとって、実に気分のいい話のはずだ。\n> 2. 部下がすでに優れた製品を使っている顧客を標的にしようとしたら、無消費に対抗する方法を探し出すまで、やり直すよう命じること。顧客が何も持たない状態と比べるからこそ、シンプルで安価な製品を喜んで受け入れるとき、マーケティング基礎講座で学んだ、顧客を喜ばせる方法が、費用をかけずにしかも簡単に実行できてしまう。これもまた、莫大な費用がかかることの多いもう一つの選択肢、つまり破壊的技術を用いて、顧客が既に満足して使っている既存製品を改良することに比べれば、経営者にとっては大きな安心材料になるはずだ。\n> 3. 無消費者がいない場合は、ローエンド型破壊戦略の可能性を、部下に検討させる。いま対価を支払わされている機能を使いこなしていない、ローエンドの顧客を捉えるために必要な割引価格でも、魅力的な利益を実現できるビジネスモデルを考案させる。これも不可能なら、投資してはいけない。少なくとも、大きな成長事業を生み出すことを期待して投資しないこと。\n> 4. プロジェクトリーダーが「顧客にせめて...してもらえたら」という言い方をしたら、会話を打ちきろう。そして、顧客が既に片づけようとしていることを、一層手軽に安価にこなすのに役立つ方法を見つけるよう命じる。甘い考えで、顧客が明確に意識している優先事項に対抗しようとして、優秀な人材が任を追われることも多いのだ。\n> 5. 部下の製品計画やマーケティング計画が、社内の組織区分に沿って切り取られた市場分野を標的としていれば、あるいは標的市場が容易に入手可能なデ＝タ(製品タイプ、価格帯、人工学的分類などによってなど)に沿って分類されていたら、やり直しを命じ、顧客が片付けようとしている用事に即した方法で、市場を分類させることと。顧客の生活に定期的に生じる、少なくとも二つの仕事について、まだ「万能型のミルクシェーク」を雇うしか選択肢がないことを指摘し、クイックサービスのレストランがシェークの特性を改良するだけで、それぞれの仕事をうまくこなすことを通じて真の競争相手からシェアを奪おうとしないため、ミルクシェークのビジネスが成長していない、という話を思い出させること。\n> 6. もし部下の製品改良計画が、競争基盤が不変であることを前提としていれば--つまり過去に大きな利益をもたらしたタイプの改良が、この先も同じ利益を得ることを仮定していれば--ローエンドに目を向けよう。そこに競争基盤を変化させるチャンスを見出せることが多い。\n> 7. 破壊的製品やサービスがまだ十分でない状態で、部下が業界標準やそれに付随する外部委託や提携の話に心を奪われているなら、危険信号を出そう。モジュール方式やオープン・スタンダードを時期尚早に追求したり、競争基盤が変化しても独自アーキテクチャを非公開にしたりしてしまうと、成功はおぼつかない。ウェイン・グレツキーを優れたプレーヤーたらしめた資質を思い出そう。過去に成功をもたらしたスキルに執拗にしがみつくより、これから金が向かう場所で必要となる能力を開発した方がいい。\n> 8. 新事業覇者のコア・コンピタンスに適合するから成功する、と部下が請け合ったら、次の三つの質問に対する答えを求めよう。\no 成功するための資源があるか?\no 我が社のプロセス、つまり、これまで培われてきた、この事業を成功させるために連携する方法は、新事業を成功させるために必要なことを行うのに役立つか?\no 我が社の価値基準、つまり社員が優先順位付けをする際に用いる判断基準は、時間、資金、人材をめぐって競争している他の実行計画よりも、この実行計画を必要なだけ優先させるか?\nこれらの質問に対する答えから、適切な組織構造と適切な運営主体を選ぶこと。\n> 9. いまの三つの質問を、新事業のチャネルを構成する全存在にも問うこと。自分の会社のことだけを考えていれば良いわけではない。チャネルに属する企業のプロセスや価値基準、つまり彼らの方法やモチベーションのせいで、新事業が脱線したり、果てはまだ駅を離れてもいないうちに動きが止まったりしてしまうことすらある。\n> 10. 残念ながら、これまでは信頼の厚かったマネージャーが、頼りにできなくなる場合がある。これはで着実に実績を積み上げてきたマネージャーは、新成長事業で成功する能力に最も欠けているかもしれないからだ。新事業のマネージャーを選ぶに当たっては、候補者を描写する属性や、これまで任されてきた責任の大きさなどには注目しない。履歴書を読む際には、候補者が過去にどのような問題に取り組んできたかに焦点を絞って、それを、新事業が直面することが分かっている諸問題と対比すること。\n> 11. 新事業立ち上げ後の数年間は、開発チームに、製品、顧客、用途における最良の戦略が見つかったと確信させてはいけない。有効な戦略を早く見つけるよう、部下をせきたてること。またどんな戦略でも、うまくいくという揺るぎない証拠がない限り、実行に待ったをかけるよう。\n> 12. 利益を気短に急かすこと。新事業が成長して利益を生むようになるまでの長い間、多額の損失を覚悟して欲しい、と誰かに言われたら、それは破壊的技術を実績ある市場に押し込もうとする計画だ。バリューチェーンの全段階に渡る広範な相互依存性のある持続的技術を向上させるためには、長期にわたって莫大な投資を行わねばならない場合がある。この種の投資は、実績ある企業に任せること。破壊的イノベーションの状況で何年も気長に損失を許容すれば、誤った戦略を長期間追求することになる。\n> 13. 成長を気長に待てるように、会社の成長を持続させること。破壊では、特に無消費に対抗する場合には、離陸するまでの助走路が極めて長い。時期尚早に離陸すれば、致命的な失敗を免れない。またこの心得を、裏側から見ることも大切だ。もしあなたが新事業を率いる立場にあり、事業が急成長することを証明できない限り投資はしないと会社の経営陣に申し渡されたら、彼らが実はあなたの破壊的技術を既存市場に押し込もうとしていることに感づかなくてはならない。これを察知したら、任務を引き受けるべきではない。失敗する可能性が非常に高いからだ。", ["イノベーション", "Chrisstensen"]],
["JavaScript： The Good Parts", "http://www.amazon.co.jp/dp/4873113911", "Douglas Crockford/オライリージャパン", "javascript_goodparts", "Tue Apr 29 18:27:31 +0900 2009", "3", "JavaScriptの良い書き方、悪い書き方について著者の熱い情熱で綴っている。見識は深いのだけど、その情熱は、大部分の人は引いてしまう気がする。自分で取捨選択するのが良いと思う。実際、かなりためになった。\n\nその哲学が書かれているだろう、10章の“美しい機能たち”は読んでいて気持ちが良いほど同意できる良い文章だった。余計な機能は不要なだけではなく好ましくない結果を生じさせるマイナスのものだという本書全体を通した強い信念が読み取れる。 \n\nGoogle Tech Talksで本書の内容をカバーした講演もある(英語)。おもしろい。 \nhttp://www.youtube.com/watch?v=hQVTIJBZook \n\nメモ \n\n* コメント \n/* /a*/.match(s) */という場合もあるので//を使った方が良い \n* 数値 \n数値型は一つしかなく64bitの浮動小数(Javaのdoubleと同じ)。 \nNaNは自分自身も含めてどんな値ともイコールにならない。判定にはisNaNを使う。 \n* 文字列 \n文字は16bitのユニコード。 \n* falseとして判定されるもの \nfalse\, null\, undefined\, ''\, 0\, NaN \n* グローバル変数を使いたいときは、一つだけ用意して、それをコンテナに使う。 \nvar MYAPP = {} \nMYAPP.stooge = { .... } \nMYAPP.flight = { .... } \n* 関数をオブジェクトを指定しないで呼ぶと、thisには大域オブジェクトが束縛される(マジカヨ。Javaなどの言語はthisはプログラムが書かれているコンテキストのオブジェクトを指す。) \n* 配列の列挙でfor in文を使うと順序が保証されない。 \n* new を使うものは間違いがわかりやすいように最初の文字は大文字で定義。 \n* newを使うと、private変数を作れない、継承したオブジェクトのメソッドを呼び出せない。関数型パターンと呼んでいるクロージャを使った方式を使えばこれらは可能(なので、こっちを使った方が良いという主張)。 \n\n感想 \n\n* 配列かどうかの判定を凝った判定ルーチンで実現していた。まさにダックタイピング。 \n* メモ化の意味は分からなかった \nメモ化とはクロージャ内の環境に既に計算した値をキャッシュすることだと認識したのだけど、fibやfactなら繰り返しにすれば良いし、n-Queenなどは全ての場合のメモリ領域も必要となるので現実的ではないと思う。\n* new \nnewを使わない方が良いというのは極端な気がする。プロトタイプ型なのだからクラス型の真似をする必要はないというのは同意するのだけど、既にその世界でイデオムになっているのにそれを覆すのは逆に混乱を起こす気がする。 \n* 等価演算子(==)の仕様がイマイチピンと来ない。 \n0 == '0'はtrueなのに[1] == [1]はfalseだ。前者は余計とも思える型変換のせいだし、後者はSchemeのequals?(値を評価した結果を比較)やJavaのequals(オブジェクトのhash値などで比較)とは違うという所に起因している。気持ち悪いのは、'' == '0'はfalseだけど、0 ==''\, 0 == '0'がtrueな所。推移律が通用しない、驚くべき結果。' \\t\\r\\n ' == 0がtrueというのもあった。著者の主張は===を使えということらしい。それで自分でやってしまいそうなのは、object['property'] === nullとか(undefiendが正しい)。 \n\n* continue文 \n著者はリファクタリングによりcontinue文を使わないように出来ると言っているが、使うべきところ(使うほうがわかりやすいところ)は使った方が良いと思う。 \n* switch \nbreakを必ず書くというのは同意。ただ、同じ処理を重複して書きたくないというのもよく分かる。これは、言語側で解決すべき問題(ある処理を終わらせたあと、明示的に他のケースの処理もさせるという文法を作る)だと思っている。 \n\nその他 \n「線に沿って作ることができないシーケンスは、すべて文法的に正しくない」の対偶は「文法的に正しいすべての文を線に沿ってシーケンスを作ることができる」(自分で余計なことを考えてこんがらがった)。 \n\nこの前書いた落とし穴のパターンがそのまんま書いてあった(p.45)。 \n\n著者の書いたビューティフルコードの章を読み直してみた。JavaScriptでJavaScriptのパーサを書いていた。見た目手続き型で書いたあるからか、なんとなく違和感。再帰バリバリの処理はLispなどの見た目も関数型言語で書きたい。", ["プログラマ", "javascript", "oreilly"]],
["キャパシティプランニング", "http://www.amazon.co.jp/dp/4873113997", "John Allspaw/オライリージャパン", "capacityplanning", "Tue Apr 26 18:25:26 +0900 2009", "3", "キャパシティプランニングという言葉は全く聞いたことがなかった。本を読んで、増加し続けるリソースに対して、いつ新たなシステムを導入すべきかを計画することなのか、と勝手に解釈。 \n\nサブタイトルのHow to Build the Next Flickrは反則だと思う。惹かれてしまうじゃないか。 \n\n基本的には性能のチューニングと同じように、ひたすら計測して、その事実をもとに計画を立て実行するというものだと感じた。この本を読んでもそれが出来るようにはならないけど、自分のように全く知識がない者にとっては雰囲気が分かってちょうど良かった(100ページ程度と薄いのもうれしい)。 \n\n目から鱗というか、フムリと思ったのは、キャパシティプランニングでは、CPUやディスクなどのリソースがなぜそのような状態になっているのか、その原因を探ることはしてはいけないということ(キャパシティプランニングには何の役にも立たないため)。それはあるものとして、プランニングを行う必要がある。(ハードウェア購入のプランニングが終了後パフォーマンスチューニングによりその原因を突き止める)(p.45 「好奇心がキャパシティプランを台無しにする」を読んでの感想) \n\n以下、自分用メモ\n\n p.15 アーキテクチャの設計に関する本 「Scalable Internet Architectures」Theo Schlossnagle\, Peason (O'ReillyのスケーラブルWebサイトと同じくオススメされていた) \n上の本のプレゼンテーション(pdf版) http://www.omniti.com/~jesus/misc/Scalable%20Ti.pdf \n(slideshare版) http://www.slideshare.net/shiflett/scalable-internet-architectures \n\np.120 複数の企業のユースケースから得られたクラウドの検討事項 \n\n非技術的な検討事項: \n\n* プライバシー、セキュリティ、第三者によるデータ所有に関する法的な懸念 \n* クラウドインフラの可用性やパフォーマンスに対する信頼 \n* インフラの一部という観点で見たSLA(またはSLAがないこと)の影響 \n* いまだ新興である技術プラットフォームに対する安心感のレベル \n\n 技術的な検討事項: \n\n* クラウドリソースを最も効率的に使うための、アプリケーションの設計。転送コストをできる限り回避するためのアーキテクチャや、必要な時にだけ計算インスタンスを配置することは、非常に一般的な実践です。 \n* データが物理的に存在する場所を感知しません。このため、開発者はアプリケーション(およびアプリケーション管理)をより高水準に考えるようになります。計算インスタンスのインストール、破棄、移行の可能性を予期して、冗長性を取り入れる必要があります。", ["web"]],
["改訂新版 コンピュータの名著・古典100冊", "http://www.amazon.co.jp/dp/4844323040", "石田 晴久\, 青山 幹雄\, 安達 淳\, 塩田 紳二\, 山田 伸一郎/インプレスジャパン", "computer_books_100", "Tue Jul 17 18:46:23 +0900 2012", "2", "故・石田晴久氏の追悼特集を見て知った本。本が届く前にはおもしろそうと思って100冊全部読んでやろうかと思ったけど、見てみると興味を持てないものも多かった。新人の人には良い本なのか、と思ったら「若きエンジニア<必読>のブックガイド」と表紙に書いてあった。そういうことね。読んでない本でも、あらかたの分野でなんとなく雰囲気が分かった気になってしまえるのは良いのか悪いのか。でも次々に、アルゴリズム・デザインとかビューティフルコードとか良い本が出てきてくれているのはうれしい限り。 \n\nSICPの説明に「ただ、プログラミングの例題がLISPの方言で記述されているので、その部分は必要に応じて読み飛ばしてかまわない。」にガクッときた。プログラムを読まないで、この本を理解したことになるのだろうか。 \n\nあと、本を選んでいる人同士で、その人の書いた本を選んでいるあたりが気持ち悪かった。 \n\n**読もうと思った本** \n\n* ハッカーズ大辞典: バグやベータ版の由来、'char'の読み方などが書かれている。エリック・S・レイモンド、ガイ・L・スティール・Jrなど著者が豪華。 \n* カッコウはコンピュータに卵を産む: psコマンドでコマンドのオプションでバークレイの学生じゃないと断定する記述あり。萌え。 \n* ゲーデル、エッシャー、バッハ: 言わずと知れたGEB。20周年記念版を発売当時に購入したのだけど、未だ手つかず。だって、最初の章が劇的につまらんのだもん。 \n* ビーイング・デジタル: MITメディアラボ所長(ニコラス・ネグロポンテ)の本。 \n* 誰のためのデザイン: たまに本屋で立ち読みして買わないことを繰り返しているような気がする。UI本はdon't make me thinkで十分と思っていたのだけど。同じ著者の「パソコンを隠せ、アナログ発想でいこう!」という本もタイトルに惹かれる。 \n* オペレーティングシステム: MINIXの解説本。 \n* The Art of Computer Programming: クヌース。いつも本屋で自分にはムリと思う本。いつかは... \n* Unixネットワークプログラミング: よく職場でみかけるけどそういえば読んだことがない。 \n* 人月の神話: 読まないととは思うのだけど、本屋で見ると何か読みたくなくなる。この手の話にあまり興味がないのだと思う。 \n* Webの創成: Tim Berners-Lee。仕事のメインの分野なので、読んでおかないと。つまらなそうだけど。 \n\n**既に読んだ本** \n\n* ハッカーズ: viva!ヲタ。 \n* 認識と学習: ちゃんと読んでないけど。 \n* 自然言語処理: 内容が古いのが残念。 \n* Lion's Commentary on Unix: ライオン本。当時のCがきれいな言語だと思わせてくれた。 \n* プログラミング言語 C: 言わずと知れたK&R。必要なことが過不足なく書かれている。 \n* 計算機プログラムの構造と解釈: SICP。原点。 \n* プログラミング作法: あまり記憶がない。良いことを普通に書いてあったという印象。 \n* 珠玉のプログラミング: スペルチェッカーの例で感嘆させられた。 \n* デザインパターン: GoF本。Javaをやっていたので名前は知らなかったけど内容はほとんど知ってた。 \n* 正規表現: Perlの仕様を調べているときにお世話になった。丁寧な記述でわかりやすかった。 \n* スーパーエンジニアへの道: 良い本だけど、タイトルは内容をピタリと表している原題 becoming a technical leaderと同じにすべきだった。 \n* ピープルウェア: 会社で働くのならば読んだ方が良いと思う。人を重要視するよい本。 \n* TCP/IPによるネットワーク構築 vol.1～3: ネットワークを全然知らなかった自分にとって一番役立った本。TCP/IPで知りたいことがあればこれを読む。仕様と実装と使い方が分かれて書かれているのもうれしい。", ["本"]],
["プログラミングの心理学", "http://www.amazon.co.jp/dp/4844323040", "ジェラルド・M. ワインバーグ/技術評論社", "psychology_of_computer_programming", "Tue Jul 20 18:44:08 +0900 2009", "3", "社内のtwitter(というか自分で勝手に立てた)で貸りることができた。ありがたい限り。 \n\n書かれた時期は古い(1988年)けど、その多くは現在にも通じる内容であり興味深く読めた。人同士が働くというのはあまり変わらないのだと思った。例えば、ソースレビュー\, ペアプログラミング(言い過ぎか)\, テストファーストなどに通じる意見がこの時点で述べられているのは驚いた。 \n\n他にも現在の事象に当てはめながら読むのもおもしろいかもしれない。ジョブのターンアラウンドタイムとタイムシェアリングシステムの比較の下りは、コンパイルとインタプリタの関係と何か関連するかもしれない。 \n\n一番興味深かったのは、エゴレスという考え方。自分の誤りを素直に認め、誤りを他人へ指摘するのにも躊躇しない環境、お互い何をしているかが良く分かる環境がもっとも効率的に仕事ができる環境だと言っていると感じ、すなおに共感できた。これをするためにも、お互いを尊重し合う気持ち、お互いがそう思えるような姿勢が重要なのだと思う。 \n\nこの人のほかの本を読んだときに、彼は優れたプログラマだったのだろうと思ったのだけど、そこまでこの本を読んで思えなかったのは時代の差か。当時から職場の環境や人といったところに問題意識を置いているのは優れている証拠か。人にまつわる記述は、ピープルウェア並みの普遍さがあり楽しく読むことができた。 \n\n以下、自分用メモ\n\n> 被験者は二群にわかれ、本人が強く反対している何らかの意見について、それが正しいことを主張する文章を書くように求められる。そのようにして書いた自分の意見に反する文章を一篇書くごとに、第一群の被験者たちは一ドルの、第二群の被験者は二十ドルの支払いを受ける。実験の終了後各被験者は、再度その問題に関する意見を聞かれる。「常識的」には、二十ドル組の被験者は(より多くの額を支払われた以上)意見が変わっている可能性が高いように思われるが、認知不協和の理論の予測するところによれば、もっとも意見を変えやすいのはむしろ一ドル組である。この理論的予想は、何十件もの実験によってたしかめられている。(p.79) 二十ドル組の人たちは金のために書いたという言い訳が自分に言えるのに対して、一ドル組が一番楽なのは逆の論点にも実は良いことがあると認めること、なため。 \n\n> 自分にはプログラミング経験がない、ということをおおやけに認めたリーダーを、チームが尊敬するようになることはあり得るが、知っているような顔をしていたところまがい物だと露見してしまったという場合には、彼らはただあざけるばかりである。(p.111) \n\n> チームリーダーは、次のことを知っていなければならない。 \n1. 上位の管理者たちは、いかに強く約束を迫ろうとも、実は結果を求めているのだ。 \n2. 結果は、チームの全面的参加のもとに設定された目標を追求する、という形で達成する方が、ずっとたやすく達成できる。(p.114)", ["プログラマ"]],
["コトラーのマーケティング・マネジメント -ミレニアム版-", "http://www.amazon.co.jp/dp/4894716577/", "フィリップ・コトラー/ピアソン・エデュケーション", "marketing_management", "Tue Jun 14 18:35:12 +0900 2009", "4", "マーケティングのバイブルと呼ばれる本とのこと。半年以上かけて、ようやく読み終わる。つまらないわけでは決してないのだけど、膨大な量(900ページ)に圧倒され何度も他の本に浮気をしてしまった。 \n\nマーケティングに関することが網羅的に書かれており、全く初学者の自分には役立った。事例が豊富。おそらく一つ一つの章ごとに深い世界が待っているのだろうから、自分の関心のある分野を参考文献などを使ってそこから知識を得ていく必要があるのだろう。けど、自分にはお腹いっぱい。 \n\n一番衝撃を受けた文章は“ドリルを買う人は、実のところドリルで開ける穴を買うのである”。製品の作り手として、顧客は製品が欲しいわけではなく目的を達したいだけということを忘れずにいたい。 \n\nそして、各章の初めに書いてあるコトラー語録がすごい(メモ参照)。例えば、“もはや、顧客を満足させるだけでは十分ではない。顧客を喜ばせる必要がある。”、“ナンバーワンになれない市場にとどまるべきではない。”、“信頼に頼って売ってはならない。価格を売るのである。”などなど。 \n\n自分は会社にあったミレニアム版を読んだのだけど、内容が少し古い部分(特にインターネット関連)があった。新しい版で読めば良かったと素直に反省。本文の横に書いてあるミレニアム関連のtipsも今となれば意味不明だった。もう一冊“コトラーのマーケティング入門”なる同じくらい厚い本が目の前にあり途方に暮れている。 \n\n以下、自分用メモ<!--more--> \n\n> ドリルを買う人は、実のところドリルで開ける穴を買うのである。(p.6) \n価格=ベネフィット/コスト (p.14) \n\n> 企業の目的は、必ずしも各SBUで売上を増加させることにあるわけではない。それどころか、既存需要を以前よりも少ないマーケティング費で維持したり、事業から資金を引き上げ、需要を減らしたい場合もある。つまり、マーケティング・マネージメントの任務とは、企業経営者との間で合意した目標水準に需要と収益を維持することである。(p.93) \n\n> ピーター・ドラッカーは「物事を適切に進める」(効率性)よりも「正しいことを行う」(有効性)の方が重要であると指摘している。もっとも成功している企業は、そのどちらにおいても優れている(p.107) \n\n> マーケターの間には、「最高の広告は満足した顧客である」という言葉もある。(p.229) \n\n> 日本とインドネシア \nインドネシア政府が、ジャカルタ近郊にセメント工場を建設するため入札を募った。アメリカ企業の提案は、用地の選択、セメント工場の設計、建築作業員の雇用、材料と設備の用意、完成した工場のインドネシア政府への引き渡しという内容であった。日本企業の提案には、アメリカ企業が提示した全てのサービスに加えて、工場で働く労働者の雇用と教育、日本の商社を通じたセメントの輸出、そしてここで生産したセメントをジャカルタで必要な道路や新しいオフィスビルの建設に使用することまでが含まれていた。日本企業の提案の方がコストは高かったが、訴求力が強く、結局契約を勝ち取った。日本企業は明らかに、問題を単なるセメント工場の建設(システム販売の狭い捉え方)としてではなく、インドネシア経済への貢献として考えていた。そして、自らをただの技術プロジェクト会社ではなく、経済開発の推進役と見なしていた。日本企業箱客ニーズを極めて広くとらえていたのである。これこそが真のシステム販売である。(p.239) \n\n> ミシュラン・タイヤ社(フランス) \nミシュラン社は、フランスの自動車所有者の年間走行距離を伸ばしたいと考えた。そうすれば、タイヤ交換の増加につながるからである。そこで、フランスのレストランを三ツ星システムで格付けするアイデアを思いついた。ミシュランは、南仏の数多くの高級レストランを宣伝して、週末のドライブにプロバンスやリビエラへ行くようパリジャンを誘った。ドライブを促す別の手段として、ミシュランは地図や途中の観光地のリストを載せたガイドブックも発行した。(p.284) \n\n> インターネットを利用したニッチ・ビジネスの秘けつは、顧客が探しにくくて、購買決定に際し見たり触ったりする必要の無い製品を選ぶことだ。(p.317) ロングテールはこの頃から既に言われていたことだったのだと感心。 \n\n> マーケターによっては、消費者の態度や行動の根底にある中核的価値と信念体系によって市場を細分化する。中核的価値は行動や態度より深いところにあり、根本的なレベルで、長期にわたる人々の選択と欲求を決定する。価値によって市場を細分化するマーケターは、人々の内的自我にアピールすれば人々の外的自我、つまり購買行動にも影響を及ぼせると考えている。 \n(p.331) 自分もコンセプトに感心してものを買うことが多いので納得。 \n\n> いかなる企業であれ、新製品を開発しなければならない。新製品の開発はその起業の将来を決める。代替製品は売上高の維持や向上のために、つくり出されなければならない。顧客は新製品を望んでおり、競合企業はその供給に最善を尽くすだろう。(p.406) (単純な商品と比較はできないのだけど)自分の存在価値として胸に刻もう。 \n\n> 3Mは失敗も見越しており、そこから学ぶ。そのことは、「1人の王子様を見つけるためには、たくさんのカエルとキスしなければならない」というスローガンにも表れている。(p.412) 新製品開発に関する文章 \n\n> 新しいアイテムの候補が市場のニーズを満たすものであって、単に企業側のニーズを満足させるためだけではないことも、企業はチェックしなければならない。フォードに3億5000万ドルの損失をもたらしたエドセルは、市場のニーズからではなく、フォードとリンカーンの間のラインを埋めるというフォード社内のニーズから作られた。(p.496 ライン充実の説明で) \n\n> 企業に生産能力が不足しているときにラインの絞り込みが行われる。企業は通常、需要が堅調なときには製品ラインを縮め、需要が丁重なときにはラインを伸ばす。(p.497 深く考えずに何となく逆だと思っていた) \n\n> ブランドとは何か \n(括弧内はメルセデス・ベンツでの例) \n\n> 1. 属性(高価で堅牢、高い耐久性) \n2. ベネフィット(耐久性を「数年は車を買い換える必要がない」というベネフィットに置き換える) \n3. 価値(高性能、安全、威信) \n4. 文化(効率的で高品質) \n5. 個性(動物でいえば王者ライオン) \n6. ユーザー(55歳の重役であって20歳の秘書ではない) \nマーケッターはブランドのアイデンティティをどのレベルに置くかを決定しなければならない。ここで犯す誤りは、属性だけをプロモーションすることである。第1に、買い手はベネフィットほど属性には興味を持っていない。第2に、属性は簡単に競合他社に模倣されてしまう。第3に、原罪の属性はやがて魅力を失っていく。 \nただし、1つのベネフィットだけに絞ってブランドをプロモーションするのも危険である。「高性能」だけに絞って広告すると、競合が同等以上の機能を出すかもしれないし、買い手が他のベネフィットほど重視しなくなるかもしれない。 \nブランドの持つ意味の中で最も永続性があるのは、価値と文化と個性である。この3つがブランドの本質を決める。メルセデス・ベンツはハイテク、高性能、成功を象徴している。ブランド戦略において、メルセデス・ベンツはこれを全面に押し出さなければならない。また同じ名称を使って安価な自動車を売り出すことは控えねばならない。長い年月をかけて培われてきたメルセデス・ベンツの価値と個性が損なわれるからである。(p.498\, 499から適当に抜粋) \n\n> H・J・ハインツの前CEOトニーオライリーは、次のようなブランドロイヤルティの基準を提唱している。「私が考える厳しい評価基準は...ハインツのトマトケチャップを買いに来た主婦が、品切れだった場合にその店から出てよそに買いにいくかどうかだ。」(p.499) \n\n> サービスはおおむね経験特性(購入後に評価できる特性。e.g. バケーション、理髪)と信用特性(通常は消費後も評価が厳しい特性。e.g. 自動車の修理、医師の診断)が高い(探索特性(購入前に評価できる特性。e.g. 服、宝石)は低い)ので、購入にはより大きなリスクが伴う。そのため、次のような特徴がある。第1に、サービスの消費者は大体において広告よりも口コミに頼る。第2に、品質を判断するにあたって、価格、従業員、物質的な手がかりを重要視する。第3に、満足を与えてくれるサービスの提供者に強いロイヤリティを有する。(p.538を適当に編集) \n\n> サービス品質の重要度の高い順 \n信頼性、対応力、安心感、感情移入、有形物 \n(p.543から適当に抜粋。有形物(施設、資料、従業員など物質的なものの印象)が一番低い。) \n\n> 広告の2分の1が無駄であることは分かっているが、どちらの半分が無駄なのかが分からない。(p.688) \n\n> 優秀なマーケティング部門を抱えている企業がマーケティングに失敗することもありうる。マーケティングの成否は、他の部門が顧客をどのように見ているかに大きく左右される。従業員がマーケティング部門を指して「マーケティングはあそこの仕事だ」と言っているような企業は、効果的なマーケティングを実行していないということである。全従業員が顧客のおかげで自分の仕事があるのだと認識したとき、初めて企業は効果的なマーケティング企業となる。(p.830) \n\n> 研究開発部門とマーケティング部門との強力関係が弱いために、しばしば新製品を成功させる活力がそがれてしまう。多くの点では両部門は異なる価値基準を持っている。研究開発部門は、科学的好奇心と世俗への無関心に誇りを抱く科学者と技術者で構成され、短期的な利益には頓着せずに困難な技術上の問題に取り組み、監督や説明責任から拘束されずに仕事をすることを望んでいる。マーケティング部門及び販売部門は、現実の市場を理解していることに誇りを持つビジネス本位のスタッフで構成され、売り込みやすい特徴を持った新製品との出会いを切望し、製品コストへの注意に義務感を抱いている。マーケティング担当者は、研究開発担当者が顧客の要求に応じて設計することをないがしろにして、技術的な側面ばかり重視していると考えている。研究開発担当者は、マーケティング担当者が小細工をろうする行商人で、製品の技術的な特徴へは目を向けず、売上のことしか頭にないと考えている。 \nバランスの取れた起業とは、研究開発部門とマーケティング部門とが、市場志向の革新的な新製品を成功させる責任を分かち合っている企業のことである。研究開発部門は技術革新だけでなく、製品の市場導入を成功させることにも責任を持たなければならない。マーケティング部門は新製品のセールスポイントだけでなく、顧客のニーズと選好を正確に把握することにも責任を持たなければならない。 \nグプタ、ラージ、ウィルンモンは、研究開発部門とマーケティング部門徒のバランスのとれた連系は、革新的な新製品の成功と強い相関関係にあると結論づけている。研究開発部門とマーケティング部門の連携を推進するには、いくつかの方法がある。 \no 共同セミナーを開催し、お互いの目標、業務スタイル、課題に対する理解と尊重を醸成する。 \no 新しいプロジェクトがスタートするごとに、研究開発担当者とマーケティング担当者を含む職能別チームを発足させ、プロジェクトの完了まで一緒に仕事をさせる。研究開発部門とマーケティング部門は開発目標とマーケティング計画を共同で策定する。 \no 技術的なマニュアル作成への関与、トレード・ショーへの参加、製品を市場に投入した後の顧客に対するマーケティング・リサーチ、さらには販売プロセスへの研究開発担当者の参加を推奨する。 \no 明確な手続きに則って上層部に報告し、対立を解消する。ある起業では、研究開発部門とマーケティング部門が同一の副社長の監督下にある。(p.842) \n\n> コトラー語録 \n\n> * 未来はこれから来るのではない。もう始まっているのだ。 \n* もはや、顧客を満足させるだけでは十分ではない。顧客を喜ばせる必要がある。 \n* すぐに利益があがることを行うより、戦略的に正しいことを行う方が重要である。 \n* マーケティングは、販売力をベースとした戦いではなく情報をベースとした戦いになりつつある。 \n* 今日、同じ場所にとどまっているためには、昨日よりも速く走らなければならない。 \n* 最も重要なのは、顧客の動向を予測し、その先を行くことだ。 \n* マーケティングは、取引から生まれる企業利益を最大化するという考え方から、互いにリレーションシップから生まれる相互利益を最大化するという考え方に変わりつつある。 \n* 無能な企業は競合他社を無視する。平凡な企業は競合会社を模倣する。卓越した企業は競合会社の先を行く。 \n* シェアは買うものではない。どうやって勝ち取るかを考えるべきだ。 \n* 製品ライフサイクルではなく、市場ライフサイクルに注意せよ。 \n* 最終的に製品のデザインを決めるのはだれか。もちろん顧客である。 \n* ナンバーワンになれない市場にとどまるべきではない。 \n* 顧客を維持する最善の方法は、より安くより価値あるものを常に提供することである。 \n* いかなるビジネスもサービス業である。化学会社ではない。化学サービス業である。 \n* 信頼に頼って売ってはならない。価格を売るのである。 \n* チャネルは効率性、コントロールの容易性、適応性によって選ぶべきである。 \n* 小売業、卸売業、およびロジスティック組織には、それぞれ独自のマーケティング戦略が必要である。 \n* 統合型マーケティング・コミュニケーションは、マーケティング・プロセス全体を受け手の視点から見る方法である。 \n* 最高の広告は満足した顧客がしてくれる。 \n* 製品よりもまず顧客を大事にする販売員は成功する。 \n* 今日のマーケティングは市場からサイバースペースに移行しつつある。 \n* マーケティング組織は、顧客インタラクションの管理から、顧客に接するあらゆるプロセスの統合にいたるまで、その役割を見直す必要に迫られるだろう。", ["マーケティング"]],
["プログラマのための論理パズル", "http://www.amazon.co.jp/dp/4274067556", "Dennis E. Shasha/オーム社", "puzzlers_for_programmers_and_pros", "Tue May 26 18:33:23 +0900 2009", "4", "その辺の論理パズルやFermi Problem本とはレベルが違う感じで良い感じ。問題が解けると素直にうれしくなる。問題を解くのが単純に楽しい。全ての問題を解くのがもったいないと思えるくらい、次の問題を読むのが楽しみだった。 \n\nプログラムを書くときは、条件を想定しながら書くのだけど、どこまで想定できるかが出来の良さにつながると思う。この想定する力を、問題で問われることが多いので、題名のとおりプログラマに役立つと思う。 \n\nただし、いくつかの問題で意味が読み取れない問題もあった。自分が悪いのか本が悪いのかは分からないけど。18.法律の論理のウオームアップ問題の解答の文章はgoogle book searchで見た所、訳が悪かった(オリジナルの説明も不十分で要は病気にかかったら死ぬということ)。d.宝の在処をピクチャリングも解答がなぜそうなるのか(もっと単純な解でなぜ悪いのか)理解出来なかった。その他にもいくつかあったような。 \n\nすべての問題を解いていないのだけど、いつか書こうと思っていた数独のプログラムを書き終えたのでとりあえず一段落ということでレビューを書く。複雑かと思ったら書き始めてみれば意外にn-queen likeで簡単だった。擬似コード見ないで書いたのだけど、似たような書き方だった。なんか、ツマラン。", ["プログラマ", "パズル"]],
["More Joel on Software", "http://www.amazon.co.jp/dp/4798118923", "Joel Spolsky/翔泳社", "more_joel_on_software", "Tue Apr 23 18:24:04 +0900 2009", "3", "元Microsoftに勤めていたJoel Spolskyの本。以前、読んだ本の続編。blog(の翻訳)で多くのものは読んだこともあったのだけど、おもしろいもはおもしろい。あっという間に読んだ。といいながら、2週間くらい経っている気がするけど。 \n\n計算機科学(computer sience)を重要視していてプログラム好きであれば誰でも好きになると思う。理想と違う会社に勤めていればなおさら。 \n\nベストは“火星人のヘッドセット”(下のメモ参照)。IE8がWeb標準に準拠するという決定を下したことについてのエッセイ。引きつけるタイトルや導入。歴史的背景をうまく説明している。そして、その後の洞察もするどい。「送るものについては保守的に、受け取るものについては寛容に」が必ずしもよいとは限らないということを納得させてくれたのにも驚いた。 \n\nそんなにMicrosoftのことは多く書かれていない。下のURLにもあるけど、“はじめてのBill Gレビューのこと”はやはりおもしろい。 \n\n以下、自分用メモ<!--more--> \n\n* 開発者観察ガイド p.28 \n\n> 組織で自分より上にいるか、より強いコネを持った人間が要求しているために、技術的に劣った方法でやらなければならないということほど、彼らをムカつかせることはない。 \n政治によってなら負けていただろうときに、技術的な優位さによって議論に勝つことほど満足を与えるものはない。私がMicrosoftで働き始めた頃、グラフィカルなマクロ言語を作ろうとする「MacroMan」という見当違いな大きなプロジェクトが進められていた。そのプログラミング言語は本物のプログラマにはイライラさせられるものだった。そのプログラミング言語は本物のプログラマにはイライラさせられるものだった。そのグラフィカルな特性によってループや条件分岐を記述する方法がなかったからだ。またそれが非プログラマの助けになることもなかった。それは彼らはアルゴリズムという考え方に慣れておらず、MacroManをそもそも理解しないだろうからだ。私がMacroManについて文句を言うと、私のボスは「あの列車を線路から外すことはできないよ。あきらめるんだな。」と言った。しかし私がずっと議論を続けていると---私は大学を出たばかりで、Microsoftの誰よりもコネを持っていなかった---やがてみんな私の議論の中身に耳を傾けるようになり、そしてMacroManプロジェクトは中止されることになったのだ。私が誰かなんて問題ではなかった。問題なのは私が正しいかどうかということだった。そういう非政治的な組織がプログラマには歓迎されるのだ。 \n日本語 http://local.joelonsoftware.com/wiki/%E9%96%8B%E7%99%BA%E8%80%85%E8%A6%B3%E5%AF%9F%E3%82%AC%E3%82%A4%E3%83%89 \n\n* 指揮統制マネジメント法 p.36 \n\n> 欠陥の3つめは、ハイテク起業では「リーダー」よりも個々の開発者のほうが常に多くの情報を持っていることで、決断に適した位置にいるのは開発者のほうなのだ。2人の開発者が最適な画像圧縮法について2時間議論しているところへボスがふらっとやってきたというとき、その場で一番情報を持っていないのはボスであり、、したがって技術的な決断を一番してもらいたくない人間がボスなのだ。Microsoftのアプリケーション部門を仕切っていたマイク・メイプルが私のボスのボスのボスのボスだったときのことを思い出す。彼は技術的な議論にどちらかの方を持つことを断固として拒んでいた。やがてみんなに方をつけてもらいに彼の所に行くべきではないと理解するようになった。このことによって開発者たちは実質的な利点に基づいて議論することが求められ、問題はより良く議論したもののやり方で解決されるようになった。すなわち、問題はいつでも考え得る限り最良の方法で解決されることになったのだ。 \n日本語 http://local.joelonsoftware.com/wiki/%E6%8C%87%E6%8F%AE%E7%B5%B1%E5%88%B6%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88%E6%B3%95 \nマイクロマネージメントが良くない3つの理由の一つ。他の理由は、開発者がそうされることを好きじゃないこと、もう一つはマネージャがマネージする時間がないこと(つまり、1人の開発者をマイクロマネジメントして猛烈に働かせ、それから突如その開発者の前から何週間も消えて、その間は他の開発者たちをマイクロマネジメントするのだ。その問題点は、自分の決定がなぜうまくいかないのか理解したり、軌道修正したりできるほど長くその場に留まらないことにある)。 \n\n* 入門経済学マネジメント法 p.40の内容を適当にまとめた \n\n> 何らかのメトリクスを作りそれをインセンティブにしてもうまくいかない。本来の目的とはかけ離れてメトリクスを達成することが目標になってしまうから。 \n日本語 http://local.joelonsoftware.com/wiki/%E5%85%A5%E9%96%80%E7%B5%8C%E6%B8%88%E5%AD%A6%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88%E6%B3%95 \n自分たちの会社でも個人の成果はおろか組織の成果すらこういったものに置き換えられている。うまくいかない理由を的確に指摘している気がした。 \n\n* イエールでの講演 p.66 \n\n> Junoの経営思想が旧弊なものであることに気付きはじめた。そこでの前提は、マネージャは人々に何をするか指示するためにいる、ということだ。これは典型的な西海岸のハイテク企業におけるマネジメントのやり方とは正反対だ。私が西海岸で慣れ親しんでいたのは、マネジメントというのは誰かがやらなきゃならない煩わしくてつまらない雑用であり、そうして頭のいい人間が仕事を成し遂げられるようにする、という考え方だ。大学の学部を見るといい。学部長なんて重荷なだけで誰もやりたがらない。みんな研究の方がしたい。それがシリコンバレースタイルのマネジメントなのだ。本当の才能を持った人々が素晴らしい仕事を成し遂げられるよう、邪魔になる家具をどかせるのがマネージャだ。 \n英語 http://www.joelonsoftware.com/items/2007/12/04.html \nこうなっていない会社は自分の会社も含めて本当の才能を持っている人がいないのと命令をしないとやらないからだと思う。 \n\n* 火星人のヘッドセット p.137\, 139 \n\n> (XPが2000以前のバグをエミュレートした理由、VistaがXPのセキュアではないWindowsプログラムを正しく動作させないために不評なことを述べた後) \nそれでは、これはIEチームにはどう当てはまるのだろう? \nユーザの視点でシナリオを見てみよう。あなたは毎日100個のWebサイトを見に行っている。それからIE8にアップグレードした。見に行くWebサイトの半分はページの表示が崩れてしまい、Google Mapsは全然使えない。 \nあなたは友達に言うだろう。「IE8にはアップグレードしないほうがいいよ。ページがみんなぐちゃぐちゃになるし、Google Mapsは全然使えない」。あなたはHTMLのソースを見て、WebサイトXが非標準のHTMLを使っており、Google Mapsが使えないのは、標準委員会に受け入れられなかった古いIEにある非標準のJavaScirptオブジェクトを使っているせいだということを突き止めようとするのだろうか?そんなことはしないだろう。あなたがするのは、IE8をアンインストールするということだ。(Webサイトのほうはあなたにはコントロールできない。中には開発者がいなくなっているサイトだってあるだろう。あなたにできるのは、IE7に戻すということだけだ。) \n...\nこっそりと？この一件がどうなるかを、私はこう考えている。IE8チームは、IE8はWeb標準をデフォルトにすると言い続けるだろう。そして長いベータテストの間に、WebサイトをIE8でテストして使えるようにしてくれとみんなに頼み込むことだろう。そしてリリースの日が間近に迫っても、世界のWebサイトの32%しかちゃんと表示されないことが分かってこう言うだろう。「みなさん、我々としては非常に残念なことで、本当にWeb標準をIE8のデフォルトにしたいのですけれど、使えないWebブラウザをリリースするわけにはいかないのです」。 \n ... \nわかる？正しい答えというのはないのだ。 \nいつものごとく、理想主義者は原理的に100%正しく、そしていつものごとく、実際的に正しいのは現実主義者だ。 \n英語 http://www.joelonsoftware.com/items/2008/03/17.html \nIE8がWeb標準に準拠するという決定を下したことについてのエッセイ。引きつけるタイトルや導入。歴史的背景をうまく説明している。そして、その後の洞察もするどい。「送るものについては保守的に、受け取るものについては寛容に」が必ずしもよいとは限らないということを納得させてくれたのにも驚いた。 \n\n* エビデンスベーススケジューリング p.155 \n\n> どうして開発者はスケジュールを立てようとしないのか?理由が2つある。1つには、それがうんざりすることだから。もう1つは、スケジュールが現実的なものだとは誰も思っていないからだ。正しくないスケジュールのためになんで苦労しなきゃいけないんだ? \nhttp://www.joelonsoftware.com/items/2007/10/26.html \nやっても意味がないセキュリティの施策に苛立つ自分へ。 \n\n* ソフトウェアにおける高音域 p.212\, 213 \n\n> 少数の優れたプログラマの代わりにたくさんの汎用なプログラマを使うことの本当の問題は、いかに多くの時間をかけようとも、優れたプログラマの作り出すものが彼らには決して作れないということだ。 \n ... \nCreative Zenの開発チームが彼らの醜いiPod類似品を何年かけて磨き上げようとも、Apple iPodのように美しくエレガントで満足を与えてくれるプレーヤーを作ることはできない。そして彼らがAppleのマーケットシェアに影響を与えることはないだろう。あの魔術的なデザインの才能の主がそこにはいないからだ。かれらはそれを持ち合わせていないのだ。 \n汎用な歌手は最高の歌手がいつでも出している高音域を決して出すことができない。モーツアルトの「夜の女王のアリア」のF6を出せるプリマはごくわずかしかいない。そしてあのF6が出せなければ、夜の女王を演じることはできないのだ。 \n日本語 http://local.joelonsoftware.com/wiki/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E9%AB%98%E9%9F%B3%E5%9F%9F \n\n* 心に残るカスタマサービスへの7ステップ p.244 \n\n> 顧客が問題を抱えているとき、それを解決してあげたなら、彼らは始めから問題なんかなかった場合よりもいっそう満足を覚えるのだ。 \n日本語 http://local.joelonsoftware.com/wiki/%E8%A8%98%E6%86%B6%E3%81%AB%E6%AE%8B%E3%82%8B%E3%82%88%E3%81%86%E3%81%AA%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%B8%E3%81%AE7%E3%82%B9%E3%83%86%E3%83%83%E3%83%97 ", ["プログラマ"]],
["ThoughtWorksアンソロジー", "http://www.amazon.co.jp/dp/487311389X", "ThoughtWorks Inc. / オライリージャパン", "thought_works_anthology", "Tue Apr 18 18:24:04 +0900 2009", "3", "GoFのfowlerが所属する会社の人たちが書いたエッセイ集。fowlerのリファクタリングは読んでておもしろかった(といいながら彼のブログは読んでない)。そして実は、開発手法論にはあまり興味がない。XPが出たての頃に追おうと思って本を読んだりしたけど、イマイチ興味が沸かず、深入りしなかった。まあ、実務で開発していないんだから興味出る方が不思議なんだろうけど。 \n\nそんなアジャイルとRUPの区別もついていない自分が読んでも、おもしろい所はおもしろかった。列挙すると、\n\n* fowlerのDSL\n* 言語のサーベイ (きちんと丁寧に区分している) \n* 多言語プログラミング(機能にあった言語で実装) \n* オブジェクト思考エクササイズ(このルールは以前どこかで読んだことがあった。初心者では出来ないだろうけど確かに良い練習になると思う) \n* Antのビルドファイルのリファクタリング(意外におもしろくて驚いた) \n\n彼らのすごい所は(おそらくは実際のプロジェクトで思いついたであろう)一つのアイデアを概念レベルまで抽象化のレベルを押し上げて、さらにそれらをツールなどを作成し、実践で使える所まで適用し、結果を出す所だと思う。 \n\nつまらなかったのは、ドメインアノテーションとコンシューマ駆動契約でこれらは自分が全く知識がない分野だったからだと思う。 \n\nあと、訳注が無駄に多くてうざい。 ", ["プログラマ", "oreilly"]],
["Algorithms of the Intelligent Web", "http://www.amazon.co.jp/dp/1933988665", "Haralambos Marmanis\, Dmitry Babenko/Manning Pubns Co", "algorithms_of_the_intelligent_web", "Tue Feb 25 18:21:34 +0900 2009", "3", "最初はワクワクしながら読んでいたのだけど、後半は実業務や他の本を読んだために、知識が追い越してしまい、あまり自分のためにはならず残念。本の書き方が悪いのもあるかもしれないけどJavaのコードは冗長で分かりづらいと一度Pythonなどで説明された本を読んでしまうと思う。自分用メモはgoogle docsに残した。", ["web"]],
["フロー体験とグッドビジネス", "http://www.amazon.co.jp/dp/4790713512", "M.チクセントミハイ/世界思想社教学社", "good_business", "Tue Nov 30 18:15:32 +0900 2008", "3", "ビジネスに特化した話題ではあるけど、主題はフロー体験でほぼ言い尽くされている感があり、特に新しい何かが得られたという感じはしなかった。 \n\nフローを説明している図(p.90\, 93)を見て、なぜ最近映画を見ないかを理解した。その図は横軸にスキル、縦軸にチャレンジをとっており、両方が高い状態がフロー状態(好きな活動(趣味、仕事、性生活))であることを示していた。逆に、スキルとスキルが低いと無気力(TV視聴)に、チャレンジが低い状態でスキルが高くなるにつれ、退屈(仕事、家事)、くつろぎ(読書、会話)となっていた。映画はTVと同じように受身の状態で見るものである。それに比べ読書はそれを通じて考えることが多い。その行為が好きなのだと感じた。そして、本を読んでばかりいると不安を覚えコーディングをしたくなるのは、読書などで得た知識でチャレンジして成果を外に出したいという自然の欲求なのだと感じた。 \n\n上司にかんする記述のメモを多くしたが、幸い良い上司と悪い上司が近くにいるのでとても共感しながら読んだ。 \n\nちなみにこの本はamazonと戦って手に入れた。発売前に広告メールでオススメされたので、発売日に到着するのを確認して1 clickで購入したら、発売日の後に出荷が1ヵ月後以降になるとの連絡が来た。それはあんまりだろボゲと言って何回か戦ったら、あっさり本が届いてクーポン券もよこした。対応に満足するという気持ちはなく、何も言わないと何も無いだろうに、ゴネ得なのは何だかという感じだった。ちなみに到着してから何ヶ月も本を読まなかったのはナイショです。 \n\n以下、個人用メモ。ちなみにここでは本の主題であるフローについてはメモしていない。前の本(フロー体験)を読んで知っているから。このメモを見てこういう本だと勘違いしてはいけない。 <!--more-->\n\n> あらゆるマネージャーが膨大な量の情報と人員を管理しなければならない知識集約型のビジネス環境では、精神エネルギーの利用を促進することが主要問題になる。このような企業では「もっとも不足している資源は注意力である」ことは事実だが、その資源を効果的に処理するアイデアが無いためにその大部分が誤って管理され、浪費されている。(p.97) \n\n> 「知識の根は苦い、しかしその実は甘い」(p.101) ただし、その直後に「残念ながら一般に、まなぶことはつらいのみならず苦いものでもあると信じられている。実際は、ふつう苦いのは教えるやり方であって、学ぶこと自体ではないのである。」との記述もある。 \n\n> 仕事についても、異性にかんして力説されているのと同じことが言えるようである。「耐えることはできないが、なければ生きていけない」。(p.108) \n\n> 細かく管理されていると感じるワーカーはすぐに自分の仕事に興味を失ってしまう。仕事にかんしてもっともよく述べられる不平は二つあって、それは変化がないことと管理監督者との衝突である。(p.119) \n\n> 雇用や昇進で選抜することによって、少なくとも会社の文化に変化をもたらすことは可能である。仕事そのもののために仕事を愛し組織全てがその可能性を実現するのに役立っていると信じているものよりも、利己主義でつむじ曲がりの従業員が先に昇進するようなことほど、グループの勤労意欲を削ぐことはない。(p.133) \n\n> ビジネスで重要なことは、リーダーが実務をしないことです。人々が自分のベストを尽くしたいという雰囲気を作り出さなければならないんです。誰にもベストを尽くすように命令してはいけませんよ。ベートーヴェンに第九交響曲を作曲するように命じることは出来ないですからね。彼自身が作曲したいと思ったんですよ。だから、ビジネスのリーダーとは、実務を行うのではなく部下がベストを尽くすことを可能にする人だと言えます。(p.137) \n\n> 物事がうまくいっているときはまた、口出しすることをおさえるようにしなければならない。ミクロマネジメント(過剰管理)を実行している人はふつう、自分だけが物事の正しいやり方を知っており、他の誰もが自分を見本にしてほしいという信念を持っているので、当然評判は悪くなる。マネージャーは、ワーカーの強力によってどうしたら仕事がよりうまくできるのかということを学ぼうとする時に、一段と成長できる。(p.162) \n\n> 人にではなく、成果に注目すべきだということ、を思い出すことが大変重要である。あるマネージャーは自分の仲間の前で部下を叱りつけることによって、自分の権力を誇示することを好む。公共の場ではずかしめられることほど心にひどいダメージを受けることはないので、これはこらえるべき衝動である。もし部下に口やかましく言わなければならないときは、部下と一対一での話し合いの中でそれを行うべきである。 \n他人にたいする自分の影響力をじっと見て、つねに自意識過剰で、虚栄心が強く、他人の成功を妬み自己の権利を主張することに固執し、また手当ての金額を記録しているような従業員は、おそらく簡単にフローに入ることができるような精神資本を蓄積してきてはいないだろう。そのような人は、カウンセリングで、また自分の不安感をなんとか克服することができる場合は、自分の仕事に完全に没頭できるように信頼と責任を与えられることによって、救われることができる。もちろん、もしマネージャーが自分自身の自我を抑制することができるなら、それは助けになる。再度述べるが、行動の雛形を作ることは組織の気風を決めるための適切な方法である。もし上司がいつも全ての業績を自分の手柄にしたり、成功が仕事の質よりも重要だったりするならば、何が上司の本当の優先事項なのかということは、誰にでもすぐに明かになるのである。(p.177)", ["自己啓発"]],
["アルゴリズムデザイン", "http://www.amazon.co.jp/dp/4320122178", "Jon Kleinberg\, Eva Tardos/共立出版", "alghorithm_design", "Tue Nov 19 18:13:28 +0900 2008", "5", "Collective Intelligence以上に良い今年一番の本。 \n\n計算量理論(complexity theory)は、計算機がどこまで賢くなれるかという限界を示す一つの考え方だと思う。不完全性定理の方は熱中したけどこちらはそれほど興味はなかった。それでも、不完全性定理と計算停止問題のアナロジーからそれらは密接に関係しているのではないか。と、知ったようなことを言う。 \nというより、ふと思ったのだけど計算停止問題と不完全性定理は同じことではないか。不完全性定理は論理体系の上に“証明する”ということを形式化して、その上で証明出来ない論理式があることを証明したのだけど、計算停止問題も“計算する”ということを形式化していたのだとしたら同じ気がする。証明も対角線論法だった気がするし。うろ覚えだ。多分、学部時代に読んだ教科書がそこら辺(“計算する”ことを形式化する)を適当に書いていたのだろうと、勝手に人のせいにすることにした。 \n\nまあとにかく、NPなどの意味で現在の計算機で解くのが難しい問題について知ることは教養として重要だと思った次第。 \n\namazonで値段も見ずに買ったので値段(15\,000円)にビビった。1 click恐るべし。さらに到着後、でかさと分厚さにビビった(B5で800ページ!)。持ち運べる大きさではないので、読み始めるのに時間がかかったのだけど、会社の金で同じ本を買った人がいたのでコピーさせてもらってそれを持ち歩いて読んだ。ラッキー。と言いながらもあまりの厚さに恐れをなして、興味のあるNPとかが書いてある8章から読み始めた。 \n\n衝動買いしたのは序文の解説に共感したため。ぜひ、読んでほしいし、そして確かにその序文にふさわしい内容だった。下のURLでもその雰囲気が分かるし、今なら“アリゴリズムデザイン 序文”でGoogleすると訳者の一人がアップロードしているpdfが検索結果として出る。 \nhttp://www.kyoritsu-pub.co.jp/shinkan/shin0807_03.html \n\n内容的には序文にも書いてあるけど学部や大学院向けに広く使えると思う。 \n\nこの本は教科書として素晴らしい。分かりづらい抽象的な文章の後には的確な例や図が載っていて理解を助けてくれる。例えば、NPの定義がこんなにシンプルに書かれた定義は見たことがなかった。分厚い本は難しいと思いがちだけど、経験的にそんなことはなくむしろ逆だと言える決定的な本だと感じた。単にアルゴリズムの羅列ではなく、なぜ、いかにこのアルゴリズムにたどり着いたかの過程が書いてあるので、もっとも大切な考え方が読むだけで得ることが出来る。読んでいるだけで自分が賢くなった気になれる幸せを感じれる本だ。 \n\nそして、良く疑問に思う“こんなの知って何になるの?”という疑問を積極的に解消してくれる。うれしい。例えば、ゲームを考えたとき、このゲームの攻略方法がNPであることを証明させ簡単な攻略方法がないこと、すなわちすぐ飽きることはないという演習問題が出ていたり。そのゲームの説明文の具体的な記述も優れいている。そういえば、かなり前にテトリス(ぷよぷよ?)がNPだとかWebで見たような。 \n\n知ってうれしかったことは、NP完全の一つナップザック問題が、εを与えると最適解の1/(1+ε)倍の答えを出すアルゴリズムがＯ(n^3/ε)で与えられること。これは、計算時間と精度を交換可能であることを表している。ただし、精度を10倍高めようとすると計算時間も10倍かかる。Pが多項式時間で解ける問題、NPが指数時間をかければ解ける(e.g. 2^nの総当たりで調べる)問題の良い橋渡しだと感じた。ナップザック問題(正確にはナップザックの決定問題)はNP完全なので全てのNPはこの方法が適用できる(変換に多項式時間かかるけど、精度と計算時間の関係は適用できるはず)。 \n\n他にうれしかったこと。局所解を見つける方法として、Z=Σexp(-E(S)/kT)というGibbsの方程式を用いて、温度Tを徐々に低くしながらエネルギーを変化させ、その状態遷移の確率に利用する方法がある。この方法は直感的にわかりやすいのだけど、今までなぜTを下げていけば、より良い局所解に達するかが分からなかった。それを、ズバリ、そんな保証はないと言い切ってくれた文章を読んでとてもうれしかった(c.f. p.611のメモ) \n\nそして、13章のランダム性を用いたアルゴリズムの強力さに驚いた。大雑把に言えば、最悪の状況を避けるためにランダム性を利用することで良い性能を確率的に保証するのだと感じた。わかりやすい例で言えば、既にソート済みのデータに対してクイックソートを適用するとき、ピボットを先頭に選べばO(n^2)になるが、これをランダムに選ぶことでO(n logn)になる(実際は前者のアルゴリズムでも平均O(n logn)になるので適切な例ではないけれど)。他には、ハッシュ関数 h(x)をΣa_i x_i mod pで表現する。ここで、x_iはxのnビット表現の(x0\, x1\, ...\, xn-1)の要素であり、pはnに近い素数、a_iは{0\, 1}からランダムで選んだビット列。これにより、任意のu\, vに対してh(u)=h(v)の確率が1/nというハッシュ関数に重要な性質が得られる。また、この証明が気持ちよい。(ただし、実際はより工夫されたO(1)回だけの算術演算でハッシュ関数値を計算する他の普遍ハッシュ関数が利用されているとのこと。cf. p.684) \n\nNP-SPACEの問題解決空間がNP完全より大きい(と考えられている)ことを考えると、現在は計算時間を短くするために富豪的にメモリをに使っているけど、将来的に量子コンピューティングが実用化され非決定性問題がバシバシ解けるようになると、メモリよりも計算時間を富豪的に使う日が来たりするかもという夢を見たり。こんなことを考えられるきっかけを与えてくれる本に感謝します。 \n\nところで、P=NPなのだけど、ここまでカシコイ人達がかかって解けない問題なのだから、連続体仮説のように仮説やその否定のどちらを公理として受け入れても無矛盾な体系が作れる、とか言う玉虫色(?)の決着を見るのではないか、とこれまた勝手に夢を見る(と思って、“P=NP 連続体仮説”でGoogleしてみるとP=NPが証明されたとか言う変なおっさんが騒いでいるのが見つかって、これと同じ思考回路なのかと思ってゲンナリ)。 \n\nふと、思ったのだけど、これらの内容のうちどれだけのことを知っているべきなのだろう。プログラマとしては、直接役立つものではないけど、教養として知っておくべきものだと思う。その程度は人によって違うだろうけど、ここら辺を無視する人には大したコードは書けない気がする。 \n\n以下、自分用メモ。NPやNP完全の定義をすぐ忘れるので。<!--more--> \n\n* Y ≦ X: Xが多項式時間で解ければXも多項式時間で解ける。 \n* P: 多項式計算時間で解ける問題の集合。 \n* NP: 証明が与えられた時に、多項式時間でそれを確認できるもの。例えば、SAT(下参照)の場合、変数の環境を実際に論理式に代入することで論理式の真偽が多項式時間で確認できるのでNP。 \n* P=NP問題: P ⊆ NPは証明されるが、P ⊂ NPは証明されていない。 \n* NP完全: 全てのNPのYにおいてY ≦ Xが成り立つX(すなわち、NPに属するすべての問題がXに多項式時間帰着可能)。 \n* NP完全の例: 充足可能性問題(Satisfiability Problem:SAT)。論理式を真にする変数の環境を求める問題。 \n* PSPACE: 多項式領域で解ける問題。2^nの状態がn bitで表現出来ることから類推されるように、NPより大きい範囲の問題を解くことができると考えられている。NP ⊆ PSPACEは証明されるが、NP ⊂ PSPACEは証明されていない。 \n\n以下、序文より抜粋。 \n\n> 本書では，様々な応用で生じる計算が必要となる問題に対して，まずその問題を定式化することから始めて，複数あるアルゴリズム設計技法からどの技法を用いるべきかをきちんと判断できる力を確立し，そして最終的にこれらの問題に対する効率的な解法を構築する，ということがアルゴリズムを設計するプロセス（過程）であるという立場をとって，アルゴリズムにアプローチしていく．情報科学におけるアルゴリズム的な考え方の役割を幅広く探求していき，これらの考え方を，アルゴリズムを設計し解析できるように正確に定式化された問題に関連づけていく．言い換えれば，これらの問題の動機付けとなっている潜在的な問題点とは何なのか，そしてそれらを定式化する特定の方法はどのようにすれば選べるのか，あるいは，さまざまな状況においてどの設計原理を適用すれば適切なのか，というようなことを解決していくのである． \nこのようなことを考慮して，本書の目標は，計算を伴う様々な分野から生じる複雑な形式をした問題からアルゴリズム的な問題の明快な定式化を発見する方法と，その定式化に基づいて実際の問題に対する効率的なアルゴリズムを設計する方法に関する助言を提供することであると言える．さらに，洗練されたアルゴリズムを理解するには，誤った出発点や袋小路も含めて，単純な最初のアプローチから，最終的な解に至るまでの一連のアイディアを再構築するのが最も良いということもしばしば経験されている．したがって，本書のアルゴリズム記述の形式は，必ずしも問題の記述からアルゴリズムへ至る最短の道になっていないことも多い．著者らは同僚とともに，これらの点について一生懸命熟考した結果，特定のある問題に対してはこのやり方がより良いものであると確信している． \n\n> 物理システムでは、アニーリングにより、エネルギー最小の状態に到達すると信じられているが、シミュレーテッドアニーリング法で最適解が得られるという保証はない。それを理解するために、例えば、図12.2の二重漏斗(勝手な注 複数の穴が開いているポテンシャル)を考えてみよう。二つの漏斗の断面積が同じならば、高温では、本質的に、システムはどちらの漏斗にも等確率でいることになる。温度が下げられるにつれて、二つの漏斗の一方から他方への移動はますます困難になっていく。したがって、アニーリングの最後に、より低い方の漏斗の底にいるという保証はできそうもない。(p.611)", ["プログラマ"]],
["Eric Sink on the Business of Software", "http://www.amazon.co.jp/dp/4798117501", "Eric Sink/翔泳社", "eric_sink", "Tue Nov 2 18:11:42 +0900 2008", "3", "発売されて間もなく本屋で見つけた。発売日に買えなかった自分を攻めるのでなく、リコメンドしてこないamazonもまだまだ甘いと思った。英語版(のpdf)を買うか迷ったこともあったくらいの本。 \n\nGeek向けのマーケットに関する本。マーケットについては少しだけ本を読んだことがあるので得られることは無かったが、技術にしか興味がなくマーケットについて全く興味がない人(で、自分のように少しは知っている必要があるのではないかと思う小心者)には持ってこいの本と思う。何よりも読んでいて楽しい。 \n\n例えば、ソフトウェアの値段をいくらにすれば良いかについての次の文章。 \n\n> 製品を使ってくれる人に100ドルずつ支払い、ビキニを着たサルマ・ハエク( http://www.imdb.com/name/nm000161/ )を送り込んでインストールさせたとしても、誰かはブロンドの方が良かったと文句を言う。 \n\n> 価格が高すぎるという見方をする人は必ずいるものなのだ。実際、価格について文句を言う人が誰もいなかったとしたら、それはおそらく安すぎるということだ。コツは文句が適正なレベルになるように価格を調整するということだ。(p.240) \n\nでも、結構読んだことがあった記事が多かった。JoelのBEST SOFTWARE WRITINGや昔メモしたWebで読めるものにもなかったのになぜだろう。がんばって英語で読んだのを忘れていたか。\n\n以下、自分用メモ。キャリア計算という記事の抜粋で、英語では下のURLで読める。 \nhttp://www.ericsink.com/Career_Calculus.html <!--more-->\n\n> 開発者のキャリアにおける基本的な方程式は以下のようになっている。 \n\n> C = G + LT \n\n> * Cは実力(Cluefulness)だ。これはソフトウェア開発に関する開発者の能力、スキル、知恵すべてをひっくるめた尺度だ。 \n* Gは素質(Gifting)だ。これは生まれた時から持っている実力の量だ。それぞれの人にとってGは定数だが、この値は人によって異なっている。 \n* Lは学習(Learning)だ。これは開発者が時とともに実力を増やす(あるいは減らす)割合を表す。 \n* Tは時間(Time)だ。これはキャリアのグラフの横軸になる。 \n\n> 私たちは自然とC自体に集中しがちなものだ。 \n\n> * 私たちはどうして他の人が昇進するのだろうと思う。 \n* 上司が他の人のアイデアほど自分のアイデアの価値を認めないように見えるのはどうしてだろうと思っている。 \n* 職に応募するときには、自分のC値がどれほど高いかという記述でいっぱいの書類を作る。 \n\n> 本当の問題は自分がどれほど実力があるかみんな分かっていないことだと思い込む。時とともに、重要なのは自分の実際の実力ではなく、他の人が自分にどれだけ実力があると受けとるかだと思うようになる。 \n他の人が自分のC値をどれくらいと思うだろうかと悩むのは時間の無駄だ。素晴らしいキャリアへの鍵はL、つまり一次導関数に集中することだ。これは時とともにあなたの実力が変化する度合いだ。特定の時点におけるCの値がいくらかというのは、通常本質的なことではない。1つの問いだけが重要だ。過ぎ行く日々において、自分が実力を上げているのか、下げているのか、あるいは行き詰まっているのか、ということだ。(p.114) \n\n> 選べるのは以下のどちらか一方ということだ。 \n\n> * A: 自分のキャリアに自分で責任を持つ \n* B: 他の人の自分に対する見方を操作する \n\n> Aを選べば、素晴らしいキャリアが開ける。Bを選べば、キャリアは行き詰まることになる。(p.118)", ["マーケティング"]],
["Collective Intelligence in Action", "http://www.amazon.com/dp/1933988312", "Satnam Alag/Manning Pubns Co", "collective_intelligence_in_action", "Tue Apr 12 18:09:15 +0900 2012", "3", "発売前なので発売後用に、ManningのCollective Intelligence in Actionを読んだ感想をここに記す。発売されたらレビューに書く。発売前のものがPDFで購入できるようになっている。 \nhttp://www.manning.com/alag/ \n\n初めて本をPDFで購入した。良い感じ。発売前の本(発売予定日は8月)が買えるし、部分的にプリントアウト出来るので持ち運びが楽だし、メモをガンガン出来るし、躊躇無く捨てれるし、場所を取らないし。電子ペーパー早く実用的になって欲しい。 \n\n既にO'ReillyのCollective Intelligenceを読んでいたからか、前半はあまり得られるものが無かった。9章から読んだ方が良いと思う。9章以降は、自分の興味と一致していたり、新たな知識も得ることが出来たりしておもしろかった。 \n\nO'Reillyと比べ、WEKA\, Lucene/Javaを使っているあたりが、比較的本格的なアプリケーションを作るための基盤の説明に重点を置いている気がする。Amazonや Google News personalizationなど大規模なユーザやアイテムを持つサイトの技術を垣間見れる(cf. 12.4章のメモ)。 \n\n印象的だったのは、リコメンド手法で取られた戦略。この分野ではいろいろな手法があるのだけど、あるコンペティションで優勝したのは、それらを組み合わせた手法であること(cf. 12.4.3章のメモ)。その数なんと107個。重み付けも計算でやらせているのだと思う。よくハードでは数ある中から一つを選定するけど、ソフトウェアの場合こういうことが出来るから強い。 \n\nもう一つは、優れたアイデアを得るためにコンペティションを使う所。本には「これも集合知(collective intelligence)だ」と書かれていて目から鱗。 \n\n読んでいて思ったのはJavaがうっとおしいということ。簡単なことをするためにgetter\, setterやらで紙面を使う。実際のコーディングの時は仕方がないかも知れないが、本で説明するのには向いていない。余計なノイズが多く乗るため説明したい本質的なコードがどこにあるのか分かりづらい。これに比べて、pythonやrubyはやりたいことだけを書けるように設計されている点で優れていると思う。 \n\n自分用メモはgoogle docsに残した", ["web"]],
["プログラミング作法", "http://www.amazon.co.jp/dp/4756136494", "Brian Kernighan\, Rob Pike/アスキー", "practice_of_programming", "Tue Oct 29 18:06:56 +0900 2008", "3", "“珠玉のプログラミング”と比べるとアカデミックと言うより実践的か(と、思ったら原題がズバリThe Practice of Programmingだった)。もちろん、どちらがどうと言うことではなく、両方良い本。書いてあることは良いことなのだけど、一度苦労しないとその良さが分からないとも思う。それでも、最初にこういう本を読んでおきたかった。 \n\nこの手の本は、知っていることを喜ぶのではなく、実践出来ていないことを悲しむべきなのだよね。出来ていないのはテストファーストか。やばそうなのは書くけど、リグレッションテストが出来るまでには至らない。プログラムの大幅な修正に、前に作ったテスト修正が面倒くさくなる。典型的にデグレを出すパターンと知りつつも、やってしまう(ほったらかしにしてしまう)。納品するコードじゃないという甘えがそうさせているのだと思う。 \n\n移植性に関する文章を読むと、人間のやることでは無いという思いが強まる。まあ、誰もが一回は通る苦労だからというのもあるけど。そういう意味でJavaなどでのプログラミング言語による仕様の統一という道は正しい。 \n\nJavaのコードや例外の考え方について疑問を持つ箇所があったけど、天下のKernighanにそんなことを言うのはナンセンスか。 \n\n以下、自分用メモ。\n\n> どんな言語で書くにせよ、プログラマとしての読書の任務は手もとのツールを使ってベストを尽くすことだ。良きプログラマは貧弱な言語や使いづらいオペレーティングシステムを克服できるが、悪しきプログラマを救うのはたとえ最高のプログラミング環境だろうと不可能だ。(p.15) \n\n> 結局のところ、具体的な問題に適正に対処する方策はこの分野のツールとテクニックに馴染むこと以外に存在しないだろうし、クォリティの高い成果が一貫して得られるようになるには一定の経験を積む以外に手は無いだろう。(p.53。前者は後者により大幅に時間短縮出来ると思う)", ["プログラマ"]],
["珠玉のプログラミング", "http://www.amazon.co.jp/dp/4894712369", "Jon Bentley/ピアソンエデュケーション", "programming_pearls", "Tue Oct 24 18:04:12 +0900 2008", "3", "ビューティフルコードに感化されて購入した本の第二段。ようやく読み終わる。本の中に書かれていること自体はどこかで目にしたことのあるものばかり。だけど、実際にその考え方が必要な時に使えるかどうかが最も重要なことだと思う。 \n\n自分で考えてみれば、一度だけあるか(あって良かった)。JavaでGCがパフォーマンスの原因になっていた時リングバッファを実装しメモリ管理を効率的にした。誰も書いてくれないので言い出しっぺの自分が書くはめに。飛行機や電車で書いた思い出が。根本的なところで使われるものだったので徹底的にテストして渡した。マルチスレッドでのテストや、ヒープの中を見ながらの確認など時間をかけてテストして、安心して渡した覚えがある。うれしさついでにちょっと自慢げに書いてしまった。 \n\nこの本ではいろいろと、優れた手法を紹介しているのだけど、中でもp.182のスペルチェッカーは著者が書くようにまさにpearl(選り抜き、非常に貴重なもの)。限られたリソースの状況で、これでもかという効率化を施し必要な処理を実現してするアイデア群は見事。 \n\n「封筒裏の計算」の重要性について書かれている。封筒の裏でも出来るほどの計算で大まかな値を知るというもの(cf. p.235のメモ)。おおよその実現性を実際に作業に移る前に確認することや計算結果の妥当性を検算する時などに使うことが出来る。本でも取り上げられているフェルミ問題(cf. p.94のメモ)があるけども、その他にも、ニューヨークにピアノの調教師が何人いるかとか富士山をどうやって移動するかとかGoogleやMicrosoftの入社問題として聞いたことのあるものにもつながる気がする。ファインマンもこの手の計算をするクセをつけていたし、とても重要なことなのだと思う。直感で「出来る」と思える人は、こういう感覚で話している気もする。 \n\nこの手の本を読む度にKnuth本の重要性を感じるのだけど、本屋に行って立ち読みしては挫折感たっぷりにそのまま帰って来てしまう。まあ、仕方ない。 \n\n以下、自分用メモ。<!--more-->\n\n> 使用するメモリを小さくすることで実行時間も小さくなる。 (p.8. トレードオフの経験的な反例。ある条件下のソートをデータ構造を適切にする(数値をビットで表現する)ことで記憶領域と計算量の両方を減らすことが出来たコンテキストで) \n\n> 設計が完璧だと思えるものは、もうこれ以上付け足すものがないときではなく、もうこれ以上取り去るものがないときだ(p.9. beautiful codeにも同様のことが書いてあった) \n\n> 「封筒裏の計算」は私たちの間では有名な物理学者の名をとって「フェルミ近似」と呼ばれることが多いようです。もとになった話は、マンハッタン計画(原爆実験)での話です。フェルミ(Enrico Fermi)やオッペンハイマー(Robert Oppenheimer)たちが、数千ヤードほど離れた爆風よけの壁の後ろで、最初の核爆発を待っていました。フェルミは紙を小さくちぎって、爆発の閃光が見えると空中に投げ上げました。爆風が過ぎた後に、その詩篇がどれだけ飛ばされたかを測ってすばやく「封筒裏の計算」を行い、爆風の威力を計算しました。この結果はずいぶん後になって計測器から得られたものと同じだったのです。(p.94 Fermi problemsの説明。ちなみにこの時、周りが安全のためサングラスをかけている中、ファインマンが理論上不要なはずだということからサングラスを外し、初めて肉眼で見たというのを本で読んだ記憶がある。みんなカシコイ。あと、フェルミ近似って量子力学の近似モデルのことだと思うのだけど。) \n\n> 「封筒裏の計算」の練習問題。90%の確率で正解が含まれているかを5分～10分で解く。 \n\n> 1. 西暦2000年1月1日のアメリカ合衆国の人口 \n2. ナポレオンの生まれた年 \n3. ミシシッピ川の長さをマイル単位で(1マイル約1.6km) \n4. ボーイング747の最大離陸時重量をポンドで(1ポンドは約450g) \n5. 電波が地球から月に達成するのに要する時間を秒単位で \n6. ロンドンの緯度 \n7. スペースシャトルが地球を1周するのに要する時間を分単位で \n8. ゴールデン・ゲート・ブリッジの2つのタワー間の距離をフィートで(1フィートは約30cm) \n9. 独立宣言に署名した人の数 \n10. 成人の体の骨の数 \n\n> 以下、解答(まずは考えてから答えを見よう) \n\n> 1. 2億7250万人 \n2. 1769年 \n3. 3\,710マイル \n4. 875\,000ポンド \n5. 1.29秒 \n6. 51.5度 \n7. 91分 \n8. 4200フィート \n9. 56人 \n10. 206個 \n(p.235)", ["プログラマ"]],
["アート・オブ・プロジェクトマネジメント", "http://www.amazon.co.jp/dp/4873112990", "Scott Berkun/オライリー・ジャパン", "art_of_pm", "Tue Oct 4 18:01:28 +0900 2008", "3", "PMには興味がないけど、イノベーションの神話の著者ということと、一応知っておこうかくらいの感覚で読んでみた。 \n\n良い本なのだけど、読むのに時間がかかった。あまり本当のプロジェクトを経験していないため、読むときに身が入らなかったのが原因か。しかし、9章からはおもしろかった。実際のプロジェクトに役立つだろうことが豊富な経験を基に書かれていて、共感する所が多かった。 \n\n自分の興味を引いたのは、9.1節の人間関係が重要という節。良く読むような内容なのだけど、「私は昔、職場における対話の価値をなかなか理解出来ませんでした。」など、自分の考えに近いところから書かれ、その重要性を順序良く丁寧に書かれていた。同様に16.1節の政治の必要性を示す節で。「政治力(名詞):邪悪で、弱虫で、自己中心的な人々が利用するもの」や「当時の私は、頭が良いか悪いかという点でしか人を評価していなかった」という記述(cf. p.401のメモ)にもグサリ。本の価値を認めるということは、その本にどれだけ共感出来るかが重要なのだと感じた。 \n\nPMの重要性と難しさを知ることができる。そして、それを認識した上で自分はPMには向いていないと改めて実感。エンジニアリングし続けたい、という欲求が確認できたと前向きに受け取ろうと思う。 \n\nこの本に書いてあるのは一貫して人(上司や部下)に正直であれということだと思う。こういう発想がないPMを多く見てきたけど、こういう人にはこの本を読んでほしいところ。 \n\n以下、自分用メモ <!--more-->\n\n> リーダーシップの必要な時(例えば、チームやプロジェクトが何らかの意思決定を必要としている時)、チーム活動を円滑にしたり、自ら作業に参加しようとしたりせず、尻込みして身を引いてしまうマネージャが数多くいます。遠い所から状況を見て、記録を取っているだけなのであれば、それらは雑務担当と何ら変わりがありません。リーダーシップを発揮すべき人間が、常に問題から身を遠ざけてプレッシャを回避しているのであれば、それはチームを率いているのではなく隠れているだけなのです。無能な、またはプレッシャから逃げるPMは、プロジェクトに利益をもたらさないため、プロジェクトの片隅に追いやられてしまう傾向にあります。 \n\n> こういった状況において、数値化する必要の無いものまで数値化しようとするPMもいます。何をしてよいか分かっていない、あるいはやるべきことに恐れを抱いている場合、二次的な作業に時間をかけてしまうのです。そしてPMは、プロジェクトとの間の溝が深まるにつれて、不必要なまでに図表、チェックリスト、報告書に依存していくことになるのです。これがある時点までに達すると、そのPMはこういったデータやプロセスこそがプロジェクトであると信じ始める場合もあります。彼らは、重要な作業(プログラミングへの取り組みやスケジュール)ではなく、実行しやすく重要度の低い作業(スプレッドシートや報告書)に注力してしまうのです。ある種の手続きを実行し、チェックリストから作業を消し込んでいくだけでプロジェクトの成功が保証されるという信念が作り出されているのかもしれません(皮肉っぽく表現すれば、失敗してもそれはPMの失敗には当たらないというわけです)。(pp.15-16) \n\n> 優れた見積りというものは、信頼性の高い設計と要求が揃って初めて生み出されるということです。そしてエンジニアリングにおける優れた見積りは、優れた情報と優れたエンジニアという2つが揃って初めて生み出されるのです。仕様がゴミでしかなく、プログラマがホワイトボードに書きなぐられた意味不明の落書きに基づいて適当な数値を出すよう求められた場合、出来上がるものは見積りという名の判りにくい落書きでしかありません。このことは、優れた見積りというものがメンバー全員の仕事であり、チーム全体、特にプロジェクトマネージャと設計者がエンジニアに対してサポートを行いながら、力を合わせて作成すべきものであるということを意味しているのです。見積りを雑用や集計作業のように考えている場合、あるいはチームリーダーがこのプロセスに工数をかけようとしない場合、その見積りは信頼性も実現性も低いものとなってしまうはずです。 (p.40) \n\n> ビジョンのドキュメントが弱い、あるいは存在しない \n　　　　　　　　x \n　　　仕様書が貧弱、または存在しない \n　　　　　　　　x \n　　　作業見積りが貧弱、または強気 \n　　　　　　　　x \n　　　インテグレーションの予算がない \n　　　　　　　　x \n　UIのイテレーションを行うだけの予算がない \n　　　　　　　　= \n　　神頼みのスケジュール \n(p.44) \n\n> 見積りはすべて確率です。スケジュールは見積りを積み上げたものであるため、スケジュールも確率となります。確率は合成されていく(80%x80%=64%)ため、スケジュールの正確さはどんどん低下していきます。(p.47) \n\n> 技術という視点では、製品をどのように構築するのかということに最大の価値を置きます。これは建築様式と材料を中心にしたものの考え方です。こういった考え方における美しさというものもありますが、それは技術という視点であり、顧客という視点ではありません。そして、完成した後の成果物がビジネスや顧客をどのように支援するのかといったことを考えようとせず、とにかく美しい成果物を作ろうとしてしまうのです。技術という視点に従った場合、使い物にならなかったり、販売予測がアテにならないデータベースであっても、エンジニアの審美眼に適っていることこそが重要になってしまうのです。(p.59 プロジェクトにおける視点を、ビジネス\, 技術\, 顧客という観点で見たときの技術に関する抜粋) \n\n> 悪い例: これを作ればみんな使うだろう \n\n> * 例: 「この製品は、かつてないほど強力な検索エンジン/ウェブエディタ/ウィジェット/ネズミ取りになるだろう。」 \n* なぜ起こるか: チーム全体の目を開発の理由ではなく開発作業そのものへとそらすことで、チームは本来の計画作業を行わなくても良くなる。 \n* 問題: かつてないほど強力なネズミ取りなど、世の中から必要とされているのだろうか。人々は便利なものを使うのであって、チームが作ろうと決めたものを使うわけではない。 \n(p.68 表3-1から抜粋。プロジェクト計画でよく見かける悪い手段の表。その他にも、「前回と同じことを行う」、「前回やり残したことを行う」、「競合他社がやっていることを行う」、「ホットでトレンディなものを作る」がある) \n\n> 問題定義は達成すべき山の山頂を示すものであり、山頂に登る方法を手取り足取り述べるものではないのです。(p.110。 要求書と設計書の違いについて。「要求を詳細にしすぎると設計が要求によって(必要以上に)制約されてしまうのです。」p.105の良い例文。(ただしp.110ではそのようなコンテキストでは出てきていない)) \n\n> ほとんどの難しい意思決定において、問題となるのは調査やデータの欠如ではありません。どれだけ情報を持っていたとしても、難しい意思決定というものはこの世からなくならないのです。人々が分析と議論に取り憑かれる「分析地獄」というアンチパターンは、もっと十分な情報がありさえすれば自動的に問題が解決すると自らを騙そうとする行為なのです。残念なことに、そんな都合のいい話はありません。情報は助けになりますが、あるレベルまでしか助けてくれないのです。(p.194) \n\n> 君の言ったことなんて関係ない。相手がどう聞いたのかこそが問題になるのだ。(p.213) \n\n> 人々が不快になる理由 \n\n> * ここでは実感を持って理解できるよう、すべての項目の主語を「～」としています(読む際には、同僚や上司の名前を補ってください)。 \n* ～は私のことを無能だと思っている。 \n私はXという作業を行えるし、それを行うために雇われているのに、そういったことが出来ない人間のように扱われた。 \n*  ～は私を信頼していない。 \n私の責任となっている意思決定について、連絡、確認、再確認、報告を毎日行うよう要求されたとすれば、私は不快に感じるでしょう。 \n* ～は私の時間を消費させる。 \n* ～は私に対して敬意を払わずマネジメントを行う。 \n* ～は私に馬鹿げたことを聞かせたり、読ませたりする。(p.227から項目のみ抽出) \n\n> あなたが行うこと、熱心さの度合い、作業を共にする相手とは関係なく、問題は発生します。(p.253) \n\n> プロジェクトの成功に通じる全ての道は、克服しなければならない困難のただただ長い繰り返しである。たまにしか困難に直面しないというのではなく、困難であることが普通の状況であり、我々の仕事はその困難を克服することなのだ。我々の本当の評価は、困難が存在しない場合にいつ成功するのかということではなく、困難が存在している時に勝利を勝ち取るということにあるのだ。(p.253) \n\n> 「この事態がどのようにして起こったのか、私には判らない。しかし、そんなことは今はどうでも良いことだ。それは後で心配することであり、その際には起こったことに対して私が責任を持つつもりだ。とにかく、この事態が実際に起こってしまった以上、今すぐにX、Y、Zを行う必要がある。X、Y、Zを実現する手段を考え出すために私に手を貸してくれないか?」(p.265 責任を取ることの例。かっこいい。) \n\n> たいていの場合、人やチームに対するプレッシャが増えていくと、当面はパフォーマンスが向上していきます。しかしある程度を過ぎると、こういった関係は次第に無くなりパフォーマンスの伸びは鈍化していくとになります。そして、チームが最高のパフォーマンスレベル(限界レベルや最大レベルとも言います)に達した後、さらにプレッシャを加えたとしても、チームをより熱心に、より効率よく、より迅速に作業させることは出来ないのです。そして、さらなるプレッシャを加えると、最終的にチーム(または個人)は力尽き、パフォーマンスは低下していくことになります。(p.278 図11-2に図が載っている。元はワインバーグのシステム思考法という本。) \n\n> 信頼してくれるマネージャの下では、そうでないマネージャの下にいるときよりも熱心に働くことになりました。その理由は、マネージャに好感を持っていたためではなく(それも多少はあるかもしれませんが)、成長の場を与えてもらえたためです。相手を信頼することによって、その人のパフォーマンスを最大化するための機会が創出できるため、信頼は真の権限委譲といえるのです。(p.295) \n\n> マネージャやリーダーが毎回、「これは命令だ」と主張していると、議論することができなくなり、より優れた意見を聞く可能性を閉ざしてしまうことになるのです。そして彼らの周囲にいる聡明な人や熱心な人は、作業に対する思い入れを失うことになる上、自らの役割が制限されたことについて不満を抱くようになるのです。 \n組織としての観点から見た場合、専制君主的な振る舞いは、深く考えようとする人を遠ざけてしまいます。それと同時に、言われたことだけをやればいいという風潮を作り上げます。専制君主が作り出す環境は、唯々諾々と従う人にしか耐えられないものであり、また逆に、唯々諾々と従うしか能のない人は専制君主の下でしか働けないのです。さらに悪いことに、専制君主はその権力の下に新たな専制君主を作り出します。こういった行動パターン(付与された力の有無で全てが決まる)は、組織を通じて伝染していき、最終的に組織全体を汚染してしまうことになるのです。 (p.298) \n\n> 問題が解決していないにも関わらず誰かを叱責するということは、特に危機の真っ最中においては、絶対にやってはいけないことです。これによって問題が解決するわけではない上、問題についてもっとも多くのことを知っている当事者(避難されているメンバー)が罪悪感を感じ、自らの擁護を優先してしまうため、迅速な問題解決ができなくなる可能性があるのです。火事の時に、放火犯を突き止めたところで、早く消化できるようになるわけではないのです。 (p.307から適当に抜粋) \n\n> ノーだ、フレッド。ウェブサイトの検索エンジンがエスペランド語をサポートすることは絶対あり得ないんだ。絶対だ。 (p.321 絶対にダメなノーの言い方の説明のコンテキストで。Googleへの皮肉と読み取り、おもろかった。) \n\n> 計画に従うことで勝利できるような戦いはないが、計画なくして勝利できるような戦いもない。 -- ドワイト・E・アイゼンワー (p.354 コトラーの本にも同じような引用があったような気もする) \n\n> プロジェクトという観点から見た場合、チームの生産性はゼロサムのリソースとして捉えるべきです。つまり、期限に間に合わせるために多大な努力を要求するということは、次のフェーズで費やされるはずだった工数を横取りすることに等しいのです。さらに悪いことに、パフォーマンスを元に戻すにはより多くの時間が必要となるのです(電車に乗り遅れまいと20秒間全力疾走すると、息が元通りになるまで1分ほどかかるのと同じです)。 (p.364から適当に抜粋)\n\n> 私は時とともに、他人とともに働く上で避けることができない不快さを「政治」のせいにして憂さ晴らしするという行為が、幼稚で身勝手なものであるということも学びました。同じことは、「マネジメント」、「エンジニアリング」、「マーケティング」などを悪者扱いし、彼らがどんなに馬鹿か、または非効率的かをあげつらうことにも当てはまります。悪者扱いしたところで、彼らが賢くなったり、効率的になるわけではありません。(それが本当に問題の原因であったとしてもです。彼らは聡明なのに、あなたと同じように政治的な理由によって動きが取れないだけかもしれないのです。) (p.401)", ["チーム", "oreilly", "Berkun"]],
["達人プログラマー", "http://www.amazon.co.jp/dp/4894712741", "Andrew Hunt\, David Thomas/ピアソンエデュケーション", "pragmatic_programmer", "Tue Sep 10 17:59:10 +0900 2008", "2", "beautiful codeの余韻で一気に購入した本の一つ。ようやく読み始められた。 \n\n今まで経験を通じて得た点が多く共感できた。逆に言えば、あまり新しい知識として得ることは少なかった。実践できているかどうかは別として知識としては既にあった(実践出来ているか否かが大きな差なのだけど)。 \n\nプログラマとして誇りを持つことが重要なのだと再確認。 \n\nプログラミングバリバリの人が再確認という意味で読むのに良いとも思うけど。プログラミングをあまりしたことが無い人が読む人にとっての利点の方が大きいと思う。もしくはプログラミングをしない人が、プログラマがどういうことを大切に思っているかを知るのに。 \n\nEmacsをバカにする人達には読んでほしいところ。こんなことを言っている自分もIDEくらい使えるようにならないといけないのだろうけど(使う必要を感じないのだから仕方がないと思ってしまう)。 \n\nshellで色々とやろうと書かれた文章を読んでいた時、ちとインスパイアされた。自分がセマンティックWebに好感を抱いているのは、GUIよりもshellが好きなことと同じようなものではないかという点。GUIからは単に一つのアプリケーションで意図したこと以外利用出来ない機能も、CUIのコマンドプロンプトにすることで無数の使い方の可能性が広がる。それと同様に、単なるWebの情報をデータとして扱うことを出来るようにすることで、多くの可能性を引き出すことが出来る。 \n\nどうでも良いけど邦題の達人プログラマーはthe pragmatic progmmerに合わないと思う。実践的なとか、そういう意味だと思うし、そちらの方が内容と一致している。 \n\n以下、自分用メモ \n\n> もし誰か - 例えば銀行の窓口、車の修理工、店員が中途半端な言い訳をしたら、あなたはどうしますか? あなたは彼らのこと、そして結果的に彼らの会社についてどのように感じるでしょうか? (p.4) 責任を持つこと、いい加減な言い訳より対策を用意することのチャレンジ(演習課題) \n\n> GUIのメリットはWYSIWYG - What You See Is What You Get(見たとおりのものが結果として得られる) - というものです。そしてデメリットはWYSIAYG - What You See Is All You Get(見たとおり以上のものは得られない) - なのです。 (p. 78) shellの優位性を示すコンテキストで。 \n\n> プログラムの出荷時に表明(assertion)をオフにすることは、綱渡りの練習を一度うまくやり終えただけで本番の綱渡りに挑戦するようなものです。ドラマチックな価値はありますが、生命保険は下りないでしょう。 \nパフォーマンス上の問題があるのであれば、実際に影響のある部分の表明だけをオフにするようにしてください。(p.126)", ["プログラマ"]],
["アンビエント・ファインダビリティ", "http://www.amazon.co.jp/dp/4873112834", "Peter Morville / オライリージャパン", "ambient_findability", "Tue Sep 3 17:59:10 +0900 2008", "2", "次のようなことをごくたまに考える自分にとって、inspireされるべく読んでみたけど、残念ながら期待したほどの成果は得られなかった。 \n\n* Googleで世界中の情報をリアルタイムで入手できる今、どこにもしくはどのようにして新たな研究で付加価値を付けることが出来るか(世の中の技術進歩の速度に対してどうすれば勝てるか)。 \n* 一方、Googleの検索結果を閲覧しきれないほどあふれている情報量の中で、いかに有用な情報を効率的に入手するか。 \n\nあふれ過ぎて手に負えない情報をいかに見つけるかという本。単なる検索エンジンの話ではなく、現実世界の道、人、オブジェクト何でもござれ。何か、最初の方は、文章のわけが分からなくて退屈だった。小説のようなものだと割り切って読むようにした。同じ人が以前書いた本(Web情報アーキテクチャ)を読んだときはそんなこと感じなかったのだけど。範囲が自分が望んでいたものよりも広大過ぎて自分の頭がついていけなかったか。 \n\nムーアの法則のムーアがIntelの創始者の一人だったとは、知らなかった。 \n\n情報を入手することが面倒な時に検索すらしないというムーアズの法則(cf. p.56のメモ)には、まがりなりにも研究している者として、気をつけないとと感じた。こういうことを感じているようだから まがりなりなのだろうけど。一つ目は英語の論文を読むのは面倒ということ。もう一つは、研究テーマを見つけるときにどこで情報の入手をやめれば良いのかということ。きちんとやらないと、最後に困る。自分の成果をまとめる段階になって他の人が似たようなことを既にやっている、ということが往々にしてある。それくらいで探せる程度のことなら、本当に探す気があれば最初から探せることなのだろうけど、初期検討の段階では自分の思いついた研究テーマと同じ情報を見つけたくないから、探すのも適当になってしまう。これについて誰かが言っていた方法が頭をよぎる。初期検討時には血眼になって情報を探して、ある時から周りを見るのをピタリとやめる。これは、外の影響を受けるのをやめ自分の研究に没頭するため。その後まとめる時が近づいたら、再び周りを見て自分の成果がどの程度だったかを確認する。 \n\n以下、自分用メモ。 <!--more-->\n\n> どんなに有益な情報がネットワーク上に存在していたとしても、ユーザが見つけることができなければ、何の意味もありません。その「見つけやすさ」を表す新しい考え方が「ファインダビリティ」です。また、「アンビエント」はブライアン・イーノの「アンビエント・ミュージック」に触発された言葉で、無線ネット接続、モバイル機器、GPS、RFIDなどの技術によって可能になった、いつでも、どこでも、誰でも（モノであっても）、ネットワークに接続可能な世界を表しています。本書は情報アーキテクチャの第一人者である著者が、「見つけること」に関する技術の歴史、情報に関する先人の研究、ネット上の新しい動き（ロングテール、タギングなど）、自身の個人的な体験をもとに、「ファインダビリティ」とは何か、ネットワークが「アンビエント」になりつつある世界で、われわれはどこへ向かっているのか、を考察する意欲的な書籍です。ウェブの制作、ビジネスに関わる方に新しい視点を提供します。 (概要 http://www.oreilly.co.jp/books/4873112834/ より) \n\n> ユーザにとって情報を持たないことより持つことのほうがより苦痛で面倒である時には必ず、情報検索システムが利用されにくくなる傾向が見られるであろう。 \n\n> ここで私が提唱したいのは、多くの人々は情報を欲しがっていないかもしれないこと、そして彼らは情報が手に入るというまさにその理由により、情報システムを使うのを避けるであろうということだ……。情報を手に入れることは苦痛であり面倒なのだ。誰でも身に覚えがあるだろう。情報を入手すればまずそれを読まなければならないが、それは常に簡単とは限らない。次にはそれを理解しようとしなければならない……。そして情報を理解すれば、そこまでの作業が間違っていたり、または無駄だったことが判明するかもしれない……。結果的に、情報を入手して利用するより、そのどちらもしない方が、苦痛も面倒も少ないことが多いのだ。(p.56) ムーアズの法則とその説明 \n\n> そろそろわれわれは、情報の資産を作り出すことから、素の結果として起こるアテンション(集中力、注意力)の不足に取り組むことへと、注力すべきポイントを移すべき時である。なぜなら、ムーアの法則は人間の脳には当てはまらないからだ。事実上、過去5万年の間に人間の頭の中身はほとんどアップグレードされていない。テクノロジは高速に変化するが、生物の進化は遅々としているのだ。ここ数年間にこの2つの層で起こった摩擦により、ユーザビリティやユーザエクスペリエンス、ユーザ中心デザイン(UCD)などの概念が生まれることになったのである。シンプルさを心がけよう。簡単に使えるようにしよう。あれこれ考えさせないように! (p.57) \n\n> 十分な裏付けのある意思決定の罠をいくつか挙げてみるとしよう。 \n\n> * アンカリング(anchoring): 意思決定について考える際、人間の意識は最初に見つけた情報から過渡に影響を受ける。最初の印象やデータが、それに続く判断を留めるアンカー(錨)となる。\n* 確証(confirmation) :選択的な検索や知覚を通して、われわれは無意識のうちに自分の既成概念を支持するようなデータを探しており、それを覆すような証拠は避けてしまう。 \n*記銘性(memorability) : 直近の出来事や、劇的な事件などには過渡に影響を受ける。1つまたは複数の情報源から繰り返し同じ情報を受け取る場合にも、我々の信用や記憶や判断に影響が出る。 \n* 現状(status quo) : 意思決定者は、現状維持に役立つ保守主義や惰性や代案について強い指向性を示す。人間は、何もしなくて済む理由を探すものなのである。 \n* 埋没費用(sunk cost) : 自覚しているか否かに関わらず、我々は過去の過ちをなかなか認められずに、これまでの選択を正当化するような方向で意思決定を行ってしまう。(p.205) 限定的“非”合理性の説明\n\n> 情報に限って言えば、図7-3を見て分かるように、時には少ないほど望ましいこともあるのだ。情報量と意思決定の精度にある、逆U字型の相関関係を示す研究成果を見れば、この事態が明らかに見て取れる。(p.216) 情報過多の説明 (添付の画像は図7-3)", ["プログラマ", "oreilly"]],
["7つの習慣—成功には原則があった!", "http://www.amazon.co.jp/dp/4906638015", "スティーブン・R. コヴィー/キング・ベアー出版", "48", "Tue Aug 24 17:57:29 +0900 2008", "4", "自分なりに考えてきた道を、さらに整然と綺麗にまとめてくれていて、とてもためになった。自分がその道を通ってきたからこそ、素直にうなずける点が多々あった。 \n\n自分は比較的自立出来ているけれども“自立する = 一人で何とかする”と思っている所が、根本的な所で自立できていないように感じた(cf. p.58のメモ)。そして、それが相互依存への道を妨げている原因だと感じた。 \n\nこれを真摯にとらえて改善できるだろうか。変化した方が良いというのは理解しているのだけど、実践は難しい。本を読んだ価値を問われている気がする。 \n\n時間管理の所で思ったのは、今までは“仕事が終わらなければやりたいことの時間を削ってやれば良い”という考えだったのだけど、“やりたいことをするためにどう仕事を終わらせるか”を考えた方が建設的ということ。 \n\n他に感じたことは、こういう本を自分で読もうと思ったことが幸せということ。素直に読むことが出来て良かった。知らない人になかば無理やり読むことを勧められていたら、心への受け入れ方も違うものになっていたと思う。 \n\n以下、自分用メモ。<!--more-->\n\n> 依存から自立へ、そして自立から相互依存へと成長していく。(p.54) \n\n> 依存状態にいる人は、「あなた」というパラダイムを持っている。「あなた」が私の世話をする。「あなた」が結果を出してくれる。「あなた」がやってくれないとだめだ。結果が出ないのは「あなた」のせいだ、ということである。 \n自立は、「私」というパラダイムである。「私」はできる。「私」の責任だ。「私」が結果を出す。「私」は選択できるということである。 \nそして、相互依存は「私たち」というパラダイムである。「私たち」はできる。「私たち」は協力する。「私たち」が才能と能力を合わせれば、もっと素晴らしい結果を出すことができる、ということである。 \n依存している人は、欲しい結果を得るために他人に頼らなければならない。自立している人は、自分の努力によって欲しい結果を得ることが出来る。そして、相互依存をしている人々は、自分の努力と他人の努力を引き合わせて最大の成果を出すのである。(p.56) \n\n> 多くの人は自立を求めるあまり、わがままな理由で離婚したり、子供を見捨てたり、あるいは社会的責任をすべて放棄したりしようとする。 \n「足かせを捨てたい」や「解放されたい」、あるいは「自己主張をしたい」などの言葉で表現されるこの反応は、実は多くの場合、もっと深い依存性を暗に示しているにすぎない。この依存性は、外的なものではなく、内的なものであるから、決してそこから逃げることはできない。それは、他人の欠点に対して過剰反応をし、コントロールできないまわりの人や状況に対して被害者意識を持ってしまう依存症なのである。(p.58) \n\n> 主体性を持つということは率先力を発揮するだけではなく、人間として自分の人生に対する責任をとるということである。私たちの行動は周りの状況からではなく、私たち自身の選択によって決まるのだ。私たちは感情を価値観に従わせることができる。(p.86) \n\n> 自分の人生に対する責任を放棄すると反応的になる。例えば、反応的な人の多くは周りの物的な環境に大きな影響を受ける。天気が良ければ、気分も良い。しかし、天気が悪ければ気分も悪くなり、遂行能力も低下する。主体的な人は、自分の天気を持ち合わせている。雨が降ろうが陽が照ろうが関係ない。彼らの行動は価値観に導かれており、質の高い仕事をする価値観を持っていれば、天気がどうであろうと関係ない。(p.86) \n\n> 自分の身に起こる出来事によって傷つけられるのではない。自分がその状況を容認するという選択によって、傷を受けるのだ。 \nこれが精神的に受け入れにくい概念だということは、百も承知している。特に何年にもわたって環境や他人の行動を、自分の不幸の理由にしてきた人にとっては、そうだろう。しかし、心底から正直に「今の状況は私が行ってきた選択の結果だ」と言えるようになるまで、「他の道を選ぶ」と言うことはできない。(p.88) \n\n> 他人の弱点や欠点を批判する目ではなく、慈しみ深い目で見てほしい。彼らが何をしているのか、何を怠っているかが問題ではなく、それに対してあなたがどういう反応を選択するか、あなたは何をすべきかが問題なのだ。問題は自分の「外」にあると考え始めたら、その考えをやめてほしい。その考えこそが問題なのだ。 \n... \n効果的になるか、幸せになるか、そしてほとんどの場合において、どういう状況に置かれるかは自分自身の責任なのだ。(p.121) \n\n> もし、はしごをかけ違えていれば、一段ずつ昇るごとに間違った場所に早くたどり着くだけである。 (p.125) \n\n> ジャングルの中で手斧を持って道を切り開いている作業チームを考えてみよう。作業チームのメンバーは生産者であり、直接に問題を解決する人たちである。 \nマネージャたちはその後方に立ち、手斧を研いだり、方針や手順のマニュアルを作ったり、筋肉強化のプログラムを開発したり、新しい技術を導入したり、スケジュールを組んだり、作業員の賃金体系を作ったりする。 \nでは、リーダーとはどういうことをする人だろうか。それは、ジャングルの中で一番高い木に登り、全体を見渡して、下に向かって「このジャングルは違うぞ」と叫ぶ人なのである。 \nしかし、仕事に追われて能率を重視する生産者やマネジャーたちが、その言葉を聞いても、一般的に示す反応は、「黙ってろ。作業は順調に進んでいるんだから」というものだ。(p.132) \n\n> 大事を小事の犠牲にしてはならない。(p.207) \n\n> 成功者たちの共通点は、成功していない人たちの嫌がることを実行に移す習慣を身につけているということである。彼らにしてみても、必ずしも好きでそれを行っているわけではないが、自らの嫌だという感情をその目的意識の強さに服従させているのだ。 (p.210) \n\n> 効果的に人生を営む人は、第三領域(緊急であるが重要ではない領域)と第四領域(緊急でも重要でもない領域)を避けようとする。なぜなら、それは緊急であろうがなかろうが、重要ではないからである。そして、その人たちは第二領域(緊急ではないが重要な領域)に時間を投資することにより、第一領域の問題をなくしていくようにする。 (p.217) \n\n> 「もし、常日頃から行っていれば、あなたの私生活の質、仕事の業績、または結果を著しく向上させる活動がそれぞれ一つずつあるとするなら、それは何だろうか」 \nそうしたインパクトを持つ活動は、すべて第二領域の活動である。それを実際に行えば、あなたの効果性は劇的に向上することになるだろう。 (p.219) \n\n> 第二領域の活動を行うためには、主体的でなければならない。なぜなら、第一領域や第三領域の事項は、向こうから私たちに働きかけてくるが、第二領域は、自ら進んで働きかけなければならないからだ。そして、第二領域の優先課題に「イエス」と言うには、一見重要に見える緊急な活動に「ノー」と言わなければならない。 (p.222) \n\n> 気持ちよく、笑顔で、率直に最も優先すべきこと以外に対して「ノー」と言う勇気を持つ必要があるのだ。ためらうことなく、「ノー」と言えるようになる秘策は、自分の中でもっと強い、燃えるような大きな「イエス」を持つことである。小事に振り回されてはならない。「最良」の敵は「良い」なのだ。 \n(p.223) \n\n> 人間関係づくりに最も大切な要素は、私たちが何を言うか、何をするかということではなく、私たちはどういう人間であるのかということである。 (p.268) \n\n> Win-Winとは、当初それぞれの当事者が持っていた案ではなく、まったく新しい第三案の存在を信じることであり、相手や自分の考え方に限定される必要はなく、より良い方法があるはずだと確信することである。 (p.302) \n\n> 目の具合が悪くなって眼科に行ったとしよう。医者は、あなたの話をしばらく聞くと、おもむろに自分の眼鏡を外し、それをあなたに手渡して言う。 \n「これをかけてごらんなさい。私はこの眼鏡をかけて、もう十年になりますが、本当にいい眼鏡です。。家に同じものがもう一つあるから、これはあなたに差し上げましょう」 \nそういわれて、あなたはその眼鏡をかけてみるが、目の調子は一向によくならない。 \n「これは、ひどい。何も見えません」とあなたは言う。 \n「どうして」と医者が訊く。「私はそれで良く見えるんだから、もっと頑張ってごらんなさい」 \n「頑張ってますよ。でも何もかもぼやけて見えます」 \n「困った人だ。もっと前向きに頑張りなさい」 \n「とにかく、何も見えません」 \n「何を言ってるんだ。こんなにあなたのことを助けようとしているのに」と医者が責める。 \n次回、再び目の具合が悪くなったとき、あなたはこの医者の所にいくだろうか。おそらく行かないだろう。なぜなら、診断もせずに処方箋を出す人など信頼できないからである。 (p.349)\n\n> 私があなたに心の中を打ち明けない限り、そして、あなたが私という人間や私の独自の状況や気持ちを理解できない限り、あなたは、私にどういうアドバイスや助言を与えたらいいのか分かるはずもないということだ。つまり、あなたの口から発せられる言葉がいくら正しく素晴らしいものであっても、私の状況には当てはまらないものになってしまう。 (p.353) \n\n> 相乗効果的になりそうな状態から単なる混沌状態に陥ってしまうケースは、確かに存在する。残念ながら、一回そういう痛い経験をした人は、次の機会にも前回の失敗の記憶が蘇り、一歩踏み出すことができない。つまり、最初からできないだろうという意識のうえでそうした状況に臨むと、そのような結果から自分を守ろうとして、相乗効果を出す可能性を台無しにしてしまう。 \n例えば、数人の行動を見て、全員に対して自由と想像力を制限するようなルールやマニュアルをつくる経営者とか、最悪の状態ばかりを想定して契約書を作成し、想像力の精神と相乗効果の可能性を台無しにするビジネスのパートナーなどは、その好例といえるだろう。 (p.398)", ["自己啓発"]],
["イノベーションのジレンマ", "http://www.amazon.co.jp/dp/4798100234/", "2001 翔泳社 クレイトン・クリステンセン\, 玉田 俊平太\, 伊豆原 弓", "40", "Tue Aug 9 00:29:00 +0900 2008", "3", "良い本だった。古典なのだけど、読まず嫌いは良くないと素直に反省。\n\n大企業にとって破壊的技術は、市場規模、性能の面で既存の顧客に対して魅力的ではないため、手をつけるのに消極的になる。これに対して、新興企業にとっては十分な市場規模であり、新たな市場を開拓していく。新たな市場が形成されたり、性能面で既存のものにも引けを取らない時ものが出来たころには、大企業が参入するにはシェアや技術面で手遅れになっている。優良な企業ほど顧客のことを考えるがために破壊的技術を生み出せずまた対応できないというジレンマを説明したもの。\n\n同じことを色々な観点からデータも踏まえ納得させていく流れは見事。一般的な言明の直後に納得できる具体例をあげるなど、説得力が高い文章やわかりやすい文章の書き方としても、ためになる。\n\n最後の方に電気自動車を例にとり事例研究をしているのだけど、具体的な記述がさほどあるわけではないけど、ためになった。それまでの章を読んでいることが前提だろうけど。\n\nIBMにマイクロソフトが勝った理由、マイクロソフトにGoogleが勝った理由をこういう観点から見ても面白そう。“これは自社にとってやる価値がある内容か？”と問われたときに自信を持って“わかりません”と言えそうな気がする(ダメ社員)(cf. p.197のメモ)。\n\n\n以下、自分用メモ。<!--more-->\n\n> あらゆる業界のあらゆる企業は、組織の性質の法則という力のもとに動いており、この法則は、企業になにができ、なにができないかを決める際に強力に作用する。破壊的技術に直面した経営者は、この力に負けたとき、企業を失敗させる。\nこれは、翼を腕にくくりつけ、高い場所から力一杯羽ばたいて飛びおりた古代の人々が、例外なく失敗したのに似ている。夢を抱き、必死に努力したが、強力な自然の力に逆らっていたのだ。この戦いに勝てるほど強い人間はいなかった。飛行が可能になったのは、人間が、世界の動きをつかさどる自然の法則や原理、すなわち重力の法則、ベルヌーイの原理、揚力、抗力、抵抗の概念を理解するようになってからだ。その後、これらの法則や原理とと戦うのではなく、それを認め、その力と調和する飛行システムを設計することによって、人間はついに、かつては想像もできなかった高度と距離を飛行できるようになった。 p.13-14(優良企業が破壊的技術に負ける説明のコンテキストで)\n\n> 起業家にとってきわめて難しい問題の一つが、顧客と対話しながら製品を開発、洗練できる適切な「ベータ・テスト・サイト」を見つけることだという。一般に、顧客窓口をつとめるのは、その会社の既存製品を販売する営業担当者である。この方法は、既存の市場向けに新製品を開発するにはよいが、新しい技術の新しい用途を見いだすには適していない。新しい技術をいつも主流顧客に持ち込もうとするこの傾向は、マーケティング能力の不足を示している。この問題を、技術能力の問題として片づける研究者が多いが、新しい技術の新しい市場を見つけられないことは、イノベーションにおいて、企業にとって極めて不利な条件になりかねない。 (p.78から適当に抜粋)\n\n> 実績ある起業が直面するもっとも強固な障壁は、企業自身がそこへ入りたくないと考えていることである。(p.95)\n\n> 「どういう人がこれを買うだろか」\n「わかりませんが、どこかに市場があるはずです」\n「このアイデアを潜在顧客に見せたのか」\n「ええ、しかし、興味はあるがどういうふうに使えばいいかわからないと言っていました」\n「このプロジェクトで利益が得られると思うかね」\n「ええ、思います。もちろん、価格をいくらに設定するにもよりますが」 (p.126から適当に抜粋)\n破壊的技術のアイデアを提出した技術者とマネージャの会話。確実に市場の需要がある持続的技術のプロジェクトに対して承認が得られづらいことを表した例。\n\n> 成功した経営者は、組織の性質に関する五つの基本原則をつねに認識し、利用してきた。破壊技術との闘いに破れた企業は、この原則に目を向けなかったり、逆らってきた。その原則とは、つぎの五つである。\n\n> 1. 資源の依存。優良企業の資源配分のパターンは、実質的に、顧客が支配している。\n2. 小規模な市場は、大企業の成長需要を解決しない。\n3. 破壊的技術の最終的な用途は事前にはわからない。失敗は成功への一歩である。\n4. 組織の能力は、組織内で働く人材の能力とは関係ない。組織の能力は、そのプロセスと価値基準にある。現在の事業モデルの核となる能力を生みだすプロセスと価値基準が、実は破壊的技術に直面したときに、無能力の決定的要因になる。\n5. 技術の供給は市場の需要と一致しないことがある。確立された市場では魅力のない破壊的技術の特徴が、新しい市場では大きな価値を生むことがある。\n\n> 成功した経営者はこれらの原則をどのように自分たちの優位に役立てたのか。\n\n> 1. 破壊的技術を開発し、商品化するプロジェクトを、それを必要とする顧客を持つ組織に組み込んだ。経営者が破壊的イノベーションを「適切な」顧客に結びつけると、顧客の需要により、イノベーションに必要な資源が集まる可能性が高くなる。\n2. 破壊的技術を開発するプロジェクトを、小さな機会や小さな勝利にも前向きになれる小さな組織に任せた。\n3. 破壊的技術の市場を探る過程で、失敗を早い段階にわずかな犠牲でとどめるよう計画を立てる市場は、試行錯誤の繰り返しの中で形成されていくものであると知っていた。\n4. 破壊的技術に取り組むために、主流組織の資源の一部は利用するが、主流組織のプロセスや価値基準は利用しないように注意した。組織の中に、破壊的技術に適した価値基準やコスト構造を持つ違ったやり方を作り出した。\n5. 破壊的技術を商品化する際は、破壊的製品を主流市場の持続的技術として売り出すのではなく、破壊的製品の特徴が評価される新しい市場を見つけるか、開拓した。 (p.144)\n\n> 存在しない市場は分析できない。企業と顧客がともに市場を見いだす必要がある。破壊的技術の用途となる市場は、開発の時点では単にわからないのではなく知り得ない。 (p.197)\n\n> 「あいつらはうちの製品を、値段でしか見ていない。うちの製品の方が他社製品よりずっと優れていることがわからないのか」。たしかに、市場に出回っている各社の製品には、依然として違いがあるかもしれない。しかし、特徴と機能が市場の需要を越えてしまうと、その違いは意味を失う。(p.254)\n\n> ある分野の製品の性質が時間とともにどのように進化するかについて。「購買階層」という製品進化モデルでは、機能、信頼性、利便性、価格の四段階を一般的なサイクルとしている。(p.254を適当に抜粋)\n\n> 実績ある企業が破壊的技術に直面したとき、開発における最大の課題は<em>技術的</em>なものであり、既存の市場に合うように破壊的技術を改良することだと考えるのが普通である。破壊的技術の商品化に成功した企業は、開発における最大の課題は、<em> マーケテング</em>上のものであり、製品の破壊的な特性が有利になる次元で競争が発生する市場を開拓するか、見つけることだと考える。\n破壊的技術に直面したマネージャーは、この原則に注意することが必要だ。歴史にしたがうなら、破壊的技術を研究室で温め、主流市場に適したものになるまで育てようとする企業は、破壊的技術の特性を当初の状態のまま受け入れる市場を見つける企業のようには成功しない。(p.257)\n\n> 市場の需要を測るため、顧客の意見を聞くだけでなく、顧客の行動を注意して観察する。顧客が実際どのように製品を使うかを見る方が、フォーカス・グループに口頭でインタビューするよりはるかに信頼性の高い情報が得られる。(p.272)\n\n> 破壊的技術は、投資することが最も重要な時期にはほとんど意味を持たないため、実績ある企業の慣習的な経営知識が参入や市場異同の障壁になることは間違いないと思ってよい。この障壁は、それほど強力に浸透している。(p.296)\n\n> 破壊的技術に直面した経営者に対して、つぎのことを勧めている。\n\n> 1. 破壊的技術の開発を、そのような技術を必要とする顧客がいる組織に任せることで、プロジェクトに資源が流れるようにする。\n2. 独立組織は、小さな勝利にも前向きになれるように小規模にする。\n3. 失敗に備える。最初からうまくいくと考えてはならない。破壊的技術を商品化するための初期の努力は、学習の機会と考える。データを収集しながら修正すれば良い。\n4. 躍進を期待してはならない。早い段階から行動し、現在の技術の特性にあった市場を見つける。それは現在の主流市場とは別の場所になるだろう。主流市場にとって魅力の薄い破壊的技術の特性が、新しい市場をつくり出す要因になる。(p.303) ", ["イノベーション", "Chrisstensen"]],
["1分間マネジャーの時間管理", "http://www.amazon.co.jp/dp/4775941119", "ケン・ブランチャード\, ウィリアム・オンケンJr / パンローリング ", "one_minute_manager", "Tue Aug 3 17:55:18 +0900 2008", "3", "部下の仕事(モンキー)は部下に任せましょう、という本。担当者の仕事に手を貸さない管理者に対してコノヤローと思う気持ちがやわらいだ気がする。尊敬するわけではないけど。30円(+送料350円)と1～2時間で読める本にしては大満足。今気づいたのだけど、題名が“マネージャ”ではなく“マネジャー”だ。 \n\n以下、自分用メモ。 \n\n> なくてはならないマネージャなんて百害あって一利なしだ。とくにそのマネージャがいることで、部下たちの仕事が減るようではね。(p.29) \n\n> さて、私たち二人が出会うまで、モンキーは部下の背中に乗っていたのですが、いったん話はじめると彼の問題を私たち二人が考えることになってしまった。つまり、モンキーはこの段階で私たち二人の背中に片足ずつ足を預けた格好になるわけだ。 \nそして、「後でゆっくり考えてから返事をすることにしよう」と私が言った途端、モンキーはさっと私の背中に飛び移り、一方、14kgはするこのお荷物を降ろしてもらった彼は、軽々とした足どりで立ち去ったのです。 (p.36) \n\n> やる価値のない仕事を、うまくやったとしても何の値打ちもない。(p.48) \n\n> 仕事を任せられるようにするためには、何が必要条件となるのだろうか？次に記す二点について十分に確信が持てない限り、マネージャーとしては部下に仕事を任せられないし、また任せるべきでもない。 \n\n> 1. プロジェクトが当初の予定どおりに進行していること。 \n2. 一任しても、うまくやって行けるだけの能力が部下に備わっていること。 \n\n> これらの点を確認せずに、プロジェクトに関する権限の全てを部下に与えるようでは、決して仕事を一任したことにはならない。単に責任を放棄しているに過ぎないのである。(p.151) ", ["チーム"]],
["スケーラブルWebサイト", "http://www.amazon.co.jp/dp/4873113113", "Cal Henderson/オライリー・ジャパン ", "scalable_web_site", "Tue Aug 1 17:55:18 +0900 2008", "3", "Flickrの人。 \n\nこうすればスケーラブルなWebサイトが作れる、という内容ではなく、そのためにはこういうことを考える必要もあるという項目を網羅的に紹介している。例えば、Javaと同じくPHPもスケーラブルと書いてある。概念的にはそうだろうけど、そういうのが知りたいのではなくてmod_phpの並列性がどうとか、そういうことを知りたい。 \n\n最初の方は知っていることも多く8\, 9章までは退屈だった(ちなみに全11章)。業務で扱っている人にはもっと退屈なことだろう。でも、フムリと思うことが出来ることもあって満足。 \n\n例えば、ツリーレプリケーション(p.235\,236) の箇所。マスターとスレーブ階層の中間層で、Usersテーブルなど一部の情報のみを抜きだし、他のindexなどの情報を持つものに比べMyISAMテーブルを使うことが出来るなど高速に実行可能にすることで、このテーブルを情報の読み書きに使うことで性能を向上させることが出来る。よくこんなこと考え付くなあ。 \n\n以下、自分用メモ<!--more-->\n\nサーバやデータセンタなどは、普段2つで動作させておくと1つ壊れた時にもう1つだとパワー不足になるので3つの方が良い(と直接は言ってないけど)。 \n\nおすすめされてた、ハードウェアレベルでのスケーラブルの本。 \n\"Performance by Design: Computer Capacity Planning by Example\"(Prentice Hall) \n\n> MTBF(平均故障間隔)は面白い数字で、間違って解釈されていることが多いものです。ドライブのMTBFが500\,000時間(約57年)という場合、これは57年故障しないという意味ではありません。デバイスのサービス寿命も考慮する必要があります。MTBFが57年で、サービス寿命が1年のドライブがあるとします。サービス寿命にしたがって1年に1回ディスクを交換すれば57年間ドライブを故障せずに動作させることが出来るでしょう。一方、57台のディスクを1年間動作させた場合、1年以内に1台が故障することになると予想できます。サービス寿命(と保証期間!)は注意すべき重要な数値なのです。(p.148) \n\n“サービス寿命”なんて単語知らなかった。Googleしても微妙なので一般的な用語ではないみたい(そういう時はオリジナルの英単語も併記してほしい)。当たり前の用にMTBFの概念を間違って解釈していた。 \n次の説明が一番分かり易かった。 http://pc.watch.impress.co.jp/docs/2002/0920/key215.htm \n\n> PCでは、ディスクドライブなどの信頼性を表すためによく用いられており、数10万～100万時間という大きな値が示されていることが多い。このMTBF は、実際にこれだけの時間、故障することなく稼動しつづけるということを意味しているのではなく、あくまで、統計的に算出された値である。単純な例としては、例えば500台のサンプルを、想定する環境の10倍厳しい条件で(加速試験)100時間テスト。1台故障したので、MTBFは50万時間 (10×500台×100時間÷1台)というように算出する。したがって、MTBFが大きい方が信頼性は高いが、ユーザーにとって最も気になる「買った製品がいつ壊れるのか」ということを示しているわけではない。経年変化の少ない半導体パーツなら、長期に渡って数値通りの故障率を維持できるが、可動パーツは、日に日に故障率が高まって行く(もちろん使い方や環境にもよる)ことが、容易に予想できるだろう。 \n\n迅速に返すために、チケットシステムを導入する。リクエストがあった時に、チケットサーバがチケットを返しクライアントにまずは返す。バックグラウンドでリモートサービスプロバイダの処理が終わるとチケットサーバに通知しそれをクローズさせる。クライアントはチケットステータスをWebサーバに問い合わせクローズされるまで定期的に繰り返す。 (p.152-153の内容を適当にまとめた) \n\n> プロトコルの独自開発は、多くの場合、良い考えではありません。ただし、限られた数の機能を持つ特定のドメインに依存したタスクにおいて、(速度の点についてなど)既存のプロトコルを避けた方が良い理由が十分にある場合は、独自プロトコルを作成することが成功への近道となる場合があります。 \nFlickrで独自のプロトコルを作成する前に、まずNFSを、そしてSCPを採用したことはお知らせしておいた方が良いでしょう。これらのプロトコルの問題点に直面して初めて独自のプロトコルの実装を始めたのです。アプリケーションを構成する多くのコンポーネントにも共通しますが、まずは複雑で時間のかかることを避け、既存の他人の仕事を利用させてもらうことです。(p.162) \n\n> 同じハードウェア構成を使っているのであれば、マスタよりスレーブが読み込み能力が高くなるということはありません。この点は、見落としている人もいますが、かなり重要なことです。というのは、スレーブはマスタの行う書き込みをすべて行う必要があるため、スレーブは、マスタより強力ではないにしても、少なくともマスタと同じ能力を持ち合わせていなければならないからです。(p.234) MySQLのレプリケーション。マスターがスレーブに書き込みの内容を送信しスレーブがそれを実行することでレプリケーションを実現している。 \n\n> ウェブサービス用のAPIはアプリケーションのコアの上にある、もう一つのプレゼンテーション層のひとつなのです。(p.302)", ["web", "oreilly"]],
["パターン認識と機械学習 上", "http://www.amazon.co.jp/dp/4621061224", "C.M. ビショップ / 丸善出版", "pattern_recognition_and_machine_learning", "Tue Jul 13 00:29:00 +0900 2008", "3", "Web 2.0系の本を読んで、ライブラリやアルゴリズムを使えば色々と出来ることは理解した。でも、何故そう出来るのかという根本的な所は分からないし、色々と出てくるアルゴリズムがどの位置に属するのかを知りたくて読み始めた本。本当は下巻が読みたい内容だったのだけど。 \n\nと、偉そうなことを言っている割には全く理解出来ていない。柳沢教授の生活というマンガでそのお孫さんが難しい教授の本を漢字が読めないので「よって、は、である」と声を出して読むシーンがあるのだけど、正にそんな感じ。 \n\nそれでもこの本は良い本であるということは分かる。分からないと思い始めた時に図で直感的にその意味を説明してくれる。挫折仕掛けた所で随所にあり助けられた。また、理解していないけど、きちんと追っていけば理解出来るという根拠の無い自信も与えてくれる。辛うじて一章の内容を理解した程度の自分だけど、一章が理解出来ていると他の章に書いてあることも大体こんな感じなのだろうなと予測も出来る。それで良いというわけでは無いけど、その本の書き方に感心した。 \n\n嬉しかったのは高専のときに習った、ニューラルネットワークの誤差逆伝搬(error backpropagation)の係数が誤差関数を二乗和とした時に最小となるような計算結果で定められていたことを知ったこと。他にも色々と読んでてフムリと思ったことがあったのだけど、忘れてしまった(我ながら本を読んだ価値が無い)。次元の呪いの説明(次元が増えるほど球の表面に確率質量が集まる)のは分かり易かったのは数少ない覚えていることの一つ。 \n\n星の数が少ないのは自分の理解が足りていないから。", ["機械学習"]],
["BEST SOFTWARE WRITING", "http://www.amazon.co.jp/dp/4798115819", "/翔泳社", "best_software_writing", "Tue Jun 12 17:53:24 +0900 2008", "3", "発売当初に買っていたけど、他の本を読んでたのでやっと読み終わる。考えなくても読め、良質な内容が保証されているこういう本は良い。でも、テレビを見ている時のような後ろめたさを感じる。他に読むべき本があるからか。まあ、気分転換。 \n\nつい最近、「C++は難しくて覚える気がせず、魔法の言葉\"extern C\"で逃げていたよ」、という会話をしていたので同じようなことが書いてあってオモロかった。 \n\nでも、どうしても「ホワイの(感動的)Rubyガイド」は好きになれない。Webを通じて3回目だけどダメだった。イカれている文章は嫌いでは無いのだけど、この人とは合わないみたい。でも、マンガは好き。 \nhttp://www.aoky.net/articles/why_poignant_guide_to_ruby/index.html \n\n以下、自分用メモ <!--more-->\n\n情熱 \nRon Jeffries http://www.xprogramming.com/xpmag/jatPasshion.htm \n\n> 私は情熱のために生まれてきた。情熱は私の仕事の中に、そして仕事でかかわる人たちの中にある。 \n\n> 以下に挙げるのは、私がなろうと努めていて、まわりの人たちの中にも見出したいと思っているものだ。 \n\n> * 私はもはや興味がなくなったかのように流れ出してしまう人でなく、意見を交わしてくれる人たちと一緒に最後まで頑張りたい。 \n* 私は悪意なしに熱心に議論したい。朝に悪態をつかれても、その夜には一緒に愛情を持って和やかに飲みたい。 \n* 私は他の人たちに本当の尊敬の念を持って接し、彼らにありのままでいて、やりたいようにやらせておきながら、他のことも試してみるように影響を与えるべく、できる限り努力したい。 \n* 私は自分のアイデアを分け与え、私の小さな贈り物が何倍にもなって戻ってくるだろうことを信じていたい。 \n* 私のアイデアを同僚たちに伝え、お返しに彼らのアイデアをもらえるよう、私にできるあらゆる方法でコミュニケーションをはかりたい。 \n* 私は他の人たちの持つ情熱と、強い信念と、アイデアを、自分自身のものと同様に、讃えたい。 \n* 私はそれらの信念とアイデアを互いにぶつけ合い、その中からよりよいアイデアが得られるだろうことに自信を持ちたい。 \n* 私たちがこれをやっているのは、互いを思いやる愛からなのだと思いたい。そして本当の情熱と、本当の仕事と、本当のアイデアが相互作用して火花を散らすのを歓迎したい。 \n\n> 私はそういう人間になろうと最善を尽くしている。そして私はそのような人たちに周りにいてほしい。一緒にいてくれてありがとう。 \n\nC++ -- 忘れられたトロイの木馬 \nEric Johnson http://ejonson.blogs.com/software/2004/11/i_find_c_intere.html \n\n> プログラマたちがC++を使い始めたのは、ただ//をコメント記号に使えたからだったというのを私は覚えている。C++はその人気の大部分を、合法なANSI Cプログラマが、同じ働きをするC++プログラムでもあったという事実に紛れもなく負っている。 -- Joel \n\n> C++は、既存のＣの領域における機能全てを容易に使えたため、移行は簡単だった。書き換えなければならなかったのは、旧式の関数を“extern C”の魔法を使って宣言することだけで、C++は容易にそれを扱うことが出来た。 \n\nギャップを埋める パート2 \nEric Sink http://software.ericsink.com/bos/Closing_the_Gap_Part_2.html \n\n> ギーク向けのマーケティングの本 \n 「コトラーのマーケティング・コンセプト」(東洋経済新報社\, 2003年)\n中でもこの本がとてもいい。80の章からなり、各章はとても短く、焦点が絞られている。広告、顧客、価格に関する章は、このアーティクルと特に関係が深い。 \n\n> * 「マーケティング戦略論-ノースウェスタン大学大学院ケロッグ・スクール」(ダイヤモンド社\, 2001年) \nアカデミックで、読むのはあんまり楽ではないが、中身はたっぷりある。価格つけについての章は30ページほどあって、しばらくの間は誰をも忙しくしておくくらいに中身が濃い。 \n* Al Ries\, Jack Trout “Positioning: The Battle for Your Mind\, 20th Anniversary Edition\" (McGraw-Hill\, 2000) \n彼らは「ポジショニング」という用語を発明し、それをタイトルにした彼らの本は、未だに読む本であり続けている。 \n* 「売れるもマーケ当たるもマーケ-マーケティング22の法則」(東急エージェンシー出版部\, 1994) \nこの本が古典であるということは心に止めておくことにしよう。ストーリーは古くなるにしても、原則は普遍的だ。", ["プログラマ"]],
["Web情報アーキテクチャ", "http://www.amazon.co.jp/dp/487311134X", "Louis Rosenfeld\, Peter Morville/オライリージャパン", "web_information_architecture", "Tue May 18 17:51:29 +0900 2008", "3", "陳腐な言葉で言えば「Webサイトの作り方」に関する本。ただし、HTMLの書き方ではなく、情報をどう管理すれば良いかについて書かれている。基本的なことが書いてあるのだけど、それを知るのために苦労した知識も多いので、最初にこの本を読んでおけば良かったと後悔するくらい。 \n\n検索サイトをいかに構築するかという分野のエンジニアリングが将来的に一般的になると漠然と考えていたのだけど、既にそれを含め情報の生成から管理までを考慮する情報アーキテクトと呼ばれているものが存在していた。 \n\n「検索する人が何を検索しようとしているのか分かっていない」という下りは目から鱗。普段自分では何をどうやって検索しているのだろう、と疑問を持っていた。自分の場合、ほとんどは特定の目的を持って検索しているのだけど、たまに技術の状況とかを広く知りたい場合があり、たしかにその場合はどういう記事を求めているかは明確ではない。色々な使われ方などを知ったり、検索数などから日本や世界でどの程度幅広く使われているのか、というのを知ったりすることがある。 \n\n本が古いのと階層構造の説明が多いことからYahoo!が多く例題として使われていた。そういえば、日本ではYahoo!が最も使われている検索エンジンであること、単語で検索するよりもディレクトリサービスを使った検索の方が多いことを数年前に知ったのだけど、今もそうなのだろうか。携帯ユーザはどのようにして検索しているのかも知りたい所。 \n\n企業にとって競争優位性の根底は技術にあるという箇所が響く。他の本ではよく、人がやはり重要とかの文章を読むので新鮮だった。技術だっていいじゃない、という感じか。 \n\n文章の書き方(論理展開)がいまいち分かりづらい。流れから予想される文章と異なる文章が突然出てきて、その前後を読み直さなければいけないことが何度もあった。文章の論理構成として、一貫して流れるように書いて欲しい。具体例を挙げれば、「Aはこういう理由であまり良くないです。でも、Aの場合はこうです。」という感じ。読んでてイヤになる。 \n\n以下、自分用メモ<!--more-->\n\n> 3.2 情報ニーズ \n情報を探すパターンは3つある。 \n\n> 1. 既知情報探索(known-item seeking) 必要な情報が何か、どこにあるかを知っているもの。\ne.g. 同僚の電話番号を探すための社員住所録を探す場合。 \n2. 探求探索(exploratory seeking) いくつか役に立つものを探すもの。ユーザは自分が本当に探しているものが何かを把握していない。 \ne.g. 「会社が提示する退職プランついて知りたい」ときに、IRAプランとロスIRAプランのどちらかが自分に最適かを知る。 \n3. 全数探索(exhaustive research) 「あらゆる物を手に入れたい」。特定のトピックに関するもの全てを探している。 \ne.g. 友人の症状について知りたい人が「AIDS」、「HIV」に関する情報全てを検索する。 \n\n> 3.3 情報探索モデル \n情報を探しながら、自分の本当に必要なものは何かを詳しく知るにつれ、情報のニーズを変更していく。 \n\n> 5.3 情報の組織体系 \n5.3.1 正確な組織体系 \n情報を細かく排他的なセクションに分かれる。 \n例. アルファベット順、時系列順 \n\n> あいまいな組織体系は、何を探しているか分からないユーザに取って有効である。 \n例. トピック、タスク(Edit\, Insert\, Formatなど)、顧客、メタファー(メタファーの例: デスクトップ、フォルダ、ファイルなど。ユーザビリティが優れないので絶滅気味)、ハイブリッド \n\n> 9.5 シソーラスのタイプ \n\n> * 古典的シソーラス: インデクスとクエリ時にシソーラスを使用する。理想的にはこれを使うのが一番望ましい。 \n* インデクシングシソーラス: インデクス時にのみシソーラスを使用する。検索エンジンに手を入れられない場合等。検索するユーザが優先後を覚える必要がある。 \n* 検索シソーラス: 検索時にシソーラスを使用する。古典的シソーラスを使用すると、インデクス時の計算量が膨大になる時など。検索時にシソーラスを使って同義語の検索も自動的に行ったり、下の概念を提供したりするなどの使用例。 \n\n> 9.7 語義の関係 \n\n> * 等価関係: 優先語と変形語をつなぐもの。 \n* 階層性: 一般化、全体-部分、インスタンス \n* 連想: 「いいパンツですね。それには、このシャツが似合いますよ」 \n\n> 18.8 競争優位 \n要するに、情報アーキテクチャの目に見えない性質は、競争優位に貢献しているということです。Geoffrey Mooreはこの隠れたチャンスを経営戦略に関して明らかにしています。Mooreは競争優位性の階層を提示して戦略が形成されるマルチレイヤー基盤を提示しました。 \n「人々の大部分は一番上のそうである分科共有物(例:ブランディングとポジショニング)に焦点を定めているが、下層から上層へと構築した場合にのみビジネスは持続可能な競争優位を獲得できる」とMooreは説明しています。 \n\n> ベースには技術そのものが存在している。これが核の核である。その上には価値連鎖が形成され、これが潜在能力を現実へと翻訳する。この進化の上には特定のマーケットがある。この競争を最終的に表現したもの、つまりすべての人の目に見える表層は、言葉で並べ立てた差別化である。直接顧客や消費者相手に競争する価格、有効性、製品機能、サービス...さまざまな技術が利用できる市場において競争優位の足場を堅固にするためには、企業は、高層ビルのように、基盤を前奏の下まで沈めることが必要である。 \n\n> メディアの権威や冷水タンク操縦者が、ブランディングとポジショニングを主張する一方、長期的に関わる戦略的決定は表面化に生じるため外界や多くの起業の「内部者(インサイダー)」の目には見えません。戦略に関する作業が目に見えないという性質は、指導者にとっては素晴らしい利益につながり、人まねをしようとする競合者にとっては不利なものとなるのです。", ["web", "oreilly"]],
["ビューティフルコード", "http://www.amazon.co.jp/dp/4873113636/", "Brian Kernighan\, Jon Bentley\, まつもとゆきひろ オライリージャパン 2008年4月23日", "39", "Tue May 6 00:26:00 +0900 2008", "4", " http://www.oreilly.co.jp/books/9784873113630/download.html\nで一部を読んだときから発売を待ち望んでいた。\n\n読むのが楽しい。あまりに楽しくもったいないので新幹線で読む楽しみを残すため、出張まで読むのを自粛したほど。しかし、そう簡単には読み終わらなかった。一つ一つ考えなければ読めないのでなかなか進まない。でも楽しい。\n\nデバグやLinuxのドライバなど様々な話が載っているのだけど、何をおもしろいと思うかで自分の好みが分かっておもしろい。どちらかというと bit演算による集合の計算やハッシュの実装、OSのロックなど低レイヤの話が好きだということ。逆にオブジェクト指向などの上位レイヤの話はあっそ、と いう感じであまりおもしろくなかった。更に言えば、J2EEやログのアーキテクチャの話は何じゃこりゃレベルだった。自分の知らないようなことがおもしろ いと感じるのかも知れない。\n\n例えば、理屈的にはO(log n)で最速な検索をハッシュという全く異なる概念を導入してO(1)にしてしまう、そういう話にグッと来る。最後の対談のタイトルでもある「コンピュータサイエンスをなめるな」なのである。\n\n技術を知るにはその一つ下のレイヤの技術を知るのが早道だと常々思っている。ネットワークであればプロトコルスタックであり、アプリケーションで あればOSであり、プログラム言語であればその処理系(実行系、コンパイラ)である。なぜなら、その技術のオペレーショナルセマンティクス(操作的意味 論)を知ることに他ならないからだ、とSchemeのマクロの話を読んで思った次第。", ["プログラマ"]],
["RESTful Webサービス", "http://www.amazon.co.jp/dp/4873113539", "/オライリージャパン", "restful_web_service", "Tue Apr 17 17:47:56 +0900 2008", "3", "「サーバ側のリソースの状態が変化するときは POST を、状態が変化しないときは GET を使う」という下のURLの文章を読んで、自分が全くRESTful(というかHTTP)を理解していないことに気づき衝動買いしたもの。http://blogs.ricollab.jp/webtech/2008/04/introduction_to_rest/ \n\n自分の理解で言うと、getter(GET\, HEAD)とsetter(PUT)とnew(POST\, PUT)とside-effect(POST)というオペレーションでオブジェクト指向でHTTPを設計せよという原理なのだと感じた。ここでオブジェクトはURIであり、getterは副作用を与えず、setterはべき等性(1回setしたものとそれ以上setした状態は同じ)を満たす。 \n\nこれで実現しようとすると、処理をさせたいもの全てにリソースを与える必要があるため、オブジェクト(URI)の数が膨大になると思う。 \n\n既存のWebサービス技術(SOAP\, WSDL\, WS-*)をPOST指向のRESTfulの敵と捉え、大Webサービス(Big Web Services)と呼び揶揄している。 \n\n「シンプルに」という理念は良く分かるのだけど、既にかけ離れてしまっている現実においてこの設計思想を原理主義のまま実装するのはかえって手間になると思う。多くのファイアーウォールではPUT\, DELETEを通さないだろうし、トランザクションの実装は考えただけでも複雑だ。Railsなどのフレームワークなどの整備があって初めて普及すると思う。GoogleやYahooなどが採用していることからも流れが来ているのは良く分かるのだけど。 \n\n最も大きな魅力はサーバのステートレス化によるスケーラビリティだと感じた。サーバでセッションを管理する必要が無いので、スケールさせるのが容易なのである。(上手く実装すれば)ブラウザの戻るボタンから解放されるのもうれしいだろう。その他は、精神的に気持ちが良い、ということ。HTTPをHTTPとして、URIをURIとして使おうという感覚には共感する。 \n\n以下、自分用メモ<!--more-->\n\n1章 プログラマブルWebとWebサービス \n\n> * Webサービスアーキテクチャ \n    * RESTfulアーキテクチャでは、メソッド情報はHTTPメソッドに含まれる。リソース指向アーキテクチャでは、スコープ情報はURIに含まれる。(p.14) \n    * XML-RPCでは、どんなサービスを実行しようとURIは常に一定であり、HTTPメソッドは常にPOSTである。RESTfulサービスがスコープ情報のさまざまな値に対して異なるURIを公開するのに対し、RPCスタイルのサービスは一般に、「ドキュメントプロセッサ」ごとにURIを公開する。(p.16) \n    *  REST-RPCハイブリッドアーキテクチャ(著者が考えた造語)の例として、次のFlickr WebサービスのURIを考える。http://www.flickr.com/services/rest?api_key=xxx&method=flickr.phots.search&tags=penguinではRESTfulリソース指向サービスと同様に、URIにスコープ情報(「penguinのタグの付いた画像」)が含まれる。だが、メソッド情報(「画像の検索」)もURIに含まれている。RESTfulサービスでは、メソッド情報はHTTPメソッド(GET)に含まれ、残りはスコープ情報になる。 \n* URI \n    * リソース指向のRESTfulサービスは、クライアントが操作できるデータごとにURIを公開する。REST-RPCハイブリッドは、データを取得するためのURI、データを削除するためのURIなど、クライアントが実行できる操作ごとにURIを公開する。RPCスタイルのサービスは、RPCを処理できるプロセスごとにURIを公開する。通常、そうしたURIは1つだけ(サービスのエンドポイント)である。(p.19) \n\n2章 Webサービスクライアントの作成 \n\n> * JSON \n    * JSONがそれほど単純なら、なぜすべてのことにJSONを使用しないのか。そうすることも可能だが、お勧めしない。JSONはデータ構造全般を表現するのに適しており、Webは主にドキュメントを提供するのに適している。ドキュメントは不規則で自己記述的なデータ構造であり、互いにリンクされている。XMLとHTMLは、ドキュメントを表現することに特化している。配列のXML表現が読みづらいのと同じように、WebページのJSON表現はかなり読みづらい。JSONが役立つのは、ドキュメントパラダイムにうまく適合しないデータ構造(単純なリストやハッシュなど)を定義しなければならない場合である。(p.48) \n\n4章 リソース指向アーキテクチャ(ROA) \n\n> * POST \n    * PUTとPOSTの違いは次のとおりである。クライアントは、新しいリソースのURIに送信することが決定できるばあにPUTを使用し、新しいリソースのURIをサーバーが決定する場合にPOSTを使用する。POSTを使用する例として、ブログの新しいエントリの作成がある。/weblogs/myweblog/entries/1になるか/weblogs/myweblog/entries/1000になるかはクライアントが知らないこともしくは知らなくても良いことである。(p.104) \n* 安全性(safety)とべき等性(idempotence) \n    * GETとHEADは(正しく使用すれば)安全であり、GET\, HEAD\, PUT\, DELETEはべき等である。POSTはそのどちらでもない。 \n    *  安全性 \nサーバの状態を変更するためのものではない。何回繰り返しても同じ結果が得られる。 \n    * べき等性 \n何回適用しても結果が同じもの(cf. 4x0x0x0と4x0)。逆にリソースの状態を相対的に変更する表現としてPUTを用いてはならない。PUTを使用して、4に設定しても良いが、値を1ずつインクリメントしてはならない。 \n    * 安全性とべき等性の重要性 \n信頼できないネットワークで、信頼できるHTTPでリクエストを送信できる。返送されなければ、もう一度リクエストを送信すればよい。 \n\n7章 サービスの実装 \n\n> * RESTfulの(Railsでの)実際 \nRailsでは通常.../bookmarks/<データベースID>となるがRESTfulでは.../bookmarks/xxx.xxx/と実装したい。しかし、Railsでの実装が難しいため、.../bookmarks/url/<URIのMD5>としている。その説明が「意味不明なデータベースIDよりも、このほうが確かにましである」とのこと。ホントかよ。 \n\n8章 RESTとROAのベストプラクティス \n\n > .../myblog/rebuild-indexのようなURIは、そのURIにリンクしても意味はない。このようにURIにメソッド情報を含める代わりに、既存のリソース(.../myweblog)でオーバーロードPOSTをサポートし、入力表現でメソッド情報(method=rebuild-index)を要求すればよい。このようにすれば、統一インターフェイスに完全に準拠しないものの、.../myweblogはリソースのように動作するし、GET\, PUT\, DELETEに応答し、オーバーロードPOST経由の「rebuild-index」にも応答する。オブジェクト指向の意味では、依然としてオブジェクトである。 \n経験則として、オーバーロードPOSTを使用していて、同じURIでGETとPOSTをサポートしないとしたら、おそらくリソースを提供しているのではなく、RPCスタイルのサービスを提供していることになる。(p.229) \n\n9章 サービスの基本要素 \n\n> POSTでべき等性を実現するためにPOE(POST Once Exactly)という仕組みがある(実装はまだ？)。仕組みは次のとおり。クライアントからのHEADに対しサーバは一回限り有効なURIを独自HtTPヘッダPOE-Linksに埋め込む。一度そのURIにPOSTアクセスが完了するとその後はサーバは405(Method Not Allowed/Operation Not Supported)で応答するようにする。(p.296)", ["web", "oreilly"]],
["Googleを支える技術", "http://www.amazon.co.jp/dp/4774134325/", "西田圭介著　技術評論社", "29", "Tue Apr 6 00:26:30 +0900 2008", "3", "ためになった。細かい箇所やある章(Google File System\, Bigtable\, MapReduce)についてはWebや論文などで見聞きしたのものもあるのだけど、まとまって全体を理解できるので良かった。ただし、内容は濃いとは言 えない。万人を意識した書き方になっているからか、冗長性が少し気になった。\n\n思ったことは、何も特別な事をしているわけではなく根底で用いられている技術は情報科学で基本的な技術ということ。分散、並列、キャッシュ、ローカリティ。それらを用いて芸術的なレベルまで機能と性能(スケール)を実現している点が、Googleのすごさだと思う。\n\n以下、自分用メモ\n\no index\n- クローリング時はドキュメント(doc)に対して単語(word)が得られる。\n- indexは単純な検索を考慮するとwordに対してdocを作る。(単純な検索エンジンのindexもこうなっている)\n- スケールを考えると、検索時の並列性を得るために、wordに対してdocのindexを作る方が良い。\n\no 信頼性\nソフトウェア(アーキテクチャ)で信頼性を上げる。ハードの信頼性には頼らない。UPSやRAIDは組まない。ハードを多数用意し、いくつかのハードが壊れても並列性を保ち動作するようなソフトウェア(アーキテクチャ)を作る。 ", ["イノベーション"]],
["Programming Collective Intelligence", "http://www.amazon.co.jp/dp/0596529325/", "2007 Oreilly & Associates Inc", "35", "Tue May 4 00:27:00 +0900 2008", "4", "プログラマのためのWeb2.0の教科書という感じ。学部レベルだけど、全く知らない自分にはちょうど良かった。\n\nのっけからTim O'Reillyの序文(Foreword)にやられる。\n\n> この本は、データ(含むユーザ情報)からその意味を抽出するテクニックを教えてくれる。これはWeb2.0のプログラマの道具箱になる。もはや、 データベースがバックエンドで動いているWebサイトをどうやって作るかを知っているだけでは不十分だ。ユーザが付加する情報は明示的に付加する場合とサ イトでの行動から得られる情報と2種類ある。もしあなたが成功したいのなら、このユーザが付加した情報をどうやって自分のものにするかを知る必要があるん だ。\n\nAmazonのリコメンデーションやgoogleのページランクアルゴリズムなどの基本中の基本について書かれている。また、説明といっしょにソースコードも書かれているので、自分でも作れそうな気になれる。自分に取って知りたい内容とそのレベルがちょうど良かった。\n\nまた、サンプルとしてYahoo!やFacebookなどのAPIを使った実世界で有用なものを簡単に作り出していて、読んでいて気持ちが良い。\n\n学生時代にこんな授業を受けれたらもっと勉強したに違いない。\n\n英語の本なのだけど、一ヶ月くらいかかった。日本語の本だったら一週間で読んだに違いない。自分の能力にガックシ。でも、最後の1/3は一日で読んだ。英語なのが気にならないくらい面白かった。\n\n(日本語版の本も出ています)\n\n自分用メモはgoogle docsに残した。", ["プログラマ", "web", "oreilly"]],
["Statistics Hacks", "http://www.amazon.co.jp/dp/4873113350", "Bruce Frey / オライリー・ジャパン", "statistics_hacks", "Tue Jan 24 00:27:00 +0900 2008", "2", "文章で興味を引こうとしているのだろうけど、内容が残念ながらイマイチ。あまり、目新しい内容が無かった。我ながら結構、確率と統計の授業をキチント受けていたのね、ということを認識。統計を勉強している人にはその意味が理解できて良いかも。後半は統計をゲームや世の中に応用して、という内容なのだけど、これもどこか(多分、経済や数学の雑学系の本)で読んだ話ばかりだった。 \n\n一つ今まで漠然と思っていたことをビタリと書いていた内容があった。以下、p.38から適当に引用。 \n\n> 毎日アスピリンを半錠飲むと心臓麻痺になる確率が下がるかを調べた学者がいた。22,071人を毎日アスピリンを服用するグループと、偽薬を服用するグループに分け長期に渡り観察した。アスピリンを服用していて心臓麻痺に見舞われた(0.94%)のは偽薬(1.71%)の半分程度であった。この発見は統計的に有意である。 \n\n> しかし、この話には裏があり、有意ではあるがd値が0.06(効果量は標準偏差の0.06倍)でとても小さい。すなわち関連があることはあるけど、非常に小さい。考え方として、もともと心臓麻痺を起こす可能性が非常に低いってことがある。アスピリンを飲むと可能性は下がるが、低かったものがさらにわずか低くなるってことだ。これは、宝くじを買うことで当たる可能性は飛躍的に高まるが、それは依然として非常に低いってことに似ている。 \n\nこれは、きちんと関連性を確認しましょうって話なのだけど、自分が感じた個所のはそこではなく、XXXがガンに効くとかって研究成果はほとんどこの類いなんだろうな、と思ったのでした。", ["統計", "oreilly"]],
["ピープルウエア 第2版", "http://www.amazon.co.jp/dp/4822281108/", "2001 日経BP社 トム・デマルコ\, ティモシー・リスター\, 松原 友夫\, 山浦 恒央", "38", "Tue Jun 20 00:28:00 +0900 2008", "3", "入社当初はワインバーグやデマルコの本には興味も示さず技術的な本を読んでいた(はず)。と いうことを、この本を読んでいる途中に思い出し今の自分の年を悲しく感じた。内容は共感することが多くためになった。というよりも、「今の環境が正しくて 自分が考えが間違っている」と思わなくて良いのだということが分かり安心した。\n\n以下、自分用メモ<!--more-->\n\n> 管理者の大部分は、人を交換可能な部品と扱う特有の失敗をしがちだ。 p.1\n\n> プロジェクトの失敗する原因は技術的な問題では決してない。その原因は社会学的なものである。pp.2〜4\n\n> 「どうして、新任の管理者は、技術的問題には十分時間をかけて考え、人間的側面には時間を割かないでよいと信じこむのだろう。」「仕事の人間的な側面より、技術面に注意を払う多くの理由は、重要だからではなく、単に解決しやすいからだ。」 p.4\, 5\n\n> 「間違いを許さない雰囲気が社内にあると、担当者は消極的になり、失敗しそうなことは絶対に手を出さなくなる。部下が誤った判断をするのが心配 で、開発手順をシステム化したり、厳格な作業規定を無理強いして、設計上の重大な決定をさせないと、部下はますます消極的になる。」\n「これと正反対のアプローチは、少々の間違いを大目に見ることだ。時々、どんな問題で行き詰まっているかを聞き、「特に問題なし」というのは決 して良い答えではないことを十分納得させることである。そして、担当者が自分で作り込んだ問題を抽出した場合でも、「よくやった」と誉める。これも、管理 者の給料のうちだ。」 p.7\, 8\n\n> 「管理とは尻をけとばすこと」とは、管理者があらゆる頭脳労働を行い、部下は決定されたことをただ実行する、という考えに等しい。\nたとえ、担当者を指示どおり働かせて、短期間の生産性が上がっても、長期的には対した効き目はない。担当者の自発的なヤル気が認められず、管理者がヤル気を補充するという考えほど、担当者の士気をくじくものはない。\nこの管理方法の最大の悲劇は、努力が常にむだになることだ。人は誰しも仕事に愛着を持っている。管理者は、むしろ働き過ぎないように、時折、気を配らなければならない。 p.8\n\n> 早くヤレとせかせれば、雑な仕事をするだけで、質の高い仕事はしない。 p.22\n\n> プログラミングで目標設定者がプログラマ自身の場合、管理者が設定したときよりも生産性は高いが、最も生産性が高かったのは目標を設定しなかった場合だ p.34\n(半期毎に目標を書かせるのはどうなのか。そんなの書かなくても一生懸命仕事してるよ。)\n\n> エントロピーは企業内では常に増加する。すなわち、時間が経つに連れ会社は特別なことを許さず、態度、外見、思考過程を画一化させようとする。 p.128\n\n> (自分の承認なしに顧客に資料を見せるなと言って忙しいからその資料を見もしない)「この上司は、自分の部下を信頼していなかった。顧客に提示で きないものまで部下が見せないか心配した。部下の失敗が自分の立場を悪くすることを恐れた。自分の判断だけが正しく、他人の判断は疑わしいのだ。\n管理者は、自分の判断が部下の判断よりも良いと思うに決まっている。経験も豊かで知識のレベルも高い。だから、管理者になれたのだ。プロジェク トのあらゆる時点で管理者の判断を指しはさまないと、プロジェクトはミスをする可能性がある。だからどうだというのだ？ 少しはミスをさせたらよい。だからといって部下の決定を修正するなとか、プロジェクトの方針を示す必要はない、といっているのではない。部下がどんな誤り も許されない、と思い込むと、部下を信頼していないことがはっきりと伝わってしまう。これほどチームの結束を阻害するものはない。\n管理者の大部分は、部下を「信頼してよい」時と「そうでない」時をよく心得ていると思い込んでいる。しかし、我々の経験からすると、部下を信頼しない側に 大きく偏っている管理者が非常に多い。部下が誤りなく運営できる領域にかぎって、完全に自主的に仕事をさせても良いとの前提に建っている。これでは、自主 性を与えていないに等しい。」 p.174\n\n> 標語が書かれたポスターやマウスパットや社員証の裏に貼るシールは「実質よりも形式に固執したものである。これらは品質、リーダーシップ、創造 性、チームワーク、忠誠、およびその他の多くの組織的な美徳を褒めちぎっているようにみえる。だが、こんな単純な言葉で誉めることで、次のような全く違っ たメッセージを送っているのだ。つまり、「この会社の経営層は、こうした美徳が、一生懸命働くことや管理の手腕によるよりも、こんなポスターで改善できる と信じているんだ」みんなはたちどころに、こんなポスターの存在が、一生懸命働くことや管理的才能に関心がないことのたしかな兆候と理解する。」 p.229\nマジメにこの手の物を作っている人には申し訳ないのだけど、(本当かどうかは別として)作っている人以外こう思っていると思う。\n\n> 普通の人は、「従来の状況」→ よいやり方 →「新たな状況」になると考えているが、そんな単純ではない。実際は、「古い状況」 → 他からの要素 → 「混乱」 → アイデアの変形 → 「実践と統合」→ 「新しい状況」となり、その間に必ず混乱が入る。混乱の時にうまく行っていないと勘違いして元に戻してはいけない。混乱が大きければ大きいほど得られる価 値は大きい。 p.256 ", ["チーム"]],
["ジョエル・オン・ソフトウェア", "http://www.amazon.co.jp/dp/4274066304", "Joel Spolsky/オーム社", "joel_on_software", "Tue Jan 17 17:45:58 +0900 2008", "4", "Microsoftを見直した。何か、Microsoftだからという理由だけで毛嫌いしている人を見るとイヤな感じだったのよね。だから、良いことは良いことと評価することは必要だと思う。といっても、この本はMicrosoftの話はごく一部の内容であって、この分野に関わる全ての人(技術者、プロジェクトリーダ、管理者、経営者)に為になると思う。Microsoftの技術者だった人が書いた本を読んでそう思った。 Webで公開されているので全文(原文:英語)が読める(その内のいくつかは日本語に訳されている)。 \n\n本の著者について \n\nJoelを知らないのであれば、次の文章を読むと良いと思う。これは、ゲイツに好感を持てる文章でもある。 \n\n* はじめてのBillGレビューのこと \n日本語: http://local.joelonsoftware.com/mediawiki/index.php/%E3%81%AF%E3%81%98%E3%82%81%E3%81%A6%E3%81%AEBillG%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%81%AE%E3%81%93%E3%81%A8 \n\nちなみに優秀な技術者(プログラマ)とは何かを書いている次の文章は、自分の思いとも重なるところが多くあり、導入も抜群におもしろく、好きな文章の一つ。 \n\n* 採用面接ゲリラガイド(version 3.0) \n日本語: http://local.joelonsoftware.com/mediawiki/index.php/%E6%8E%A1%E7%94%A8%E9%9D%A2%E6%8E%A5%E3%82%B2%E3%83%AA%E3%83%A9%E3%82%AC%E3%82%A4%E3%83%89%28version_3.0%29 \n\nMicrosoftについて\n\nこの本でMicrosoftに対して漠然と思っていたことが少しクリアになった気がする。Microsoftはしなければならないこと(セキュリティアップデートとか)をきちんとするのだ。後方互換性を保つためアプリケーションのバグをOS側で回避するという姿勢を読んでその徹底ぶりに驚いた(下の「ストラテジーレターII: 鶏と卵の問題」を参照)。 \n途中経過や愚かと言われている戦略はあるにせよ、人が必要だと思うことは(もちろん最終的には自社の利益につながるから)やる。MS Officeはあんな多くの機能を持ちながら、うまく機能し続けている。技術的にも比較的風通しが良い(下の「2つの話」参照)し、経営的にも間違った選択はしていない(「リック・チャップマンによる愚かさの探求(あるいは「アホでマヌケな米国ハイテク企業」」)。 \n\nちなみに、ここまで書いておいて何だけど、自分は仕事でMS-Officeを使う以外はLinuxで生活しているのでMSの不具合を実感する立場にいない、というのがこんな文章を書ける背景にある。「Windowsが嫌い(使いづらい)なら使わなければ良い」というのを実践している。それで誰も困らない。 \n\nあと、本当に「Microsoftを素晴らしい」とは思っていなくて、「素晴らしいところもある程度」しか思っていないというのはナイショです。 \n\n本の感想 \n\nこの本はMicrosoftの話はごく一部の内容であって、この分野に関わる全ての人(技術者、プロジェクトリーダ、管理者、経営者)に為になると思う。以下、フムリと思ったこと。 \n\n* ジョエルテスト p.23 \nこういう職場で働きたいと素直に思える。 \n\n1. バージョン管理システムを使っているか？ \n2. 1オペレーションでビルドを行えるか？ \n3. 毎日ビルドを行っているか？ \n4. バグトラッキングシステムを持っているか？ \n5. 新しいコードを書くまえにバグを修正しているか？ \n6. 更新可能なスケジュール表を持っているか？ \n7. 仕様書を持っているか？ \n8. プログラマは静かな労働環境にあるか？ \n9. 買える範囲で一番良い開発ツールを使っているか？ \n10. テスト担当者はいるか？ \n11. プログラマを採用するときにコードを書かせるか？ \n12. 「廊下でユーザビリティテスト」を行っているか？ \n\n日本語: http://local.joelonsoftware.com/mediawiki/index.php/%E3%82%B8%E3%83%A7%E3%82%A8%E3%83%AB%E3%83%BB%E3%83%86%E3%82%B9%E3%83%88 \n\n* やさしい機能仕様パート3: だけど...どうやって書くの？ p.73 \n\n誰が仕様書を書くかという話。プログラムマネージャという専門職が仕様を書きその下の5人のプログラマが実装する。また、マーケティング、ドキュメンテーション、テスト、国際化、その他プログラマが時間を費やすべきでないあらゆる煩わしい詳細に関して調整を行う必要がある。これによりプログラマはプログラミングに専念できる。また、コーダをプログラムマネージャの部下にしてはならない。正しくないと思ったらやらないことが許される(正しいことを納得してもらう必要がある)環境が必要であり、それによりより良いものが出来る。 \n\n日本語: http://local.joelonsoftware.com/mediawiki/index.php/%E3%82%84%E3%81%95%E3%81%97%E3%81%84%E6%A9%9F%E8%83%BD%E4%BB%95%E6%A7%98_%E3%83%91%E3%83%BC%E3%83%883:_%E3%81%A0%E3%81%91%E3%81%A9%EF%BD%A5%EF%BD%A5%EF%BD%A5%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E6%9B%B8%E3%81%8F%E3%81%AE%3F \n\n* 褒賞金有害論 p.187 \n\nMicrosoftで製品を出荷すると、そのご褒美にアクリル版がもらえる仕組みがあった。技術者達はそれを「アクリル版がもらえるために仕事をやっている」と受け取られるのを嫌いブーイングでそれに応えた。 \n要は(単なる意訳もしくは感想だけど)何のために仕事をしているのか。したくて仕事をやっているのであり、評価をもらいたくてやっているわけではないと言うこと。褒賞金は職場で機能しない。多くの人は自分が非常に良い仕事をしていると思っている(実際はそうで無い場合も)ので、例え(とても難しいけど)正しく評価されたとしても、自分の評価にがっかりしてモチベーションを落とすため、結局うまく機能しない。 \n\n英語: http://www.joelonsoftware.com/articles/fog0000000070.html \n\n* リック・チャップマンによる愚かさの探求(あるいは「アホでマヌケな米国ハイテク企業」) p.237 \n\nステレオタイプのプログラマは「Microsoftは出来の悪い製品を作っているけど、抜群のマーケティングのおかげでうれているだけだよ」と言うけど本当か。1984年のソフトウェアトップ10はと2001年ではMicrosoftしか残っていない。また売り上げは2位とけた違いである。Microsoftはいかにして独占を手にしたか。その答えは、唯一、愚かで致命的な間違いを犯さなかった会社ということ。Microsoftが犯した最大の誤りは、Officeでイルカが出てくることだ。Netscapeはソースコードを全て書き換えユーザを維持することが出来ないという誤りを犯し、他の会社も同様の過ちを犯している。 \n\n英語: http://www.joelonsoftware.com/articles/Stupidity.html \n\n* 下っ端でも何かを成し遂げる方法 p.249 \n\n    * 戦略 1: 実行あるのみ \n必要があることを自分でやる。 \n    * 戦略 2: じわじわと広めていく \n非協力者は気にせずに仲間を増やしていく。いつかはその価値に気づき協力してくれるかもしれない。 \n    * 戦略 3: 優れた人間を作り出す \nできるようになりたいと思っていて、なおかつその能力がある人々を見つけ、彼らを味方につける。 \n    * 戦略 4: 間抜けを無力化する \nまぬけを助けないで放って置けば、自然に自分のミスにより自分の仕事が回らなくなるため、ダメージを受けることは無くなる。 \n    * 戦略 5: 邪魔を避ける \n仕事に集中できる環境を上手く作る。職場に早く来る。人のいないところで仕事をする。メーラやWebブラウザを立ち上げっぱなしにしない。 \n    * 戦略 6: かけがえのないものになる \n本当に優れた貢献者となる。期待される仕事を先ずする。その後、人に役立つ仕事をする。自分の仕事もやっていないのにプロセスに不満を言うのは不興を買うだけ(回りに多い気がするけど)。 \n\n日本語: http://local.joelonsoftware.com/mediawiki/index.php/%E4%B8%8B%E3%81%A3%E7%AB%AF%E3%81%A7%E3%82%82%E4%BD%95%E3%81%8B%E3%82%92%E6%88%90%E3%81%97%E9%81%82%E3%81%92%E3%82%8B%E6%96%B9%E6%B3%95 \n\n* 2つの話 p.258 \n\nMicrosoftでは正しいことをしているのであれば、入社6ヶ月未満の人の言うことを尊重し、相手が会社のNo.6であろうとそれを邪魔することは出来ない。 \n「こんなことがグレイ・フランネル・スーツを着ているような会社で起こると想像できるかい？」グレイ・フランネル・スーツ=自分の会社と置き換えて読もう。 \n\n日本語: http://local.joelonsoftware.com/mediawiki/index.php/%E4%BA%8C%E3%81%A4%E3%81%AE%E8%A9%B1 \n\n* ストラテジーレターII: 鶏と卵の問題 \n\nWindows 3.xからWindows 95へバージョンアップする時の話。SimCity for Windows 3.xではメモリ関連のバグがあった。それをWindows 95のテスト時にMicrosoftはそのバグを追いかけて、SimCityを検出するコードを追加した。そして、バグが発生しないように特別なメモリ管理下でSimCityを実行させるようにした。この脅迫的なまでの後方互換性が、人々にWindows 95にアップグレードしたいと思わせた。 \n\n日本語: http://local.joelonsoftware.com/mediawiki/index.php/%E3%82%B9%E3%83%88%E3%83%A9%E3%83%86%E3%82%B8%E3%83%BC%E3%83%AC%E3%82%BF%E3%83%BC%E2%85%A1:_%E9%B6%8F%E3%81%A8%E5%8D%B5%E3%81%AE%E5%95%8F%E9%A1%8C \n\n* ストラテジーレターIII: もとに戻してくれ! p.300 \n\nロックインする前にロックアウトさせる要因をなくせ。すなわち、顧客を囲いこむことを画策する前に、参入障壁をなくすことが重要。囲いこむべき顧客はまだ顧客にもなっていないのだから。 \n\n日本語: http://local.joelonsoftware.com/mediawiki/index.php/%E3%82%B9%E3%83%88%E3%83%A9%E3%83%86%E3%82%B8%E3%83%BC%E3%83%AC%E3%82%BF%E3%83%BC%E2%85%A2:_%E3%82%82%E3%81%A8%E3%81%AB%E6%88%BB%E3%81%97%E3%81%A6%E3%81%8F%E3%82%8C%21 ", ["プログラマ"]],
["イノベーションの神話", "http://www.amazon.co.jp/dp/4873113458/", "Scott Berkun / オライリー・ジャパン", "36", "Tue Dec 23 00:30:00 +0900 2007", "4", "正直に言えばこの手の本はあまり興味をそそられない。要は良いものをただ作るだけなのだと 思っているので、本を読むことで何か良いものが作れると思い込むというのが嫌だから。この本はまさにそれが正しいと言うことを書いてある。また、丁寧にそれがなぜかを教えてくれるので、ためになる。\n\n内容とは関係ないのだけど、この本は次のような理由で読みやすい良い本だと思う(こういう所に筆者のカシコサが表れていると感じる)。図や写真が適切で理解を助けている。簡潔な文章で読みやすい。多くの例文により、言いたいことが適切に伝わってくる。\n\nこの本はビデオのベータを購入した人、すなわち、良いものは必ず売れると信じている人が読んだ方が良いかも。\n\n以下、自分用メモ<!--more-->\n\n1章 ひらめきの神話\n\n> ひらめきの瞬間を次のようにジグソーパズルに例えている。「最後のピースがあるべき場所に収まる際にひらめきが訪れます。しかし、最後のピースは 他のピースと比べて何ら特殊なものではなく、他のピースがすべてはめ込まれていなければただの平凡なピースでしかありません。」p.10\n\n2章 神話:私たちはイノベーションの歴史を理解している\n\n> 成功したストーリーが際立つのは失敗したストーリーはおもしろくなく意図的に隠されているため\n\n3章 神話:イノベーションを生み出す方法が存在する\n\n> (発明の)「自らのきっかけを今ここで生み出すのではなく、他人のきっかけを借り、それを自らの生活に組み入れることで、他人の魔法を再利用しよ うとしてしまうことです。」p.43 (発明者の発明方法をまねればイノベーションが生み出せると思い込んでしまうことの文章)\n\n4章 神話:人は新しいアイデア\n\n> 「私たちは誰かが検証した後のアイデアを好むのです。」p.61\n\n> 「イノベーターが耳にする否定的なセリフ\n\n> * そんなことなどうまくいくはずがない。\n* 誰もそんなのは欲しがらない。\n* 実際に役に立つはずがない。\n* 人々は理解しないであろう。\n* そんなことは問題ではない。\n* それは問題だが、誰も気にしていない。\n* それは問題で、人々も気にしているかもしれないが、すでに解決されている。\n* それは問題で、人々も気にしているかもしれないが、ビジネスにはならない。\n* それは問題を探すための解決策だ。\n* 私のオフィス/洞窟から今すぐ出ていけ。」\n(素晴らしい発明をしても必ずこのようなことを言われるので)「私たちはまったくもって間違えている」 p.64\n\n> 上の批判の原因「\n\n> * 自尊心/妬み:私が思いつかなかったことだから受け入れることはできない。\n* 誇りと政治:これでは私の立場が悪くなる。\n* 恐れ:私は変化が怖い。\n* 優先順位:私の手元には10個の革新的な提案があるものの、リソースは1個分しかない。\n* 怠惰:私は不精な人間であり、これ以上の作業をやりたくも考えたくもない。\n* 安全性:私は失いたくないものを失う可能性を避けたい。\n* 欲:このアイデアを却下したらお金を儲けることができたり、帝国を築き上げることができる。\n* 一貫性:これは私の重要な行動原則(どれだけ不合理で、古臭く、愚かなものであったとしても)に反する。\n」p.67\n\n> 上の怠惰に関する脚注\n「ほとんどの人々は考えることよりも死んでいくことを選ぶだろう。実際彼らはそうしている。 --バーランド・ラッセル」 p.67\n\n> 「革新的なアイデアは、それがもたらすメリットのせいで却下されることなど滅多になく、人々がそれをどう感じるかということによって却下されます。」 p.68\n\n> イノベーションが普及するには次の5つの要素が重要だが、イノベーターはこれらを重要視しない。\n\n> 1. どれだけ便利になるか\n2. 導入コスト(互換性)\n3. 簡単か(学習量)\n4. 簡単に試せるか\n5. 目に見えて結果が分かるか\np.73\n\n5章 神話:たった一人の発案者\n\n> 「「発明者」という言葉が、何かに関するアイデアを最初に思いついた人物を指すのか、実際に動作するものを最初に作り出した人物を指すのか、その 発明を最初に商業的な成功へと導いた人物を指すのかという疑問は解決されていない。新しいテクノロジーを実用に供するものとするためには、こういった三つ のステップすべてを実現しなければならないのは明らかである」 p.85\n\n> 「エゴではなく情熱を糧とする聡明なイノベーターは、他者と協調関係を結び、協同作業を行い、過去から真摯に学ぶことで、時間を超越したイノベーションの難関に立ち向かっていくのです。」 p.91\n\n6章 神話:優れたアイデアは見つけづらい\n\n> 「創造的に、かつ完璧に、今すぐこの場で」というアイデアはあり得ない。「アイデアというものは、口に出されたそばから否定されることがなければ、必ず見つけやすくなるはず」(pp.96-97\, cf.4章の否定的なセリフ)\n\n> 最初のコンピュータ用マウスの写真 「うわっ！、コードの付いた木材だ！ これが未来かっ！」\n(左上の写真 http://images.google.co.jp/images?q=%22the+myths+of+innovation%22+mouse ) 初めて聞くアイデアが奇妙な感覚にとらわれる例(p.98)\n\n> 「アイデアを殺すセリフ\nこういったセリフは有益な批評や示唆を与えることを面倒くさがっている人々が用いるもの\n\n> * そんなことはもうすでに試してみた。\n* そんなことはやったことがない。\n* ここではそんな風にしない。\n* そんなことはるまくいくはずがない。\n* そんな予算はない。\n* それは興味深い問題ではない。\n* そんな時間はない。\n* そんなことは上役が承認しない。\n* それは関係のない話だ。\n* 誰もそんなことを喜ばない。\n* そんなものは採算が取れない。\n* お前はなんて馬鹿なんだ？\n* お前は口ばっかりだから黙ってろ。」 p.101\n\n> 「ブレインストーミングのルール\n\n> 1. 出来る限り多くのアイデアを生み出すこと。\n2. できるだけ自由奔放なアイデアを生み出すこと。\n3. それぞれのアイデアを出発点にすること。\n4. 判定を下さないようにすること。」 p.105\n\n7章 神話:上司はイノベーションについてあなたより詳しい\n\n> 天才のホーキング博士が自分の会社で仕事をすることになったら彼に日報を書かせるか。「才能というものは、取り巻く環境があってはじめて発揮できる」 p.110\n\n8章 神話:最も優れたアイデアが勝ち残る\n\n> 採用の容易さと(専門家の観点からみた)優秀さのトレードオフで決まる。\ne.g. メートル法(ヤード・ポンド法に勝てない)\, HTML\, QWERTY配列キーボード pp. 135-143\n\n9章 神話:解決策こそが重要である\n\n> 問題を発見することが重要。ニュートンが研究した錬金術は選んだ問題自体が間違い。\n「アインシュタインも「問題を20日で解決しなければならないとしたら、私は19日かけてその問題を定義する」と述べてます」 p.147\n\n> 誰もガリレオに太陽系の説明を頼んだわけではないし、エンゲルバードにマウスを発明するよう頼んだわけでもない。彼は、好奇心の赴くままに自らの 論理に従い、他者が尋ねようともしない疑問を尋ね、答えが見つからなければ、自らで答えを見つけにかかったというだけなのだ。 p.148\n\n> 「目標を簡潔にすることで、解決すべき問題を浮彫りにすることができる」 p.152\n\n> 「チャンスに遭遇した時に何を行うのかが重要なのであって、チャンスとの遭遇自体が重要なわけではない」 p.156 e.g. ポケットの中のチョコが溶けていたことから、レーダー機器の電波漏れに気づき、電子レンジを発明\n\n> 10章 神話:イノベーションは常に良いものをもたらす\n\n> e.g. 飛行機の発明による空爆\n\n> 「レーザーは生まれて5年くらいの間、「問題を探すための解決策」と呼ばれていた」 p.167 発明者は発明した時にその利用方法など分からないという例\n\n> 「私たちは、創造に向けて一心に集中してしまうため、既存の良いものを忘れてしまったり、自らのイノベーションにおいてそれを無視してしまったりするのです。」 p.170\nお母さんの包容、暑い日のアイスクリームなど時代を超越した価値のものが存在する。\n\n> 「アイデアが新しいという理由だけですべてのアイデアを受け入れようとするのは愚かなことです。それと同様に、伝統であるという理由だけですべての伝統を受け入れようとするのも愚かなことなのです。」p.171", ["イノベーション", "oreilly", "Berkun"]],
["On Lisp", "http://www.amazon.co.jp/dp/4274066371", "ポール グレアム/オーム社", "on_lisp", "Tue Dec 16 17:42:29 +0900 2012", "4", "Lisp好きだけど「Lispのどこが良いの?」と聞かれてもうまく説明が出来ないことが多い。最後の最後に書かれている(p.356)けど、その答えはLispはLispだからであり、いくつもの優れたアイデアがまとまってLispになっているのだから仕方が無い。ちなみにオイラは「プログラミングが創造的な気分でできるため楽しい」と答えるようにしている。\n\nこの本は、Lispのどこが優れているのかというのを具体的に示している。\n\n具体的とは、マクロなどを用いてLispの上に文法コンパイラ、Prolog、CLOSなど様々な機能を実現している点。数ページのプログラムで強力な機能が次々と実現されていく様は見ていて小気味良い。\n\nまた、Lispは抽象化に優れているということがコードレベルで理解できる。同じパターンが出てきたらとにかく抽象化出来る。関数もfirst class(引数や返り値に値として使える)だし、マクロを書いてプログラムの生成も出来る。関数の合成も簡単。&\n\nLisperは抽象化が好きなのだと思う。例えばPrologをLispの上で書かれているが、それは、Prolog/Lispマクロ/Lisp/Lispコンパイラ/Lisp実行系/ネィティブ(機械語)と幾つもの層が重なり、実際どの層でどのように実行されるか混乱することもあるのだけど、それが楽しみでもあったりする。この辺が上の「創造的で楽しい」という点なのです。\n\n概念的(理論的)には、上のような抽象的な層はあればあるほど良いし、現実的(実装的)にはその層は薄ければ薄いほど良い(コンパイラはその差を薄くする道具)。\n\nSICPのアンサーブックとは言い過ぎだけど、無駄無く必要な説明が書かれており、少しずつ高度なことが理解できる点で優れている。教育的なSICPに比べて、実践的なLispの使い方が書いてある。例えば、Schemeで比較的大きなプログラミングをした時に確かにマクロは必須だった。そこそこのプログラミングする際に必要であったり有用なことが書いてある。学生の時に読みたかった本。\n\nSchemerな自分には#'やfuncallの意味(必要性)が全く分からなかった。LispとSchemeの違いがまとめて書いてある(p.266)ので最初にそこを読むと良い。\n\n驚いたのはLispがレキシカルスコープを持っていて、末尾再帰の最適化が出来ること。時代は代わるのね(いつの話なんだか知らないけど)。\n\n前書きの1ページ目から「X Windows」という言葉にヘコッとなったのはナイショです。", ["プログラマ", "lisp"]],
["ハッカーと画家", "http://www.amazon.co.jp/dp/4274065979", "Paul Graham/オーム社", "hacker_and_painter", "Tue Dec 9 16:41:47 +0900 2007", "4", "何人かに勧められたけど忙しくて読めずに忘れていた本。 \n\nhttp://www.aoky.net/ や http://practical-scheme.net/index-j.html の文章は良く読んでいたけどこの度まとめて読む(本と同じ内容がほとんど上のURLで読める)。ちなみに原文は http://www.paulgraham.com/articles.html 。 \n\nとても共感するところが多く読むのが楽しくて仕方がなかった。自分の大切にする部分(e.g. Lisp)と重なるところが多いからか。下は共感の例。 \n\n他人のプログラムを読むことでプログラムが学べるというコンテキストで(p.31)、ライオン本(Lions' Commentary on UNIX)が紹介されていた。自分が読んだときにはこの本はC言語をどうやって書くべきかをソースコードで表していると感じた。美しい以上の感動を覚えた。C言語がANSI化でメチャクチャにされたとなげく人の気持ちが初めて分かった。 \n\n以下、自分用メモ<!--more-->\n\n第0章 メイド・イン・USA \n\n> p. 3 「米国で家といったら2種類しかない。ツーバイフォーの柱に石膏ボードを打ち付けたぺらぺらの箱か、あるいは超豪邸、つまり大きくてドラマチックな外観を備え、高価な家具を配置したツーバイフォーと石膏ボードのぺらぺらの箱だ。」 \n\n第1章 どうしてオタクはもてないか \n\n 勝手なまとめ: 人気競争に勝ち抜いたものだけがモテる。それにはその競争に没頭し続けることを要求されるが、オタクはそこまでそれに興味を見い出せない。 \n\n第2章 ハッカーと画家 \n\n 共通点がたくさんある。プログラムをしながらプログラムを覚える(絵を欠きながら絵を覚える)。大学で学ぶものではない。ラフなスケッチから始める。最初から設計しない。 \n\nSCIP(計算機プログラムの構造と解釈)からの引用 \n\n> プログラムは、人々がそれを読むために書かれるべきである。たまたま、それが計算機で実行できるにすぎない。」 \n\n第3章 口に出来ないこと \n\n第3章を読んで思ったこと。「外国人」が良くて「外人」がダメなのは何故か。ダメなのは「ガイジン」と呼んで蔑む行為であり同じように「ガイコクジン」と呼んで蔑む行為は良くない。言葉使いが問題ではないのに、表面的なことだけが問題視される日本。 \n\n> 「組織の健全さはネガティブな考えながどのくらい許容されるかで測られるとも言える」(p.49) \n\n> 頭の中の考えることと口に出すことを明確に分ける。頭の中は何でも許される。(p.50) \n\n第4章 天邪鬼の価値 \n\n> 「自分の言いたいことが言え、やりたいことがやれる社会では、影響力のある人々に指示される解ではなく、最も効率の良い解が勝つ。」(p.59) \n\nやっている施策で問題があった時にベストな解は何か。正しくするように改善することか、偉い人の一声でやめてしまうことか。そしてそれを言えないのは何故か。健全か。 \n\n第6章 富の作り方 \n\n> 「人々はビジネスというのはお金を儲けることだと思い始めた。だが、お金は欲しいものを手に入れるための単なる中間段階、省略記法にすぎない。ほとんどのビジネスがやっていることは富を産み出すことだ。人が欲しがることをやるんだ。」(p.97) \n\n> 2つの選択肢がある場合、難しい方を選べ。ジョギングとテレビを見るか迷ったらジョギングに行け。たぶん、もう一方の選択肢を持ち出したのは自分の怠惰さから来ている。(p.107\, 参入障壁のコンテキストで) \n\n第9章 ものつくりのセンス \n\n> 「醜いものを許せないだけでは十分ではない。どこを直せば良いのかを知る嗅覚を得るためには、その分野を十分に理解していなければならない」(p.150\, 美しいもの作るためのコンテキストで) \n\n第13章 オタク野郎の復讐 \n\n> 「髪のとんがった上司は2つの性質を持っている。どちらの性質もごく普通に見られるけど、両方とも兼ね備えるとなると奇跡的だ。その性質とは、(a)技術に関して何も知らない。そして(b)技術に関して非常に強い意見を持っている。」(p.185) \n\n第14章 夢の言語 \n\n> 「人気が出るためには、プログラム言語は人気のあるシステムのスクリプト言語でなければならない。FortranとCobolは初期のIBMメインフレームのスクリプト言語だった。CはUnixのスクリプト言語だったし、後にPerlとPythonがそうなった。TclはTkの、Visual BasicはWindowsの、Lisp(の一種)はEmacsの、PHPはWebサーバの、そしてJavaとJavaScriptはWebブラウザのスクリプト言語だ。」(p.205) \n\n第15章 デザインとリサーチ \n\n> デザインとリサーチの「一番分かりやすい違いは、デザインはユーザに注意を向けているということ。これは誰のためで、どんな必要を満たすモノか、と問うところからデザインは始まる。」(p.219) \n\n> 「「欲しているもの」ではなく、「必要としているもの」と言ったことにに注意してほしい。デザイナーの仕事は、お客の言う通りなんでもすぐ作って見せる料理人みたいなものじゃない。」(p.220) 企業の研究開発もまさにこれが当てはまると感じた次第。良い技術とは使える技術のことなのだろうと思った。 \n\n> 「油絵が、15世紀に広まった時に熱狂的に受け入れられたのは、プロトタイプからそのまま最終的な作品を作ることが出来たからだった。」(p.223) \n\n第16章 素晴らしきハッカー \n\n> 「今の仕事で脳味噌が腐っているんじゃないかと心配しているとしたら、たぶん腐っているよ。」 (p.237) \n\nこんなのもあった。 \nnaoya_t:ポール・グレアムのエッセイと和訳一覧 \nhttp://practical-scheme.net/wiliki/wiliki.cgi?naoya_t%3a%e3%83%9d%e3%83%bc%e3%83%ab%e3%83%bb%e3%82%b0%e3%83%ac%e3%82%a2%e3%83%a0%e3%81%ae%e3%82%a8%e3%83%83%e3%82%bb%e3%82%a4%e3%81%a8%e5%92%8c%e8%a8%b3%e4%b8%80%e8%a6%a7 ", ["プログラマ"]],
["データベースパフォーマンスアップの教科書 基本原理編", "http://www.amazon.co.jp/dp/4798111694", "エンコアコンサルティング/翔泳社", "database_performance", "Tue Nov 18 16:38:53 +0900 2007", "3", "この本を読むといかに自分がデータベースのことを理解していなかったかが分かる(知りたくもなかったのだけど)。インデクスなどを使ってどうジョインされるかが書いてある。インデクスを使いどのように検索されるかを想像しながらSQLが書ける気になれる。とにかく長い。個人的に興味がないこともあり他の本にも浮気しながら読むのに1ヶ月くらいかかった。6章のジョインの説明だけでも良い気がしたけど、そこまで読んでいたから理解できたのか。\n\nそれにしてもデータベースのプロ(とういかSQLを書く必要があるアプリケーション屋さん)がここら辺のことを理解しているのだろうか。DBMSをブラックボックスにしてしまっていて遅いのを全て性能のせいにしているのではないか。「じゃあ他のDBMSにしましょう」とか「じゃあ、ハードを買いましょう」とかになっていないのか疑問。というのは、この手の本が少なすぎる。本屋に行ってもキチント説明している本が他に見つからなかった。コッドを始めとした教科書的なものでさえも詳細には書いていない。DBMSの実装依存と言ってしまえばそれまでなのだけど、それにしてもどのような技術でジョインされるかくらい知るべきだと思うのだけど。みんなどうやって知識を得ているのか不思議に思った。ネットワーク、OS、プログラム言語など他の分野はキチント書いてある本が多いのに。自分の本の探し方が悪いだけと期待したい。\n\n残念ながらこの本の書き方は自分には合わない。日常の例を使いながら直感的に説明しようとしているのだけどその例に違和感があり分かりづらかったりする。逆に丁寧に説明して欲しい個所が関連知識を前提にさらりと書いてあり、それを知らない(それを含めて知りたい)自分は分からずがっかりさせられる。章の構成ももう少し読みやすく出来ると思う。\n\nとは言えこの手の本は他に無いということと、良いことを書いていることには違いないという意味で、良い本だと思う。", ["DB"]],
["データベース実践講義", "http://www.amazon.co.jp/dp/4873112753", "Chris J. Date/オライリージャパン", "database_theory_in_practice", "Tue Oct 9 16:36:57 +0900 2007", "3", "SQLはキライだった。覚える価値も無いと思っていた。それがそう思っても悪くないんだと勇気づけられた。\n\nデータベースは理論的にリレーショナルモデルの上に構成されているが、SQLはリレーショナルモデルとは似て非なるものだ(従って理論的でない)と永遠と述べている。\n\nリレーショナルモデルに基づいて作られたTutorial Dを説明しているのだが、美しく見えて仕方がなかった(近くにSQLが書かれていたからか)。\n\nTutorial Dの後にSQLを学んでいれば、自分もここまで SQL嫌いにならずに済んだのにと思った次第。\n\n星の数が少ないのは正規化の所をちゃんと(簡単に理解できなかったので)読まず大意しか掴めなかったから。", ["DB"]],
["行動ファイナンス", "http://www.amazon.co.jp/dp/4478210381", "ヨアヒム・ゴールドベルグ\, リュディガー・フォン・ニーチュ/ダイヤモンド社", "behavioral_finance", "Tue Aug 10 16:34:11 +0900 2007", "4", "人間は愚かだという前提に基づいて作られた理論に興味深々。人間の一人一人のミクロの行動から経済全体のマクロの動きが説明されることを期待していたのだけど、残念ながらそこまでは発展していないようでした。\n\nこのような考えは政治(特に選挙)にも応用出来ると思うのだけど、そのような学問があるのか調べてみようと思った。\n\n次の条件に当てはまる人は読んだ方が良いかも。\n\n* この本の背表紙を10秒間見て何も感じなかった人\n* 次の2つの質問の答えが異なる人\n\ni.まず、あなたに1\,000円あげます。その後次の質問をします。どちらを取りますか。\n\n1. 無条件で500円もらえる。\n2. b. 50%の確率で更に1\,000円もらえ、50%の確率で何ももらえないギャンブルをする。\n\nii. まず、あなたに2\,000円あげます。その後次の質問をします。どちらを取りますか。\n\n1. 無条件で500円取られる。\n2. 50%の確率で1\,000円取られ、50%の確率で何も取られない。\n\n以下、自分用メモ<!--more-->\n\n* コウノトリがたくさんいる国で子供が多く生まれるとしても、コウノトリが高い出生率の理由である必然性はない。\n* コミットメント(関与)が評価や意思決定に何の影響も持たない時だけ、ある行為は経済的に合理的になる(コミットメントが強いと非合理になる)。遠い親戚の資産を運用する時などはこれに当たりそうな気がした。\n* 人間は(例えそれが手が出せない事項でもその)状況をコントロールしたいと欲求を持つ。成功した人はコントロール(物事の原因)が自分にあり、敗者は外部にコントロールされている感覚、つまり自分自身では周囲の環境を変えられないと信じる傾向にある。\n* 投資をする人は本能タイプ/感情タイプ/理性タイプに分類される。理性タイプは、価格変動をコントロールすることを好むのだけど、自分ではそれをコントロール出来ないことも分かっている御で、情報を収集しそれらを予測する。自分は理性タイプと感じた。欠点は、予想が外れてコントロールできないことをひどく恐れるタイプらしいのだけど、自分はそうでも無い気もする。金にあまり執着心がない心の余裕のせいか。", ["経済"]],
["JavaScript", "http://www.amazon.co.jp/dp/4873115736", "David Flanagan / オライリージャパン", "javascript", "Tue May 1 16:34:11 +0900 2007", "3", "jaxが流行っているので、その前にJavaScriptのお勉強と思い読んでみた。結構大きな本屋(e.g. AOZOの丸善)でもJavaScrpit言語自体をしっかりと解説した本が売っていない。この本が置いていないのは古いからか。パッと調べた感じキチント書いてあるのは唯一この本くらいではないか。amazonで購入。ここら辺を押さえないでちゃんとしたプログラムが出来るとは思えないのだけど。スクリプト言語でちゃんとしたプログラムは必要ないということか。 \n\nオブジェクトベースの継承などから Obliqに近い気がしたが、Obliqほどきれいではなく、Perlの汚なさ(便利さ)が入っている感じ。それでも予想以上にしっかりした言語という印象。 \n\n関数とクロージャの説明が良く分からなかった。なんとなくSchemeと同じような気もするけど違う所もある気がしたため(ちなみにSchemeだと関数(λ式)を評価(eval)するとλ式と評価時の環境の組であるクロージャが返されて、クロージャを関数適用(apply)するとクロージャ中の環境を使ってλ式が評価される)。 \n\n以下、自分用メモ<!--more--> \n\nJavaScriptの特徴\n\n* 関数(Lispで言うところのλ式)やクロージャがファーストクラス(変数に代入可能)。 \n* プロトタイプベースの継承(クラスベースでは無い) \n* 変数に型がない。 \n\ntipsなど: \n\n* varを用いて変数宣言した方が良い。\n* varを用いないとグローバル変数で生成されるから。\n* 変数でブロックレベルのスコープは無い。関数全体で有効。従って変数宣言は関数の最初で宣言すべき。 \n* ==はオペランドの型が異なるときに型変換を行って識別する。===はオペランドの型が異なるときはfalseを返す。\n* &&は最後に評価した式の評価値を返す(true, falseが返るとは限らない)。 \n* typeofで返るのは\"number\", \"string\", \"boolean\", \"object\"のみ。オブジェクトの型を知りたいときは(d.constructor == Date)などで判別する。\n* 関数に引数が無いときは()を省略しても構わない。\n* delete演算子はプロパティや配列要素を削除または未定義にする。\n* void演算子はオペランド値を廃棄して未定義値を返す。 \n* 文字列は'と\"で囲むことが出来るが、HTMLで\"を使うので'で囲む方が良い。 \n* 1行に1文しか無いときは;を省略しても構わない。自動的に;が付加される。従って、 \n\nreturn \n\n3;\n\nだと3は返らない(未定義値が返る)。\n\n* with文は変数のスコープを一時的に変えることが出来るが関数定義と変数の初期設定がある場合思いがけない振る舞いがある(詳細は未記述)ので使わない方が良い。変数への代入で代用できる。 \n* 引数の数の確認はしない。足りない場合仮引数には未定義値が束縛され、余分なものは無視される。", ["プログラマ", "javascript", "oreilly"]],
["キャズム", "http://www.amazon.co.jp/dp/4798101524", "ジェフリー・ムーア/翔泳社", "chasm", "Tue Apr 29 16:28:02 +0900 2007", "3", "この手の本は大嫌い(縦書きというだけで拒絶反応)なのだけど、自分のやりたいことを納得させるためるためには相手の考え方を知る必要があると思い読んでみた。技術を利益に結び付ける方法が記述。研究開発者として読んだので後半のマーケティング関連の記述はかなり退屈。\n\n以下、自分用メモ\n\n***市場を支える人達の分類**\n\n1. イノベータ: 新しい技術であれば飛び付く人。\n2. アーリーアダプタ: 技術が有用であるかを検討してから買う人。技術による革命を求める人。\n3. アーリーマジョリティ: 他社動向から有用であることを確認してから買う人。技術により生産性向上を求める人。\n4. レイトマジョリティ: 新しい技術の導入(プロセスの変化)を好まない人。\n5. 無関心者 : 製品の中にいつの間にか入らないと買わない人\n\n比率は3と4が名前のとおり大多数。1と2の期間にマーケットに入らなければ、一番大きな3と4で利益が得られない。\n\n1から5の順で技術は浸透していくが、各間にはギャップが存在する。このギャップをいかにスムースに越えていくかが重要。\n\n各ギャップを越えるため: \n* 1-2間: 新技術により便利になることを訴える。技術が何に使えるかを明確にする。\n失敗例. エスぺランド語(何に使えるか分からない)/TV電話\n* 2-3間: 対価以上の利益が得られることを言う。売れることを言う。\n* 3-4間: ユーザが簡単に使えるようにする。\n\n2-3間が最も大きなギャップ(これをキャズムと呼んでいる)。ハイプ曲線で言えば、注目度がピークを経て一旦下がった後にもう一度上がれるかが分かれ道。\n\n**所感**\n\n我々研究開発者は1。技術がオモロかったら飛び付くべき。ただし、2-4が納得し得る説明をする義務はある(実際正しいかはあまり問題ではなく理論整然としているところが重要)。\n課長は2、部長は3、一般ユーザは4。それ向けの説明が必要。\n\n**チェックポイント**\n\n以下が明確化出来ているか(端的に言えるか)。\n\n* このシステム(サービス)は、\n* 「-- i --」で問題を抱えている\n* 「-- ii --」向けの\n* 「- iii -」のシステム(サービス)であり\n* 「- iv --」することが出来る。\n* そして、「-- v --」とは違って、\n* この製品には「- vi --」が備わっている。\n\n* -- i -- : 市場で流通している代替手段\n* ii -- : ターゲットカスタマ\n* iii - : システム(サービス)のカテゴリ\n* iv -- : このシステム(サービス)が解決できること\n* v -- : 対抗製品\n* vi -- : サービス(ホールプロダクト)全体の機能\n\n**その他**\n\nキャズムを越えるためには、ターゲットカスタマを絞ることが重要。アプリケーションでもプラットフォームでも。先ずはそこを攻めてそこから次へと進む。\n\n* 「どこへ行こうとしているかがわかっていなければ、おそらく目的地にはたどり着かない」\n* アーリーマジョリティは比較して優れたものしか購入しない。比較的優れていることを納得してもらうために競合相手が必要。なければ作り出す必要がある。\n* ターゲットカスタマ/購入の必然性/ホールプロダクト/競争相手の中でホールプロダクトの提供が一番困難であることが望ましい。作るのが難しいのであれば、他ベンダの参入を妨げる障壁となる。\n* ギャズムではテクノロジーからビジネスへ移すことが重要", ["マーケティング"]],
["Java Puzzlers", "http://www.amazon.co.jp/dp/4894716895", "ジョシュア・ブロック\, ニール・ガフター/ピアソン・エデュケーション", "java_puzzlers", "Tue Feb 26 16:24:13 +0900 2007", "4", "この手(*)の本に書いてあることには興味がなかった。自分には、そのような知識が既にあると思っていたし、そのような仕事もしていた。でも、この本は巷にあふれている本とレベルが違う。Effective Javaの著者と知り納得(読んでないけど)。自分の無知さを恥じるより深さに感心することが多かった。\n\n東京-大阪を往復する間に、あっと言うまに読んでしまった。キチント考えていないからか。おそらくキチント考えても解けないでから、さらっと読むのが良いと思う。\n\n次の3行のプログラムを見てニヤリと出来る人は読むことオススメ(本文中のパズルの1つだけど)。\nSystem.out.println(\"what is this?\");\n http://google.com/\n System.out.println(\"do you thik this program is valid?\");\n\n一番驚いたのは、下のプログラムの実行結果(空白が全角なので注意)。\n\nclass Null {\n\n　static void message() {\n\n　　System.out.println(\"do you believe this program works?\");\n\n 　}\n\n　public static void main(String[] args) {\n\n 　((Null)null).message();\n\n　}\n}\n\n(*) String s = new String(\"no good\");のようなプログラムは無駄なのでやめましょうとか", ["プログラマ", "java", "パズル"]],
["デスマーチ", "http://www.amazon.co.jp/dp/4822282716", "エドワード・ヨードン/日経BP社", "death_march", "Tue Jan 17 15:49:23 +0900 2007", "3", "PM本には興味がなかった。そもそもプロジェクト自体に興味がなかった。初めてのプロジェクトがプチ・デスマーチであり、それを管理する必要もあるけど責任はない(*)という微妙な立場を終えようとしている今、その価値もやっと分かるだろうということで読んでみた。\n\n「デスマーチは存在する」ということを万人に知らしめたという点がこの本の最も大きな貢献だろうと思った。\n\n特にデスマーチを解決する銀の弾丸を書いている分けではない。デスマーチの回避の策として、余計なことをせずすべき事だけを集中してする、というポリシーで淡々と書いてある。読んだ誰かが色々な所で書いているのだろう。本を読む前に見聞きした文章がたくさんあった。\n\n心に留めた内容は次のもの(ほとんど読む前に聞いたことがある内容だけど)。\n\n* プロジェクトで80/20のルールは常に起きる。20%の人達で80%の仕事を行う。20%の人達がいなくなっても、今まで80%だった人達の一部が20%に変わって80%の仕事を行うようになる。\n* 優秀な人から出ていく。\n* 交渉には必ず負ける。負け方が重要。\n* 予算、納期、信頼性のどれかを削られたら、他を増やす必要がある。\n* 機能を「実現しなければいけない」、「実現すべき」、「実現されると良い」の3種類に分けて、実現する機能を決定する。\n\n(*) 責任が無いことはメリットだけでなくデメリットもあることを学んだ。こちらからの指摘事項が部外者扱いされて(緊急では無いとの理由で)重要視されないことがあった。今思えば、彼らは緊急度と重要性を正しく区別出来ていなかったのであろう。", ["チーム"]],
["エンジニアのための時間管理術", "http://www.amazon.co.jp/dp/4873113075", "Thomas A. Limoncelli / オライリージャパン", "time_management", "Tue Jan 2 15:49:23 +0900 2007", "3", "* TODO.txt(やる事リストのテキストファイル)が増加し続け、気づけば200KBを越えている \n* 雑務(重要で無いがやらなくてはいけないこと)は怒られてからでないとやらない。\n\nこんなオイラに必要な本とジャケ買い。 \n\n「自分の記憶力を当てにしない(からメモを残す)」というポリシーは自分と一致していて、書いてある内容のほとんどは経験的に実践しているものだった。得られた情報が少なかったけど、やっていたことが正しいことだったと知るのはうれしい。 \n\n「上司をうまく扱うために、上司の目標に貢献すること」というのは、自分の上司からも言われていたことで、ごもっともと理解はできる。でも上司が嫌いだからやらない。そう思わせたのも上司本人だし。 \n\nとにかく、この手の本を読めるほど時間に余裕が持てている自分に余裕が感じられてうれしい。 \n\nちなみに邦題の「エンジニアのための」とは異なり、原題は「システム管理者のための」本。映画のタイトルみたいに売れ線を狙うのはズルイ。オライリージャパン。", ["自己啓発", "oreilly"]],
["ファインマン計算機科学", "http://www.amazon.co.jp/dp/4000059416", "ファインマン\, A.ヘイ R.アレン / 岩波書店", "feynman_lectures_on_computation", "Tue Jan 2 15:49:23 +0900 2007", "4", "17,18歳の時にフト疑問に思った「コンピュータはどこまで賢くなれるのか」という答えの一つである不完全性定理については理解できた。 \n\nその疑問ほど関心はないけど、「コンピュータはどこまでサイズおよびエネルギーを小さくできるのか」について書いてある(*1)ので読んでみた。 \n\nファインマンのレクチャーノートは物理が有名。普通の教科書どおりの説明ではなく独特の説明で、結局は教科書と同じ結論にたどり着く。なぜこのようになっているのかという本質が理解できる(*2)。 \n\n「可逆計算と計算の熱力学」と「量子力学的コンピュータ」の章(のみ)を読んで自分がカシコクなれた気がした。例えば、可逆計算という概念。これによりエントロピーを保ち自由エネルギーの損出を防げる。逆を言えば普通の計算(不可逆計算)は情報量が減少し、エントロピーが増加している。言われてみれば当り前だけど、なるほどという感じ。 \n\n(*1)ちなみに最小のエネルギーは0。ただし無限の時間が必要。サイズはレジスタを原子で実現する方法(アイデア)が書いてある。 \n\n(*2)ただし、試験で問題を解くために読むには向いていないと思う。力学でハミルトニアンをこの本で学んだ経験上。また、キッテルの熱物理学が同様の本で挙げられる。この類いの本を書ける人は学んだ知識を完全に消化している人だと思うので、カシコイと尊敬する。", ["計算機科学"]],
["入門数学基礎論", "http://www.amazon.co.jp/dp/4879999660", "倉田 令二朗 / 河合文化教育研究所", "introduction_of_foundation_of_mathematics", "Tue Jan 1 15:49:23 +0900 2007", "5", "「コンピュータはどこまで賢くなれるのか」という答えの一つである不完全性定理についての本。学部に不完全性定理の存在を知り何冊か本を読んでみたけど、よく分からなかった。この本は薄いが過不足なく書いてあり、初めて理解したと意識した気がする。きちんと数学の本を初めから読めば良かったとも思ったが、おそらく何回か理解できない本を読んだ経験もあったと思う。正直、いつ読んだか忘れてしまった。京都に行ってたあたりの2004年くらいかも。", ["計算機科学"]],
["プログラム意味論", "http://www.amazon.co.jp/dp/4320026578", "共立出版/横内 寛文", "semantics_of_program", "Tue Nov 19 00:25:00 +0900 2006", "4", "学生時代に理解できなかったことを10年かかっておぼろげに理解している。以下にメモとして残す。 \n\n* 再帰関数と不動点\n\n再帰関数は f = λx. M(Mの中にfが現れる)と書ける。この関数はF = λf.λx.Mの不動点と一致する。何故ならば、F(f) = fであれば、左辺は F(f) = λx. Mであり、これが右辺 fと一致するため、もとの「f = λx. M(Mの中にfが現れる)」を満すためである。\n要は、再帰関数は同じ操作(関数適用)が何回も出来る関数 → 同じ操作(関数適用)を何回しても意味が変らない → F(f) = fという性質が必要 → 不動点という性質が必要、ということだろうと理解した。\n表示的意味論ではλf.λx.Mの最小不動点を求める操作(その結果)をμf.λx.Mと書き、プリミティブな項(意味を最小不動点を求めた結果)として扱う。\n領域とその関数が連続である必要があるのは、連続関数であれば最小不動点が存在するため。 \n\n* D～[D→D]の領域の必要性\n\nλ式の領域をDとする。あるλ式をλ抽象化したものもλ式になる。単純に集合に適用すると関数の密度{D→D}はDの密度より高いためにD≠{D→D}となってうまくいかない(λ式は自分を自分自身に適用(apply)できる)。そこで、D～[D→D]となる領域を考えて、λ抽象、関数適用時に都合の良い領域で考えて意味付けを行うようにさせた。\n\nカテゴリーを用いてもう一段階抽象的に理解出来るようになるのはいつの日か。自分の頭の弱さを嘆く。やはり学生の時は、手を動かせば出来る学問(工学)ではなく、頭を使わなければならない理論系の学問(数学/物理)に打ち込むべきだったのだろう。", ["計算機科学"]],
["プログラムの基礎理論", "http://www.amazon.co.jp/dp/4000103539", "1991 岩波書店 佐藤 雅彦\, 桜井 貴文", "theory_of_program", "Tue Sep 9 00:25:00 +0900 2006", "5", "購入してから10年以上、ようやく著者の言いたいことが分かるようになった感じ(細かい内容は全て理解していないけど)。本には理解に必要な情報が全て載っているのに(自分がヘボのため)理解できていなかった。(1階述語論理、不完全性定理、表示的意味論などの)周辺の知識を知ることで読めるようになった。\n\n\n次の方法でプログラム言語に関する性質を説明している。プログラム言語 Λを定義。Λはリストを扱う初等関数、λ抽象、関数適用が出来る。次に形式体系 SST(Symbolic Set Theory)を定義。SSTはΛを扱うことが出来る(Λを計算する公理を持つ)1階述語論理。これによりΛの性質を調べることが出来る。 \n\nSSTを用いて不完全性定理を証明している。ペアノの公理上でのそれと比較することにより、不完全性定理のミソが論理体系の中で論理体系を形式化することであることが分かる。SSTの中でSSTを形式化することで、SSTの中でSSTを扱うことが出来る。具体的にはSSTの中で「述語AはSSTで証明可能である」という述語を扱うことが出来る。SSTで証明を行うメリットはΛが扱えるので形式化の方法を直接プログラムで記述出来る点であろう。と偉そうに考えていたら、同じことが本の一番最初に書いてあった。がっくし。 \n\n計算停止問題の決定不可能とゲーデルの不完全性定理は、双方とも、自分自身(Λ\, SST)を形式化し、その中で対角化論法を使い証明している点が共通である。Λにおける自分自身の形式化とはΛの中でΛを評価するために、万能評価プログラム(e.g. Scheme in Scheme)を作成することである。 ", ["計算機科学"]],
["不思議な少年 6", "http://www.amazon.co.jp/dp/4063726665/", "山下 和美 著/講談社", "a_wonder_boy", "Mon Sep 01 07:34:39 +0900 2008", "4", "「天才柳沢教授の生活」の人が書いているマンガ。おもろい。\n「理系の人間で、世の中や人間なんてたまたま自分の周りに存在するだけ」と考えている自分でさえ、「人間を観察することがおもしろいと思う人もいるのだな」と思ったくらい。\nマンガ/小説を含めて「読み終わった後にまた読もう/ゴミ箱に捨てずに書棚に入れておこう」と思う数少ないもの。\n手塚治虫の火の鳥よろしく人生の余暇を楽しみながらライフワーク的に書いている感あり。\nでも、最近はグッと来るものが少なくなった。もっとゆっくり書いていいから良質なものを願う。", ["マンガ"]],
["フロー体験", "http://www.amazon.co.jp/dp/4790706141/", "1996 世界思想社 M. チクセントミハイ\, Mihaly Csikszentmihalyi\, 今村 浩明", "37", "Tue Aug 26 00:25:00 +0900 2006", "5", "「人間の幸せとは何か。時を経つのを忘れて熱中して何かをしている時である。熱中する内容 は、その人ごとに異なる。従って、お金や職業や名声には関係なく人は幸せになれる。熱中している時は幸せということを実感していないが、後になって振返れ ば充実感を感じ、その行為は人間的に豊かにし成長させる。」という感じのことが書いてあった。共感するところが多かった。「テレビなんて見ているのがもっ たいない」という人になれているか。自分に問うと良い気がする。 ", ["自己啓発"]]]
